/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      Notification: NotificationObject
      Task: TaskObject
      Conversation: ConversationObject
      Review: ReviewObject
      Category: CategoryObject
      UserCategory: UserCategoryObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      TaskConnection: TaskConnectionObject
      TaskEdge: TaskEdgeObject
      AggregateTask: AggregateTaskObject
      CategoryConnection: CategoryConnectionObject
      CategoryEdge: CategoryEdgeObject
      AggregateCategory: AggregateCategoryObject
      UserCategoryConnection: UserCategoryConnectionObject
      UserCategoryEdge: UserCategoryEdgeObject
      AggregateUserCategory: AggregateUserCategoryObject
      ConversationConnection: ConversationConnectionObject
      ConversationEdge: ConversationEdgeObject
      AggregateConversation: AggregateConversationObject
      NotificationConnection: NotificationConnectionObject
      NotificationEdge: NotificationEdgeObject
      AggregateNotification: AggregateNotificationObject
      ReviewConnection: ReviewConnectionObject
      ReviewEdge: ReviewEdgeObject
      AggregateReview: AggregateReviewObject
      School: SchoolObject
      SchoolConnection: SchoolConnectionObject
      SchoolEdge: SchoolEdgeObject
      AggregateSchool: AggregateSchoolObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      TaskSubscriptionPayload: TaskSubscriptionPayloadObject
      TaskPreviousValues: TaskPreviousValuesObject
      CategorySubscriptionPayload: CategorySubscriptionPayloadObject
      CategoryPreviousValues: CategoryPreviousValuesObject
      UserCategorySubscriptionPayload: UserCategorySubscriptionPayloadObject
      UserCategoryPreviousValues: UserCategoryPreviousValuesObject
      ConversationSubscriptionPayload: ConversationSubscriptionPayloadObject
      ConversationPreviousValues: ConversationPreviousValuesObject
      NotificationSubscriptionPayload: NotificationSubscriptionPayloadObject
      NotificationPreviousValues: NotificationPreviousValuesObject
      ReviewSubscriptionPayload: ReviewSubscriptionPayloadObject
      ReviewPreviousValues: ReviewPreviousValuesObject
      SchoolSubscriptionPayload: SchoolSubscriptionPayloadObject
      SchoolPreviousValues: SchoolPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      Notification: NotificationFieldDetails
      Task: TaskFieldDetails
      Conversation: ConversationFieldDetails
      Review: ReviewFieldDetails
      Category: CategoryFieldDetails
      UserCategory: UserCategoryFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      TaskConnection: TaskConnectionFieldDetails
      TaskEdge: TaskEdgeFieldDetails
      AggregateTask: AggregateTaskFieldDetails
      CategoryConnection: CategoryConnectionFieldDetails
      CategoryEdge: CategoryEdgeFieldDetails
      AggregateCategory: AggregateCategoryFieldDetails
      UserCategoryConnection: UserCategoryConnectionFieldDetails
      UserCategoryEdge: UserCategoryEdgeFieldDetails
      AggregateUserCategory: AggregateUserCategoryFieldDetails
      ConversationConnection: ConversationConnectionFieldDetails
      ConversationEdge: ConversationEdgeFieldDetails
      AggregateConversation: AggregateConversationFieldDetails
      NotificationConnection: NotificationConnectionFieldDetails
      NotificationEdge: NotificationEdgeFieldDetails
      AggregateNotification: AggregateNotificationFieldDetails
      ReviewConnection: ReviewConnectionFieldDetails
      ReviewEdge: ReviewEdgeFieldDetails
      AggregateReview: AggregateReviewFieldDetails
      School: SchoolFieldDetails
      SchoolConnection: SchoolConnectionFieldDetails
      SchoolEdge: SchoolEdgeFieldDetails
      AggregateSchool: AggregateSchoolFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      TaskSubscriptionPayload: TaskSubscriptionPayloadFieldDetails
      TaskPreviousValues: TaskPreviousValuesFieldDetails
      CategorySubscriptionPayload: CategorySubscriptionPayloadFieldDetails
      CategoryPreviousValues: CategoryPreviousValuesFieldDetails
      UserCategorySubscriptionPayload: UserCategorySubscriptionPayloadFieldDetails
      UserCategoryPreviousValues: UserCategoryPreviousValuesFieldDetails
      ConversationSubscriptionPayload: ConversationSubscriptionPayloadFieldDetails
      ConversationPreviousValues: ConversationPreviousValuesFieldDetails
      NotificationSubscriptionPayload: NotificationSubscriptionPayloadFieldDetails
      NotificationPreviousValues: NotificationPreviousValuesFieldDetails
      ReviewSubscriptionPayload: ReviewSubscriptionPayloadFieldDetails
      ReviewPreviousValues: ReviewPreviousValuesFieldDetails
      SchoolSubscriptionPayload: SchoolSubscriptionPayloadFieldDetails
      SchoolPreviousValues: SchoolPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      NotificationWhereInput: NotificationWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      TaskWhereInput: TaskWhereInputInputObject
      ConversationWhereInput: ConversationWhereInputInputObject
      ReviewWhereInput: ReviewWhereInputInputObject
      CategoryWhereInput: CategoryWhereInputInputObject
      UserCategoryWhereInput: UserCategoryWhereInputInputObject
      TaskWhereUniqueInput: TaskWhereUniqueInputInputObject
      CategoryWhereUniqueInput: CategoryWhereUniqueInputInputObject
      UserCategoryWhereUniqueInput: UserCategoryWhereUniqueInputInputObject
      ConversationWhereUniqueInput: ConversationWhereUniqueInputInputObject
      NotificationWhereUniqueInput: NotificationWhereUniqueInputInputObject
      ReviewWhereUniqueInput: ReviewWhereUniqueInputInputObject
      SchoolWhereUniqueInput: SchoolWhereUniqueInputInputObject
      SchoolWhereInput: SchoolWhereInputInputObject
      UserCreateInput: UserCreateInputInputObject
      NotificationCreateManyWithoutUserInput: NotificationCreateManyWithoutUserInputInputObject
      NotificationCreateWithoutUserInput: NotificationCreateWithoutUserInputInputObject
      UserCreateManyInput: UserCreateManyInputInputObject
      TaskCreateManyWithoutParticipantsInput: TaskCreateManyWithoutParticipantsInputInputObject
      TaskCreateWithoutParticipantsInput: TaskCreateWithoutParticipantsInputInputObject
      UserCreateOneInput: UserCreateOneInputInputObject
      ConversationCreateManyWithoutTaskInput: ConversationCreateManyWithoutTaskInputInputObject
      ConversationCreateWithoutTaskInput: ConversationCreateWithoutTaskInputInputObject
      UserCreateManyWithoutConversationsInput: UserCreateManyWithoutConversationsInputInputObject
      UserCreateWithoutConversationsInput: UserCreateWithoutConversationsInputInputObject
      ReviewCreateManyWithoutReviewerInput: ReviewCreateManyWithoutReviewerInputInputObject
      ReviewCreateWithoutReviewerInput: ReviewCreateWithoutReviewerInputInputObject
      TaskCreateOneWithoutReviewsInput: TaskCreateOneWithoutReviewsInputInputObject
      TaskCreateWithoutReviewsInput: TaskCreateWithoutReviewsInputInputObject
      UserCreateManyWithoutTasksInput: UserCreateManyWithoutTasksInputInputObject
      UserCreateWithoutTasksInput: UserCreateWithoutTasksInputInputObject
      UserCategoryCreateManyWithoutUserInput: UserCategoryCreateManyWithoutUserInputInputObject
      UserCategoryCreateWithoutUserInput: UserCategoryCreateWithoutUserInputInputObject
      CategoryCreateOneWithoutUserCategoriesInput: CategoryCreateOneWithoutUserCategoriesInputInputObject
      CategoryCreateWithoutUserCategoriesInput: CategoryCreateWithoutUserCategoriesInputInputObject
      TaskCreateManyWithoutCategoryInput: TaskCreateManyWithoutCategoryInputInputObject
      TaskCreateWithoutCategoryInput: TaskCreateWithoutCategoryInputInputObject
      ReviewCreateManyWithoutTaskInput: ReviewCreateManyWithoutTaskInputInputObject
      ReviewCreateWithoutTaskInput: ReviewCreateWithoutTaskInputInputObject
      UserCreateOneWithoutReviewsInput: UserCreateOneWithoutReviewsInputInputObject
      UserCreateWithoutReviewsInput: UserCreateWithoutReviewsInputInputObject
      ConversationCreateManyWithoutParticipantsInput: ConversationCreateManyWithoutParticipantsInputInputObject
      ConversationCreateWithoutParticipantsInput: ConversationCreateWithoutParticipantsInputInputObject
      TaskCreateOneWithoutConversationsInput: TaskCreateOneWithoutConversationsInputInputObject
      TaskCreateWithoutConversationsInput: TaskCreateWithoutConversationsInputInputObject
      CategoryCreateOneWithoutTasksInput: CategoryCreateOneWithoutTasksInputInputObject
      CategoryCreateWithoutTasksInput: CategoryCreateWithoutTasksInputInputObject
      UserCategoryCreateManyWithoutCategoryInput: UserCategoryCreateManyWithoutCategoryInputInputObject
      UserCategoryCreateWithoutCategoryInput: UserCategoryCreateWithoutCategoryInputInputObject
      UserCreateOneWithoutCategoriesInput: UserCreateOneWithoutCategoriesInputInputObject
      UserCreateWithoutCategoriesInput: UserCreateWithoutCategoriesInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      NotificationUpdateManyWithoutUserInput: NotificationUpdateManyWithoutUserInputInputObject
      NotificationUpdateWithWhereUniqueWithoutUserInput: NotificationUpdateWithWhereUniqueWithoutUserInputInputObject
      NotificationUpdateWithoutUserDataInput: NotificationUpdateWithoutUserDataInputInputObject
      NotificationUpsertWithWhereUniqueWithoutUserInput: NotificationUpsertWithWhereUniqueWithoutUserInputInputObject
      NotificationScalarWhereInput: NotificationScalarWhereInputInputObject
      NotificationUpdateManyWithWhereNestedInput: NotificationUpdateManyWithWhereNestedInputInputObject
      NotificationUpdateManyDataInput: NotificationUpdateManyDataInputInputObject
      UserUpdateManyInput: UserUpdateManyInputInputObject
      UserUpdateWithWhereUniqueNestedInput: UserUpdateWithWhereUniqueNestedInputInputObject
      UserUpdateDataInput: UserUpdateDataInputInputObject
      TaskUpdateManyWithoutParticipantsInput: TaskUpdateManyWithoutParticipantsInputInputObject
      TaskUpdateWithWhereUniqueWithoutParticipantsInput: TaskUpdateWithWhereUniqueWithoutParticipantsInputInputObject
      TaskUpdateWithoutParticipantsDataInput: TaskUpdateWithoutParticipantsDataInputInputObject
      UserUpdateOneRequiredInput: UserUpdateOneRequiredInputInputObject
      UserUpsertNestedInput: UserUpsertNestedInputInputObject
      ConversationUpdateManyWithoutTaskInput: ConversationUpdateManyWithoutTaskInputInputObject
      ConversationUpdateWithWhereUniqueWithoutTaskInput: ConversationUpdateWithWhereUniqueWithoutTaskInputInputObject
      ConversationUpdateWithoutTaskDataInput: ConversationUpdateWithoutTaskDataInputInputObject
      UserUpdateManyWithoutConversationsInput: UserUpdateManyWithoutConversationsInputInputObject
      UserUpdateWithWhereUniqueWithoutConversationsInput: UserUpdateWithWhereUniqueWithoutConversationsInputInputObject
      UserUpdateWithoutConversationsDataInput: UserUpdateWithoutConversationsDataInputInputObject
      ReviewUpdateManyWithoutReviewerInput: ReviewUpdateManyWithoutReviewerInputInputObject
      ReviewUpdateWithWhereUniqueWithoutReviewerInput: ReviewUpdateWithWhereUniqueWithoutReviewerInputInputObject
      ReviewUpdateWithoutReviewerDataInput: ReviewUpdateWithoutReviewerDataInputInputObject
      TaskUpdateOneWithoutReviewsInput: TaskUpdateOneWithoutReviewsInputInputObject
      TaskUpdateWithoutReviewsDataInput: TaskUpdateWithoutReviewsDataInputInputObject
      UserUpdateManyWithoutTasksInput: UserUpdateManyWithoutTasksInputInputObject
      UserUpdateWithWhereUniqueWithoutTasksInput: UserUpdateWithWhereUniqueWithoutTasksInputInputObject
      UserUpdateWithoutTasksDataInput: UserUpdateWithoutTasksDataInputInputObject
      UserCategoryUpdateManyWithoutUserInput: UserCategoryUpdateManyWithoutUserInputInputObject
      UserCategoryUpdateWithWhereUniqueWithoutUserInput: UserCategoryUpdateWithWhereUniqueWithoutUserInputInputObject
      UserCategoryUpdateWithoutUserDataInput: UserCategoryUpdateWithoutUserDataInputInputObject
      CategoryUpdateOneWithoutUserCategoriesInput: CategoryUpdateOneWithoutUserCategoriesInputInputObject
      CategoryUpdateWithoutUserCategoriesDataInput: CategoryUpdateWithoutUserCategoriesDataInputInputObject
      TaskUpdateManyWithoutCategoryInput: TaskUpdateManyWithoutCategoryInputInputObject
      TaskUpdateWithWhereUniqueWithoutCategoryInput: TaskUpdateWithWhereUniqueWithoutCategoryInputInputObject
      TaskUpdateWithoutCategoryDataInput: TaskUpdateWithoutCategoryDataInputInputObject
      ReviewUpdateManyWithoutTaskInput: ReviewUpdateManyWithoutTaskInputInputObject
      ReviewUpdateWithWhereUniqueWithoutTaskInput: ReviewUpdateWithWhereUniqueWithoutTaskInputInputObject
      ReviewUpdateWithoutTaskDataInput: ReviewUpdateWithoutTaskDataInputInputObject
      UserUpdateOneRequiredWithoutReviewsInput: UserUpdateOneRequiredWithoutReviewsInputInputObject
      UserUpdateWithoutReviewsDataInput: UserUpdateWithoutReviewsDataInputInputObject
      ConversationUpdateManyWithoutParticipantsInput: ConversationUpdateManyWithoutParticipantsInputInputObject
      ConversationUpdateWithWhereUniqueWithoutParticipantsInput: ConversationUpdateWithWhereUniqueWithoutParticipantsInputInputObject
      ConversationUpdateWithoutParticipantsDataInput: ConversationUpdateWithoutParticipantsDataInputInputObject
      TaskUpdateOneWithoutConversationsInput: TaskUpdateOneWithoutConversationsInputInputObject
      TaskUpdateWithoutConversationsDataInput: TaskUpdateWithoutConversationsDataInputInputObject
      CategoryUpdateOneRequiredWithoutTasksInput: CategoryUpdateOneRequiredWithoutTasksInputInputObject
      CategoryUpdateWithoutTasksDataInput: CategoryUpdateWithoutTasksDataInputInputObject
      UserCategoryUpdateManyWithoutCategoryInput: UserCategoryUpdateManyWithoutCategoryInputInputObject
      UserCategoryUpdateWithWhereUniqueWithoutCategoryInput: UserCategoryUpdateWithWhereUniqueWithoutCategoryInputInputObject
      UserCategoryUpdateWithoutCategoryDataInput: UserCategoryUpdateWithoutCategoryDataInputInputObject
      UserUpdateOneWithoutCategoriesInput: UserUpdateOneWithoutCategoriesInputInputObject
      UserUpdateWithoutCategoriesDataInput: UserUpdateWithoutCategoriesDataInputInputObject
      UserUpsertWithoutCategoriesInput: UserUpsertWithoutCategoriesInputInputObject
      UserCategoryUpsertWithWhereUniqueWithoutCategoryInput: UserCategoryUpsertWithWhereUniqueWithoutCategoryInputInputObject
      UserCategoryScalarWhereInput: UserCategoryScalarWhereInputInputObject
      UserCategoryUpdateManyWithWhereNestedInput: UserCategoryUpdateManyWithWhereNestedInputInputObject
      UserCategoryUpdateManyDataInput: UserCategoryUpdateManyDataInputInputObject
      CategoryUpsertWithoutTasksInput: CategoryUpsertWithoutTasksInputInputObject
      TaskUpsertWithoutConversationsInput: TaskUpsertWithoutConversationsInputInputObject
      ConversationUpsertWithWhereUniqueWithoutParticipantsInput: ConversationUpsertWithWhereUniqueWithoutParticipantsInputInputObject
      ConversationScalarWhereInput: ConversationScalarWhereInputInputObject
      ConversationUpdateManyWithWhereNestedInput: ConversationUpdateManyWithWhereNestedInputInputObject
      ConversationUpdateManyDataInput: ConversationUpdateManyDataInputInputObject
      UserUpsertWithoutReviewsInput: UserUpsertWithoutReviewsInputInputObject
      ReviewUpsertWithWhereUniqueWithoutTaskInput: ReviewUpsertWithWhereUniqueWithoutTaskInputInputObject
      ReviewScalarWhereInput: ReviewScalarWhereInputInputObject
      ReviewUpdateManyWithWhereNestedInput: ReviewUpdateManyWithWhereNestedInputInputObject
      ReviewUpdateManyDataInput: ReviewUpdateManyDataInputInputObject
      TaskUpsertWithWhereUniqueWithoutCategoryInput: TaskUpsertWithWhereUniqueWithoutCategoryInputInputObject
      TaskScalarWhereInput: TaskScalarWhereInputInputObject
      TaskUpdateManyWithWhereNestedInput: TaskUpdateManyWithWhereNestedInputInputObject
      TaskUpdateManyDataInput: TaskUpdateManyDataInputInputObject
      CategoryUpsertWithoutUserCategoriesInput: CategoryUpsertWithoutUserCategoriesInputInputObject
      UserCategoryUpsertWithWhereUniqueWithoutUserInput: UserCategoryUpsertWithWhereUniqueWithoutUserInputInputObject
      UserUpsertWithWhereUniqueWithoutTasksInput: UserUpsertWithWhereUniqueWithoutTasksInputInputObject
      UserScalarWhereInput: UserScalarWhereInputInputObject
      UserUpdateManyWithWhereNestedInput: UserUpdateManyWithWhereNestedInputInputObject
      UserUpdateManyDataInput: UserUpdateManyDataInputInputObject
      TaskUpsertWithoutReviewsInput: TaskUpsertWithoutReviewsInputInputObject
      ReviewUpsertWithWhereUniqueWithoutReviewerInput: ReviewUpsertWithWhereUniqueWithoutReviewerInputInputObject
      UserUpsertWithWhereUniqueWithoutConversationsInput: UserUpsertWithWhereUniqueWithoutConversationsInputInputObject
      ConversationUpsertWithWhereUniqueWithoutTaskInput: ConversationUpsertWithWhereUniqueWithoutTaskInputInputObject
      TaskUpsertWithWhereUniqueWithoutParticipantsInput: TaskUpsertWithWhereUniqueWithoutParticipantsInputInputObject
      UserUpsertWithWhereUniqueNestedInput: UserUpsertWithWhereUniqueNestedInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      TaskCreateInput: TaskCreateInputInputObject
      TaskUpdateInput: TaskUpdateInputInputObject
      TaskUpdateManyMutationInput: TaskUpdateManyMutationInputInputObject
      CategoryCreateInput: CategoryCreateInputInputObject
      CategoryUpdateInput: CategoryUpdateInputInputObject
      CategoryUpdateManyMutationInput: CategoryUpdateManyMutationInputInputObject
      UserCategoryCreateInput: UserCategoryCreateInputInputObject
      UserCategoryUpdateInput: UserCategoryUpdateInputInputObject
      UserCategoryUpdateManyMutationInput: UserCategoryUpdateManyMutationInputInputObject
      ConversationCreateInput: ConversationCreateInputInputObject
      ConversationUpdateInput: ConversationUpdateInputInputObject
      ConversationUpdateManyMutationInput: ConversationUpdateManyMutationInputInputObject
      NotificationCreateInput: NotificationCreateInputInputObject
      UserCreateOneWithoutNotificationsInput: UserCreateOneWithoutNotificationsInputInputObject
      UserCreateWithoutNotificationsInput: UserCreateWithoutNotificationsInputInputObject
      NotificationUpdateInput: NotificationUpdateInputInputObject
      UserUpdateOneRequiredWithoutNotificationsInput: UserUpdateOneRequiredWithoutNotificationsInputInputObject
      UserUpdateWithoutNotificationsDataInput: UserUpdateWithoutNotificationsDataInputInputObject
      UserUpsertWithoutNotificationsInput: UserUpsertWithoutNotificationsInputInputObject
      NotificationUpdateManyMutationInput: NotificationUpdateManyMutationInputInputObject
      ReviewCreateInput: ReviewCreateInputInputObject
      ReviewUpdateInput: ReviewUpdateInputInputObject
      ReviewUpdateManyMutationInput: ReviewUpdateManyMutationInputInputObject
      SchoolCreateInput: SchoolCreateInputInputObject
      SchoolUpdateInput: SchoolUpdateInputInputObject
      SchoolUpdateManyMutationInput: SchoolUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      TaskSubscriptionWhereInput: TaskSubscriptionWhereInputInputObject
      CategorySubscriptionWhereInput: CategorySubscriptionWhereInputInputObject
      UserCategorySubscriptionWhereInput: UserCategorySubscriptionWhereInputInputObject
      ConversationSubscriptionWhereInput: ConversationSubscriptionWhereInputInputObject
      NotificationSubscriptionWhereInput: NotificationSubscriptionWhereInputInputObject
      ReviewSubscriptionWhereInput: ReviewSubscriptionWhereInputInputObject
      SchoolSubscriptionWhereInput: SchoolSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    ROLE: ROLEValues,
    TASK_TYPE: TASK_TYPEValues,
    RATING: RATINGValues,
    NotificationOrderByInput: NotificationOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    TaskOrderByInput: TaskOrderByInputValues,
    ConversationOrderByInput: ConversationOrderByInputValues,
    ReviewOrderByInput: ReviewOrderByInputValues,
    UserCategoryOrderByInput: UserCategoryOrderByInputValues,
    CategoryOrderByInput: CategoryOrderByInputValues,
    SchoolOrderByInput: SchoolOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'task', args?: QueryTaskArgs[] | false, alias?: string  } 
  | { name: 'tasks', args?: QueryTasksArgs[] | false, alias?: string  } 
  | { name: 'tasksConnection', args?: QueryTasksConnectionArgs[] | false, alias?: string  } 
  | { name: 'category', args?: QueryCategoryArgs[] | false, alias?: string  } 
  | { name: 'categories', args?: QueryCategoriesArgs[] | false, alias?: string  } 
  | { name: 'categoriesConnection', args?: QueryCategoriesConnectionArgs[] | false, alias?: string  } 
  | { name: 'userCategory', args?: QueryUserCategoryArgs[] | false, alias?: string  } 
  | { name: 'userCategories', args?: QueryUserCategoriesArgs[] | false, alias?: string  } 
  | { name: 'userCategoriesConnection', args?: QueryUserCategoriesConnectionArgs[] | false, alias?: string  } 
  | { name: 'conversation', args?: QueryConversationArgs[] | false, alias?: string  } 
  | { name: 'conversations', args?: QueryConversationsArgs[] | false, alias?: string  } 
  | { name: 'conversationsConnection', args?: QueryConversationsConnectionArgs[] | false, alias?: string  } 
  | { name: 'notification', args?: QueryNotificationArgs[] | false, alias?: string  } 
  | { name: 'notifications', args?: QueryNotificationsArgs[] | false, alias?: string  } 
  | { name: 'notificationsConnection', args?: QueryNotificationsConnectionArgs[] | false, alias?: string  } 
  | { name: 'review', args?: QueryReviewArgs[] | false, alias?: string  } 
  | { name: 'reviews', args?: QueryReviewsArgs[] | false, alias?: string  } 
  | { name: 'reviewsConnection', args?: QueryReviewsConnectionArgs[] | false, alias?: string  } 
  | { name: 'school', args?: QuerySchoolArgs[] | false, alias?: string  } 
  | { name: 'schools', args?: QuerySchoolsArgs[] | false, alias?: string  } 
  | { name: 'schoolsConnection', args?: QuerySchoolsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'task'
  | 'tasks'
  | 'tasksConnection'
  | 'category'
  | 'categories'
  | 'categoriesConnection'
  | 'userCategory'
  | 'userCategories'
  | 'userCategoriesConnection'
  | 'conversation'
  | 'conversations'
  | 'conversationsConnection'
  | 'notification'
  | 'notifications'
  | 'notificationsConnection'
  | 'review'
  | 'reviews'
  | 'reviewsConnection'
  | 'school'
  | 'schools'
  | 'schoolsConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTaskArgs =
  | 'where'
type QueryTasksArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTasksConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCategoryArgs =
  | 'where'
type QueryCategoriesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCategoriesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserCategoryArgs =
  | 'where'
type QueryUserCategoriesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserCategoriesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryConversationArgs =
  | 'where'
type QueryConversationsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryConversationsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryNotificationArgs =
  | 'where'
type QueryNotificationsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryNotificationsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryReviewArgs =
  | 'where'
type QueryReviewsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryReviewsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySchoolArgs =
  | 'where'
type QuerySchoolsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySchoolsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  task: {
    type: 'Task'
    args: Record<QueryTaskArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TaskWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Task | null> | prisma.Task | null
  }
  tasks: {
    type: 'Task'
    args: Record<QueryTasksArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TaskWhereInput | null, orderBy?: prisma.TaskOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Task[]> | prisma.Task[]
  }
  tasksConnection: {
    type: 'TaskConnection'
    args: Record<QueryTasksConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TaskWhereInput | null, orderBy?: prisma.TaskOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TaskConnection> | prisma.TaskConnection
  }
  category: {
    type: 'Category'
    args: Record<QueryCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CategoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category | null> | prisma.Category | null
  }
  categories: {
    type: 'Category'
    args: Record<QueryCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CategoryWhereInput | null, orderBy?: prisma.CategoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category[]> | prisma.Category[]
  }
  categoriesConnection: {
    type: 'CategoryConnection'
    args: Record<QueryCategoriesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CategoryWhereInput | null, orderBy?: prisma.CategoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CategoryConnection> | prisma.CategoryConnection
  }
  userCategory: {
    type: 'UserCategory'
    args: Record<QueryUserCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserCategoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserCategory | null> | prisma.UserCategory | null
  }
  userCategories: {
    type: 'UserCategory'
    args: Record<QueryUserCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserCategoryWhereInput | null, orderBy?: prisma.UserCategoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserCategory[]> | prisma.UserCategory[]
  }
  userCategoriesConnection: {
    type: 'UserCategoryConnection'
    args: Record<QueryUserCategoriesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserCategoryWhereInput | null, orderBy?: prisma.UserCategoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserCategoryConnection> | prisma.UserCategoryConnection
  }
  conversation: {
    type: 'Conversation'
    args: Record<QueryConversationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ConversationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Conversation | null> | prisma.Conversation | null
  }
  conversations: {
    type: 'Conversation'
    args: Record<QueryConversationsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ConversationWhereInput | null, orderBy?: prisma.ConversationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Conversation[]> | prisma.Conversation[]
  }
  conversationsConnection: {
    type: 'ConversationConnection'
    args: Record<QueryConversationsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ConversationWhereInput | null, orderBy?: prisma.ConversationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ConversationConnection> | prisma.ConversationConnection
  }
  notification: {
    type: 'Notification'
    args: Record<QueryNotificationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: NotificationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Notification | null> | prisma.Notification | null
  }
  notifications: {
    type: 'Notification'
    args: Record<QueryNotificationsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: NotificationWhereInput | null, orderBy?: prisma.NotificationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Notification[]> | prisma.Notification[]
  }
  notificationsConnection: {
    type: 'NotificationConnection'
    args: Record<QueryNotificationsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: NotificationWhereInput | null, orderBy?: prisma.NotificationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NotificationConnection> | prisma.NotificationConnection
  }
  review: {
    type: 'Review'
    args: Record<QueryReviewArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ReviewWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Review | null> | prisma.Review | null
  }
  reviews: {
    type: 'Review'
    args: Record<QueryReviewsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ReviewWhereInput | null, orderBy?: prisma.ReviewOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Review[]> | prisma.Review[]
  }
  reviewsConnection: {
    type: 'ReviewConnection'
    args: Record<QueryReviewsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ReviewWhereInput | null, orderBy?: prisma.ReviewOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ReviewConnection> | prisma.ReviewConnection
  }
  school: {
    type: 'School'
    args: Record<QuerySchoolArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: SchoolWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.School | null> | prisma.School | null
  }
  schools: {
    type: 'School'
    args: Record<QuerySchoolsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SchoolWhereInput | null, orderBy?: prisma.SchoolOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.School[]> | prisma.School[]
  }
  schoolsConnection: {
    type: 'SchoolConnection'
    args: Record<QuerySchoolsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SchoolWhereInput | null, orderBy?: prisma.SchoolOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SchoolConnection> | prisma.SchoolConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'token', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'username', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'major', args?: [] | false, alias?: string  } 
  | { name: 'townYouGrewUpIn', args?: [] | false, alias?: string  } 
  | { name: 'favoriteHobby', args?: [] | false, alias?: string  } 
  | { name: 'photo_url', args?: [] | false, alias?: string  } 
  | { name: 'cover_photo_url', args?: [] | false, alias?: string  } 
  | { name: 'flagged_as_objectionable', args?: [] | false, alias?: string  } 
  | { name: 'view_objectionable_content', args?: [] | false, alias?: string  } 
  | { name: 'school', args?: [] | false, alias?: string  } 
  | { name: 'about_me', args?: [] | false, alias?: string  } 
  | { name: 'receive_push_notifications', args?: [] | false, alias?: string  } 
  | { name: 'oneSignalPlayerId', args?: [] | false, alias?: string  } 
  | { name: 'fcm_token', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'facebook_social_link', args?: [] | false, alias?: string  } 
  | { name: 'twitter_social_link', args?: [] | false, alias?: string  } 
  | { name: 'instagram_social_link', args?: [] | false, alias?: string  } 
  | { name: 'snapchat_social_link', args?: [] | false, alias?: string  } 
  | { name: 'role', args?: [] | false, alias?: string  } 
  | { name: 'notifications', args?: UserNotificationsArgs[] | false, alias?: string  } 
  | { name: 'block_list', args?: UserBlock_listArgs[] | false, alias?: string  } 
  | { name: 'tasks', args?: UserTasksArgs[] | false, alias?: string  } 
  | { name: 'reviews', args?: UserReviewsArgs[] | false, alias?: string  } 
  | { name: 'categories', args?: UserCategoriesArgs[] | false, alias?: string  } 
  | { name: 'conversations', args?: UserConversationsArgs[] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'email'
  | 'token'
  | 'name'
  | 'username'
  | 'description'
  | 'major'
  | 'townYouGrewUpIn'
  | 'favoriteHobby'
  | 'photo_url'
  | 'cover_photo_url'
  | 'flagged_as_objectionable'
  | 'view_objectionable_content'
  | 'school'
  | 'about_me'
  | 'receive_push_notifications'
  | 'oneSignalPlayerId'
  | 'fcm_token'
  | 'createdAt'
  | 'updatedAt'
  | 'facebook_social_link'
  | 'twitter_social_link'
  | 'instagram_social_link'
  | 'snapchat_social_link'
  | 'role'
  | 'notifications'
  | 'block_list'
  | 'tasks'
  | 'reviews'
  | 'categories'
  | 'conversations'


type UserNotificationsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserBlock_listArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserTasksArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserReviewsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserCategoriesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserConversationsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  token: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  username: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  major: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  townYouGrewUpIn: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  favoriteHobby: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  photo_url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  cover_photo_url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  flagged_as_objectionable: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  view_objectionable_content: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  school: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  about_me: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  receive_push_notifications: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  oneSignalPlayerId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  fcm_token: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  facebook_social_link: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  twitter_social_link: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  instagram_social_link: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  snapchat_social_link: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  role: {
    type: 'ROLE'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ROLE | null> | prisma.ROLE | null
  }
  notifications: {
    type: 'Notification'
    args: Record<UserNotificationsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: NotificationWhereInput | null, orderBy?: prisma.NotificationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Notification[]> | prisma.Notification[]
  }
  block_list: {
    type: 'User'
    args: Record<UserBlock_listArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  tasks: {
    type: 'Task'
    args: Record<UserTasksArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: TaskWhereInput | null, orderBy?: prisma.TaskOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Task[]> | prisma.Task[]
  }
  reviews: {
    type: 'Review'
    args: Record<UserReviewsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: ReviewWhereInput | null, orderBy?: prisma.ReviewOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Review[]> | prisma.Review[]
  }
  categories: {
    type: 'UserCategory'
    args: Record<UserCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: UserCategoryWhereInput | null, orderBy?: prisma.UserCategoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserCategory[]> | prisma.UserCategory[]
  }
  conversations: {
    type: 'Conversation'
    args: Record<UserConversationsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: ConversationWhereInput | null, orderBy?: prisma.ConversationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Conversation[]> | prisma.Conversation[]
  }
}
  

// Types for Notification

type NotificationObject =
  | NotificationFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'image_url', args?: [] | false, alias?: string  } 
  | { name: 'data', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'expiration', args?: [] | false, alias?: string  } 
  | { name: 'read', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 

type NotificationFields =
  | 'id'
  | 'title'
  | 'description'
  | 'image_url'
  | 'data'
  | 'createdAt'
  | 'updatedAt'
  | 'expiration'
  | 'read'
  | 'user'



  

export interface NotificationFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  image_url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  data: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  expiration: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  read: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Notification">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
}
  

// Types for Task

type TaskObject =
  | TaskFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'location', args?: [] | false, alias?: string  } 
  | { name: 'eventTime', args?: [] | false, alias?: string  } 
  | { name: 'featured', args?: [] | false, alias?: string  } 
  | { name: 'flagged_as_objectionable', args?: [] | false, alias?: string  } 
  | { name: 'created_by_joinmi', args?: [] | false, alias?: string  } 
  | { name: 'task_type', args?: [] | false, alias?: string  } 
  | { name: 'active', args?: [] | false, alias?: string  } 
  | { name: 'expiration', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'creator', args?: [] | false, alias?: string  } 
  | { name: 'participants', args?: TaskParticipantsArgs[] | false, alias?: string  } 
  | { name: 'conversations', args?: TaskConversationsArgs[] | false, alias?: string  } 
  | { name: 'reviews', args?: TaskReviewsArgs[] | false, alias?: string  } 
  | { name: 'category', args?: [] | false, alias?: string  } 

type TaskFields =
  | 'id'
  | 'title'
  | 'description'
  | 'location'
  | 'eventTime'
  | 'featured'
  | 'flagged_as_objectionable'
  | 'created_by_joinmi'
  | 'task_type'
  | 'active'
  | 'expiration'
  | 'createdAt'
  | 'updatedAt'
  | 'creator'
  | 'participants'
  | 'conversations'
  | 'reviews'
  | 'category'


type TaskParticipantsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type TaskConversationsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type TaskReviewsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface TaskFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  location: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  eventTime: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  featured: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  flagged_as_objectionable: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  created_by_joinmi: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  task_type: {
    type: 'TASK_TYPE'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Task">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TASK_TYPE | null> | prisma.TASK_TYPE | null
  }
  active: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  expiration: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  creator: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Task">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  participants: {
    type: 'User'
    args: Record<TaskParticipantsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Task">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  conversations: {
    type: 'Conversation'
    args: Record<TaskConversationsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Task">,
      args: { where?: ConversationWhereInput | null, orderBy?: prisma.ConversationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Conversation[]> | prisma.Conversation[]
  }
  reviews: {
    type: 'Review'
    args: Record<TaskReviewsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Task">,
      args: { where?: ReviewWhereInput | null, orderBy?: prisma.ReviewOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Review[]> | prisma.Review[]
  }
  category: {
    type: 'Category'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Task">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category> | prisma.Category
  }
}
  

// Types for Conversation

type ConversationObject =
  | ConversationFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'active', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'participants', args?: ConversationParticipantsArgs[] | false, alias?: string  } 
  | { name: 'task', args?: [] | false, alias?: string  } 

type ConversationFields =
  | 'id'
  | 'description'
  | 'active'
  | 'createdAt'
  | 'updatedAt'
  | 'participants'
  | 'task'


type ConversationParticipantsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ConversationFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  active: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  participants: {
    type: 'User'
    args: Record<ConversationParticipantsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Conversation">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  task: {
    type: 'Task'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Conversation">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Task | null> | prisma.Task | null
  }
}
  

// Types for Review

type ReviewObject =
  | ReviewFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'rating', args?: [] | false, alias?: string  } 
  | { name: 'reviewer', args?: [] | false, alias?: string  } 
  | { name: 'task', args?: [] | false, alias?: string  } 

type ReviewFields =
  | 'id'
  | 'title'
  | 'description'
  | 'createdAt'
  | 'updatedAt'
  | 'rating'
  | 'reviewer'
  | 'task'



  

export interface ReviewFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  rating: {
    type: 'RATING'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Review">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RATING | null> | prisma.RATING | null
  }
  reviewer: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Review">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  task: {
    type: 'Task'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Review">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Task | null> | prisma.Task | null
  }
}
  

// Types for Category

type CategoryObject =
  | CategoryFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'image_url', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'tasks', args?: CategoryTasksArgs[] | false, alias?: string  } 
  | { name: 'userCategories', args?: CategoryUserCategoriesArgs[] | false, alias?: string  } 

type CategoryFields =
  | 'id'
  | 'title'
  | 'image_url'
  | 'createdAt'
  | 'updatedAt'
  | 'tasks'
  | 'userCategories'


type CategoryTasksArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type CategoryUserCategoriesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface CategoryFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  image_url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  tasks: {
    type: 'Task'
    args: Record<CategoryTasksArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Category">,
      args: { where?: TaskWhereInput | null, orderBy?: prisma.TaskOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Task[]> | prisma.Task[]
  }
  userCategories: {
    type: 'UserCategory'
    args: Record<CategoryUserCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Category">,
      args: { where?: UserCategoryWhereInput | null, orderBy?: prisma.UserCategoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserCategory[]> | prisma.UserCategory[]
  }
}
  

// Types for UserCategory

type UserCategoryObject =
  | UserCategoryFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'category', args?: [] | false, alias?: string  } 
  | { name: 'selected', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 

type UserCategoryFields =
  | 'id'
  | 'category'
  | 'selected'
  | 'createdAt'
  | 'updatedAt'
  | 'user'



  

export interface UserCategoryFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  category: {
    type: 'Category'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserCategory">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category | null> | prisma.Category | null
  }
  selected: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserCategory">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TaskConnection

type TaskConnectionObject =
  | TaskConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TaskConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TaskConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TaskConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TaskEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TaskConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TaskEdge[]> | prisma.TaskEdge[]
  }
  aggregate: {
    type: 'AggregateTask'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TaskConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTask> | prisma.AggregateTask
  }
}
  

// Types for TaskEdge

type TaskEdgeObject =
  | TaskEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TaskEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TaskEdgeFieldDetails {
  node: {
    type: 'Task'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TaskEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Task> | prisma.Task
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTask

type AggregateTaskObject =
  | AggregateTaskFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTaskFields =
  | 'count'



  

export interface AggregateTaskFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CategoryConnection

type CategoryConnectionObject =
  | CategoryConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CategoryConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CategoryConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CategoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CategoryEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CategoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CategoryEdge[]> | prisma.CategoryEdge[]
  }
  aggregate: {
    type: 'AggregateCategory'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CategoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCategory> | prisma.AggregateCategory
  }
}
  

// Types for CategoryEdge

type CategoryEdgeObject =
  | CategoryEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CategoryEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CategoryEdgeFieldDetails {
  node: {
    type: 'Category'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CategoryEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category> | prisma.Category
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCategory

type AggregateCategoryObject =
  | AggregateCategoryFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCategoryFields =
  | 'count'



  

export interface AggregateCategoryFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserCategoryConnection

type UserCategoryConnectionObject =
  | UserCategoryConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserCategoryConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserCategoryConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserCategoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserCategoryEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserCategoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserCategoryEdge[]> | prisma.UserCategoryEdge[]
  }
  aggregate: {
    type: 'AggregateUserCategory'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserCategoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUserCategory> | prisma.AggregateUserCategory
  }
}
  

// Types for UserCategoryEdge

type UserCategoryEdgeObject =
  | UserCategoryEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserCategoryEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserCategoryEdgeFieldDetails {
  node: {
    type: 'UserCategory'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserCategoryEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserCategory> | prisma.UserCategory
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUserCategory

type AggregateUserCategoryObject =
  | AggregateUserCategoryFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserCategoryFields =
  | 'count'



  

export interface AggregateUserCategoryFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ConversationConnection

type ConversationConnectionObject =
  | ConversationConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ConversationConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ConversationConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ConversationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ConversationEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ConversationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ConversationEdge[]> | prisma.ConversationEdge[]
  }
  aggregate: {
    type: 'AggregateConversation'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ConversationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateConversation> | prisma.AggregateConversation
  }
}
  

// Types for ConversationEdge

type ConversationEdgeObject =
  | ConversationEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ConversationEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ConversationEdgeFieldDetails {
  node: {
    type: 'Conversation'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ConversationEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Conversation> | prisma.Conversation
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateConversation

type AggregateConversationObject =
  | AggregateConversationFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateConversationFields =
  | 'count'



  

export interface AggregateConversationFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for NotificationConnection

type NotificationConnectionObject =
  | NotificationConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type NotificationConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface NotificationConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NotificationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'NotificationEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"NotificationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NotificationEdge[]> | prisma.NotificationEdge[]
  }
  aggregate: {
    type: 'AggregateNotification'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NotificationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateNotification> | prisma.AggregateNotification
  }
}
  

// Types for NotificationEdge

type NotificationEdgeObject =
  | NotificationEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type NotificationEdgeFields =
  | 'node'
  | 'cursor'



  

export interface NotificationEdgeFieldDetails {
  node: {
    type: 'Notification'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NotificationEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Notification> | prisma.Notification
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateNotification

type AggregateNotificationObject =
  | AggregateNotificationFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateNotificationFields =
  | 'count'



  

export interface AggregateNotificationFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ReviewConnection

type ReviewConnectionObject =
  | ReviewConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ReviewConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ReviewConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ReviewConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ReviewEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ReviewConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ReviewEdge[]> | prisma.ReviewEdge[]
  }
  aggregate: {
    type: 'AggregateReview'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ReviewConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateReview> | prisma.AggregateReview
  }
}
  

// Types for ReviewEdge

type ReviewEdgeObject =
  | ReviewEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ReviewEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ReviewEdgeFieldDetails {
  node: {
    type: 'Review'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ReviewEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Review> | prisma.Review
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateReview

type AggregateReviewObject =
  | AggregateReviewFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateReviewFields =
  | 'count'



  

export interface AggregateReviewFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for School

type SchoolObject =
  | SchoolFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'domain', args?: [] | false, alias?: string  } 
  | { name: 'active', args?: [] | false, alias?: string  } 

type SchoolFields =
  | 'id'
  | 'name'
  | 'description'
  | 'domain'
  | 'active'



  

export interface SchoolFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  domain: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  active: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for SchoolConnection

type SchoolConnectionObject =
  | SchoolConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type SchoolConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface SchoolConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SchoolConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'SchoolEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"SchoolConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SchoolEdge[]> | prisma.SchoolEdge[]
  }
  aggregate: {
    type: 'AggregateSchool'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SchoolConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateSchool> | prisma.AggregateSchool
  }
}
  

// Types for SchoolEdge

type SchoolEdgeObject =
  | SchoolEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type SchoolEdgeFields =
  | 'node'
  | 'cursor'



  

export interface SchoolEdgeFieldDetails {
  node: {
    type: 'School'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SchoolEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.School> | prisma.School
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateSchool

type AggregateSchoolObject =
  | AggregateSchoolFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateSchoolFields =
  | 'count'



  

export interface AggregateSchoolFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createTask', args?: MutationCreateTaskArgs[] | false, alias?: string  } 
  | { name: 'updateTask', args?: MutationUpdateTaskArgs[] | false, alias?: string  } 
  | { name: 'updateManyTasks', args?: MutationUpdateManyTasksArgs[] | false, alias?: string  } 
  | { name: 'upsertTask', args?: MutationUpsertTaskArgs[] | false, alias?: string  } 
  | { name: 'deleteTask', args?: MutationDeleteTaskArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTasks', args?: MutationDeleteManyTasksArgs[] | false, alias?: string  } 
  | { name: 'createCategory', args?: MutationCreateCategoryArgs[] | false, alias?: string  } 
  | { name: 'updateCategory', args?: MutationUpdateCategoryArgs[] | false, alias?: string  } 
  | { name: 'updateManyCategories', args?: MutationUpdateManyCategoriesArgs[] | false, alias?: string  } 
  | { name: 'upsertCategory', args?: MutationUpsertCategoryArgs[] | false, alias?: string  } 
  | { name: 'deleteCategory', args?: MutationDeleteCategoryArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCategories', args?: MutationDeleteManyCategoriesArgs[] | false, alias?: string  } 
  | { name: 'createUserCategory', args?: MutationCreateUserCategoryArgs[] | false, alias?: string  } 
  | { name: 'updateUserCategory', args?: MutationUpdateUserCategoryArgs[] | false, alias?: string  } 
  | { name: 'updateManyUserCategories', args?: MutationUpdateManyUserCategoriesArgs[] | false, alias?: string  } 
  | { name: 'upsertUserCategory', args?: MutationUpsertUserCategoryArgs[] | false, alias?: string  } 
  | { name: 'deleteUserCategory', args?: MutationDeleteUserCategoryArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUserCategories', args?: MutationDeleteManyUserCategoriesArgs[] | false, alias?: string  } 
  | { name: 'createConversation', args?: MutationCreateConversationArgs[] | false, alias?: string  } 
  | { name: 'updateConversation', args?: MutationUpdateConversationArgs[] | false, alias?: string  } 
  | { name: 'updateManyConversations', args?: MutationUpdateManyConversationsArgs[] | false, alias?: string  } 
  | { name: 'upsertConversation', args?: MutationUpsertConversationArgs[] | false, alias?: string  } 
  | { name: 'deleteConversation', args?: MutationDeleteConversationArgs[] | false, alias?: string  } 
  | { name: 'deleteManyConversations', args?: MutationDeleteManyConversationsArgs[] | false, alias?: string  } 
  | { name: 'createNotification', args?: MutationCreateNotificationArgs[] | false, alias?: string  } 
  | { name: 'updateNotification', args?: MutationUpdateNotificationArgs[] | false, alias?: string  } 
  | { name: 'updateManyNotifications', args?: MutationUpdateManyNotificationsArgs[] | false, alias?: string  } 
  | { name: 'upsertNotification', args?: MutationUpsertNotificationArgs[] | false, alias?: string  } 
  | { name: 'deleteNotification', args?: MutationDeleteNotificationArgs[] | false, alias?: string  } 
  | { name: 'deleteManyNotifications', args?: MutationDeleteManyNotificationsArgs[] | false, alias?: string  } 
  | { name: 'createReview', args?: MutationCreateReviewArgs[] | false, alias?: string  } 
  | { name: 'updateReview', args?: MutationUpdateReviewArgs[] | false, alias?: string  } 
  | { name: 'updateManyReviews', args?: MutationUpdateManyReviewsArgs[] | false, alias?: string  } 
  | { name: 'upsertReview', args?: MutationUpsertReviewArgs[] | false, alias?: string  } 
  | { name: 'deleteReview', args?: MutationDeleteReviewArgs[] | false, alias?: string  } 
  | { name: 'deleteManyReviews', args?: MutationDeleteManyReviewsArgs[] | false, alias?: string  } 
  | { name: 'createSchool', args?: MutationCreateSchoolArgs[] | false, alias?: string  } 
  | { name: 'updateSchool', args?: MutationUpdateSchoolArgs[] | false, alias?: string  } 
  | { name: 'updateManySchools', args?: MutationUpdateManySchoolsArgs[] | false, alias?: string  } 
  | { name: 'upsertSchool', args?: MutationUpsertSchoolArgs[] | false, alias?: string  } 
  | { name: 'deleteSchool', args?: MutationDeleteSchoolArgs[] | false, alias?: string  } 
  | { name: 'deleteManySchools', args?: MutationDeleteManySchoolsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createTask'
  | 'updateTask'
  | 'updateManyTasks'
  | 'upsertTask'
  | 'deleteTask'
  | 'deleteManyTasks'
  | 'createCategory'
  | 'updateCategory'
  | 'updateManyCategories'
  | 'upsertCategory'
  | 'deleteCategory'
  | 'deleteManyCategories'
  | 'createUserCategory'
  | 'updateUserCategory'
  | 'updateManyUserCategories'
  | 'upsertUserCategory'
  | 'deleteUserCategory'
  | 'deleteManyUserCategories'
  | 'createConversation'
  | 'updateConversation'
  | 'updateManyConversations'
  | 'upsertConversation'
  | 'deleteConversation'
  | 'deleteManyConversations'
  | 'createNotification'
  | 'updateNotification'
  | 'updateManyNotifications'
  | 'upsertNotification'
  | 'deleteNotification'
  | 'deleteManyNotifications'
  | 'createReview'
  | 'updateReview'
  | 'updateManyReviews'
  | 'upsertReview'
  | 'deleteReview'
  | 'deleteManyReviews'
  | 'createSchool'
  | 'updateSchool'
  | 'updateManySchools'
  | 'upsertSchool'
  | 'deleteSchool'
  | 'deleteManySchools'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateTaskArgs =
  | 'data'
type MutationUpdateTaskArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTasksArgs =
  | 'data'
  | 'where'
type MutationUpsertTaskArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTaskArgs =
  | 'where'
type MutationDeleteManyTasksArgs =
  | 'where'
type MutationCreateCategoryArgs =
  | 'data'
type MutationUpdateCategoryArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCategoriesArgs =
  | 'data'
  | 'where'
type MutationUpsertCategoryArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCategoryArgs =
  | 'where'
type MutationDeleteManyCategoriesArgs =
  | 'where'
type MutationCreateUserCategoryArgs =
  | 'data'
type MutationUpdateUserCategoryArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUserCategoriesArgs =
  | 'data'
  | 'where'
type MutationUpsertUserCategoryArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserCategoryArgs =
  | 'where'
type MutationDeleteManyUserCategoriesArgs =
  | 'where'
type MutationCreateConversationArgs =
  | 'data'
type MutationUpdateConversationArgs =
  | 'data'
  | 'where'
type MutationUpdateManyConversationsArgs =
  | 'data'
  | 'where'
type MutationUpsertConversationArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteConversationArgs =
  | 'where'
type MutationDeleteManyConversationsArgs =
  | 'where'
type MutationCreateNotificationArgs =
  | 'data'
type MutationUpdateNotificationArgs =
  | 'data'
  | 'where'
type MutationUpdateManyNotificationsArgs =
  | 'data'
  | 'where'
type MutationUpsertNotificationArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteNotificationArgs =
  | 'where'
type MutationDeleteManyNotificationsArgs =
  | 'where'
type MutationCreateReviewArgs =
  | 'data'
type MutationUpdateReviewArgs =
  | 'data'
  | 'where'
type MutationUpdateManyReviewsArgs =
  | 'data'
  | 'where'
type MutationUpsertReviewArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteReviewArgs =
  | 'where'
type MutationDeleteManyReviewsArgs =
  | 'where'
type MutationCreateSchoolArgs =
  | 'data'
type MutationUpdateSchoolArgs =
  | 'data'
  | 'where'
type MutationUpdateManySchoolsArgs =
  | 'data'
  | 'where'
type MutationUpsertSchoolArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteSchoolArgs =
  | 'where'
type MutationDeleteManySchoolsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTask: {
    type: 'Task'
    args: Record<MutationCreateTaskArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TaskCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Task> | prisma.Task
  }
  updateTask: {
    type: 'Task'
    args: Record<MutationUpdateTaskArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TaskUpdateInput, where: TaskWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Task | null> | prisma.Task | null
  }
  updateManyTasks: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTasksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TaskUpdateManyMutationInput, where?: TaskWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTask: {
    type: 'Task'
    args: Record<MutationUpsertTaskArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TaskWhereUniqueInput, create: TaskCreateInput, update: TaskUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Task> | prisma.Task
  }
  deleteTask: {
    type: 'Task'
    args: Record<MutationDeleteTaskArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TaskWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Task | null> | prisma.Task | null
  }
  deleteManyTasks: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTasksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TaskWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCategory: {
    type: 'Category'
    args: Record<MutationCreateCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CategoryCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category> | prisma.Category
  }
  updateCategory: {
    type: 'Category'
    args: Record<MutationUpdateCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CategoryUpdateInput, where: CategoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category | null> | prisma.Category | null
  }
  updateManyCategories: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CategoryUpdateManyMutationInput, where?: CategoryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCategory: {
    type: 'Category'
    args: Record<MutationUpsertCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CategoryWhereUniqueInput, create: CategoryCreateInput, update: CategoryUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category> | prisma.Category
  }
  deleteCategory: {
    type: 'Category'
    args: Record<MutationDeleteCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CategoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category | null> | prisma.Category | null
  }
  deleteManyCategories: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CategoryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createUserCategory: {
    type: 'UserCategory'
    args: Record<MutationCreateUserCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCategoryCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserCategory> | prisma.UserCategory
  }
  updateUserCategory: {
    type: 'UserCategory'
    args: Record<MutationUpdateUserCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCategoryUpdateInput, where: UserCategoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserCategory | null> | prisma.UserCategory | null
  }
  updateManyUserCategories: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUserCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCategoryUpdateManyMutationInput, where?: UserCategoryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUserCategory: {
    type: 'UserCategory'
    args: Record<MutationUpsertUserCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserCategoryWhereUniqueInput, create: UserCategoryCreateInput, update: UserCategoryUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserCategory> | prisma.UserCategory
  }
  deleteUserCategory: {
    type: 'UserCategory'
    args: Record<MutationDeleteUserCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserCategoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserCategory | null> | prisma.UserCategory | null
  }
  deleteManyUserCategories: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUserCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserCategoryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createConversation: {
    type: 'Conversation'
    args: Record<MutationCreateConversationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ConversationCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Conversation> | prisma.Conversation
  }
  updateConversation: {
    type: 'Conversation'
    args: Record<MutationUpdateConversationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ConversationUpdateInput, where: ConversationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Conversation | null> | prisma.Conversation | null
  }
  updateManyConversations: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyConversationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ConversationUpdateManyMutationInput, where?: ConversationWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertConversation: {
    type: 'Conversation'
    args: Record<MutationUpsertConversationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ConversationWhereUniqueInput, create: ConversationCreateInput, update: ConversationUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Conversation> | prisma.Conversation
  }
  deleteConversation: {
    type: 'Conversation'
    args: Record<MutationDeleteConversationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ConversationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Conversation | null> | prisma.Conversation | null
  }
  deleteManyConversations: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyConversationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ConversationWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createNotification: {
    type: 'Notification'
    args: Record<MutationCreateNotificationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NotificationCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Notification> | prisma.Notification
  }
  updateNotification: {
    type: 'Notification'
    args: Record<MutationUpdateNotificationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NotificationUpdateInput, where: NotificationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Notification | null> | prisma.Notification | null
  }
  updateManyNotifications: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyNotificationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NotificationUpdateManyMutationInput, where?: NotificationWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertNotification: {
    type: 'Notification'
    args: Record<MutationUpsertNotificationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: NotificationWhereUniqueInput, create: NotificationCreateInput, update: NotificationUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Notification> | prisma.Notification
  }
  deleteNotification: {
    type: 'Notification'
    args: Record<MutationDeleteNotificationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: NotificationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Notification | null> | prisma.Notification | null
  }
  deleteManyNotifications: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyNotificationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: NotificationWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createReview: {
    type: 'Review'
    args: Record<MutationCreateReviewArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ReviewCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Review> | prisma.Review
  }
  updateReview: {
    type: 'Review'
    args: Record<MutationUpdateReviewArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ReviewUpdateInput, where: ReviewWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Review | null> | prisma.Review | null
  }
  updateManyReviews: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyReviewsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ReviewUpdateManyMutationInput, where?: ReviewWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertReview: {
    type: 'Review'
    args: Record<MutationUpsertReviewArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ReviewWhereUniqueInput, create: ReviewCreateInput, update: ReviewUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Review> | prisma.Review
  }
  deleteReview: {
    type: 'Review'
    args: Record<MutationDeleteReviewArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ReviewWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Review | null> | prisma.Review | null
  }
  deleteManyReviews: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyReviewsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ReviewWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createSchool: {
    type: 'School'
    args: Record<MutationCreateSchoolArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SchoolCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.School> | prisma.School
  }
  updateSchool: {
    type: 'School'
    args: Record<MutationUpdateSchoolArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SchoolUpdateInput, where: SchoolWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.School | null> | prisma.School | null
  }
  updateManySchools: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManySchoolsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SchoolUpdateManyMutationInput, where?: SchoolWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertSchool: {
    type: 'School'
    args: Record<MutationUpsertSchoolArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SchoolWhereUniqueInput, create: SchoolCreateInput, update: SchoolUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.School> | prisma.School
  }
  deleteSchool: {
    type: 'School'
    args: Record<MutationDeleteSchoolArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SchoolWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.School | null> | prisma.School | null
  }
  deleteManySchools: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManySchoolsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: SchoolWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'task', args?: SubscriptionTaskArgs[] | false, alias?: string  } 
  | { name: 'category', args?: SubscriptionCategoryArgs[] | false, alias?: string  } 
  | { name: 'userCategory', args?: SubscriptionUserCategoryArgs[] | false, alias?: string  } 
  | { name: 'conversation', args?: SubscriptionConversationArgs[] | false, alias?: string  } 
  | { name: 'notification', args?: SubscriptionNotificationArgs[] | false, alias?: string  } 
  | { name: 'review', args?: SubscriptionReviewArgs[] | false, alias?: string  } 
  | { name: 'school', args?: SubscriptionSchoolArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'task'
  | 'category'
  | 'userCategory'
  | 'conversation'
  | 'notification'
  | 'review'
  | 'school'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionTaskArgs =
  | 'where'
type SubscriptionCategoryArgs =
  | 'where'
type SubscriptionUserCategoryArgs =
  | 'where'
type SubscriptionConversationArgs =
  | 'where'
type SubscriptionNotificationArgs =
  | 'where'
type SubscriptionReviewArgs =
  | 'where'
type SubscriptionSchoolArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  task: {
    type: 'TaskSubscriptionPayload'
    args: Record<SubscriptionTaskArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TaskSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TaskSubscriptionPayload | null> | prisma.TaskSubscriptionPayload | null
  }
  category: {
    type: 'CategorySubscriptionPayload'
    args: Record<SubscriptionCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CategorySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CategorySubscriptionPayload | null> | prisma.CategorySubscriptionPayload | null
  }
  userCategory: {
    type: 'UserCategorySubscriptionPayload'
    args: Record<SubscriptionUserCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserCategorySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserCategorySubscriptionPayload | null> | prisma.UserCategorySubscriptionPayload | null
  }
  conversation: {
    type: 'ConversationSubscriptionPayload'
    args: Record<SubscriptionConversationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ConversationSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ConversationSubscriptionPayload | null> | prisma.ConversationSubscriptionPayload | null
  }
  notification: {
    type: 'NotificationSubscriptionPayload'
    args: Record<SubscriptionNotificationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: NotificationSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NotificationSubscriptionPayload | null> | prisma.NotificationSubscriptionPayload | null
  }
  review: {
    type: 'ReviewSubscriptionPayload'
    args: Record<SubscriptionReviewArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ReviewSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ReviewSubscriptionPayload | null> | prisma.ReviewSubscriptionPayload | null
  }
  school: {
    type: 'SchoolSubscriptionPayload'
    args: Record<SubscriptionSchoolArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: SchoolSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SchoolSubscriptionPayload | null> | prisma.SchoolSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'token', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'username', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'major', args?: [] | false, alias?: string  } 
  | { name: 'townYouGrewUpIn', args?: [] | false, alias?: string  } 
  | { name: 'favoriteHobby', args?: [] | false, alias?: string  } 
  | { name: 'photo_url', args?: [] | false, alias?: string  } 
  | { name: 'cover_photo_url', args?: [] | false, alias?: string  } 
  | { name: 'flagged_as_objectionable', args?: [] | false, alias?: string  } 
  | { name: 'view_objectionable_content', args?: [] | false, alias?: string  } 
  | { name: 'school', args?: [] | false, alias?: string  } 
  | { name: 'about_me', args?: [] | false, alias?: string  } 
  | { name: 'receive_push_notifications', args?: [] | false, alias?: string  } 
  | { name: 'oneSignalPlayerId', args?: [] | false, alias?: string  } 
  | { name: 'fcm_token', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'facebook_social_link', args?: [] | false, alias?: string  } 
  | { name: 'twitter_social_link', args?: [] | false, alias?: string  } 
  | { name: 'instagram_social_link', args?: [] | false, alias?: string  } 
  | { name: 'snapchat_social_link', args?: [] | false, alias?: string  } 
  | { name: 'role', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'email'
  | 'token'
  | 'name'
  | 'username'
  | 'description'
  | 'major'
  | 'townYouGrewUpIn'
  | 'favoriteHobby'
  | 'photo_url'
  | 'cover_photo_url'
  | 'flagged_as_objectionable'
  | 'view_objectionable_content'
  | 'school'
  | 'about_me'
  | 'receive_push_notifications'
  | 'oneSignalPlayerId'
  | 'fcm_token'
  | 'createdAt'
  | 'updatedAt'
  | 'facebook_social_link'
  | 'twitter_social_link'
  | 'instagram_social_link'
  | 'snapchat_social_link'
  | 'role'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  token: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  username: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  major: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  townYouGrewUpIn: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  favoriteHobby: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  photo_url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  cover_photo_url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  flagged_as_objectionable: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  view_objectionable_content: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  school: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  about_me: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  receive_push_notifications: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  oneSignalPlayerId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  fcm_token: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  facebook_social_link: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  twitter_social_link: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  instagram_social_link: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  snapchat_social_link: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  role: {
    type: 'ROLE'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ROLE | null> | prisma.ROLE | null
  }
}
  

// Types for TaskSubscriptionPayload

type TaskSubscriptionPayloadObject =
  | TaskSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TaskSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TaskSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TaskSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Task'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TaskSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Task | null> | prisma.Task | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TaskPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TaskSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TaskPreviousValues | null> | prisma.TaskPreviousValues | null
  }
}
  

// Types for TaskPreviousValues

type TaskPreviousValuesObject =
  | TaskPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'location', args?: [] | false, alias?: string  } 
  | { name: 'eventTime', args?: [] | false, alias?: string  } 
  | { name: 'featured', args?: [] | false, alias?: string  } 
  | { name: 'flagged_as_objectionable', args?: [] | false, alias?: string  } 
  | { name: 'created_by_joinmi', args?: [] | false, alias?: string  } 
  | { name: 'task_type', args?: [] | false, alias?: string  } 
  | { name: 'active', args?: [] | false, alias?: string  } 
  | { name: 'expiration', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type TaskPreviousValuesFields =
  | 'id'
  | 'title'
  | 'description'
  | 'location'
  | 'eventTime'
  | 'featured'
  | 'flagged_as_objectionable'
  | 'created_by_joinmi'
  | 'task_type'
  | 'active'
  | 'expiration'
  | 'createdAt'
  | 'updatedAt'



  

export interface TaskPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  location: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  eventTime: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  featured: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  flagged_as_objectionable: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  created_by_joinmi: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  task_type: {
    type: 'TASK_TYPE'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TaskPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TASK_TYPE | null> | prisma.TASK_TYPE | null
  }
  active: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  expiration: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CategorySubscriptionPayload

type CategorySubscriptionPayloadObject =
  | CategorySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CategorySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CategorySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CategorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Category'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CategorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category | null> | prisma.Category | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CategoryPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CategorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CategoryPreviousValues | null> | prisma.CategoryPreviousValues | null
  }
}
  

// Types for CategoryPreviousValues

type CategoryPreviousValuesObject =
  | CategoryPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'image_url', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CategoryPreviousValuesFields =
  | 'id'
  | 'title'
  | 'image_url'
  | 'createdAt'
  | 'updatedAt'



  

export interface CategoryPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  image_url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserCategorySubscriptionPayload

type UserCategorySubscriptionPayloadObject =
  | UserCategorySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserCategorySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserCategorySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserCategorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'UserCategory'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserCategorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserCategory | null> | prisma.UserCategory | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserCategoryPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserCategorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserCategoryPreviousValues | null> | prisma.UserCategoryPreviousValues | null
  }
}
  

// Types for UserCategoryPreviousValues

type UserCategoryPreviousValuesObject =
  | UserCategoryPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'selected', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type UserCategoryPreviousValuesFields =
  | 'id'
  | 'selected'
  | 'createdAt'
  | 'updatedAt'



  

export interface UserCategoryPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  selected: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ConversationSubscriptionPayload

type ConversationSubscriptionPayloadObject =
  | ConversationSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ConversationSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ConversationSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ConversationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Conversation'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ConversationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Conversation | null> | prisma.Conversation | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ConversationPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ConversationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ConversationPreviousValues | null> | prisma.ConversationPreviousValues | null
  }
}
  

// Types for ConversationPreviousValues

type ConversationPreviousValuesObject =
  | ConversationPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'active', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ConversationPreviousValuesFields =
  | 'id'
  | 'description'
  | 'active'
  | 'createdAt'
  | 'updatedAt'



  

export interface ConversationPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  active: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for NotificationSubscriptionPayload

type NotificationSubscriptionPayloadObject =
  | NotificationSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type NotificationSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface NotificationSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NotificationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Notification'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"NotificationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Notification | null> | prisma.Notification | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'NotificationPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"NotificationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NotificationPreviousValues | null> | prisma.NotificationPreviousValues | null
  }
}
  

// Types for NotificationPreviousValues

type NotificationPreviousValuesObject =
  | NotificationPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'image_url', args?: [] | false, alias?: string  } 
  | { name: 'data', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'expiration', args?: [] | false, alias?: string  } 
  | { name: 'read', args?: [] | false, alias?: string  } 

type NotificationPreviousValuesFields =
  | 'id'
  | 'title'
  | 'description'
  | 'image_url'
  | 'data'
  | 'createdAt'
  | 'updatedAt'
  | 'expiration'
  | 'read'



  

export interface NotificationPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  image_url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  data: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  expiration: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  read: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ReviewSubscriptionPayload

type ReviewSubscriptionPayloadObject =
  | ReviewSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ReviewSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ReviewSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ReviewSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Review'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ReviewSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Review | null> | prisma.Review | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ReviewPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ReviewSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ReviewPreviousValues | null> | prisma.ReviewPreviousValues | null
  }
}
  

// Types for ReviewPreviousValues

type ReviewPreviousValuesObject =
  | ReviewPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'rating', args?: [] | false, alias?: string  } 

type ReviewPreviousValuesFields =
  | 'id'
  | 'title'
  | 'description'
  | 'createdAt'
  | 'updatedAt'
  | 'rating'



  

export interface ReviewPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  rating: {
    type: 'RATING'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ReviewPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RATING | null> | prisma.RATING | null
  }
}
  

// Types for SchoolSubscriptionPayload

type SchoolSubscriptionPayloadObject =
  | SchoolSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type SchoolSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface SchoolSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SchoolSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'School'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SchoolSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.School | null> | prisma.School | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'SchoolPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SchoolSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SchoolPreviousValues | null> | prisma.SchoolPreviousValues | null
  }
}
  

// Types for SchoolPreviousValues

type SchoolPreviousValuesObject =
  | SchoolPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'domain', args?: [] | false, alias?: string  } 
  | { name: 'active', args?: [] | false, alias?: string  } 

type SchoolPreviousValuesFields =
  | 'id'
  | 'name'
  | 'description'
  | 'domain'
  | 'active'



  

export interface SchoolPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  domain: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  active: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface NotificationWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  image_url?: string | null
  image_url_not?: string | null
  image_url_in?: string[]
  image_url_not_in?: string[]
  image_url_lt?: string | null
  image_url_lte?: string | null
  image_url_gt?: string | null
  image_url_gte?: string | null
  image_url_contains?: string | null
  image_url_not_contains?: string | null
  image_url_starts_with?: string | null
  image_url_not_starts_with?: string | null
  image_url_ends_with?: string | null
  image_url_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  expiration?: string | null
  expiration_not?: string | null
  expiration_in?: string[]
  expiration_not_in?: string[]
  expiration_lt?: string | null
  expiration_lte?: string | null
  expiration_gt?: string | null
  expiration_gte?: string | null
  read?: boolean | null
  read_not?: boolean | null
  user?: UserWhereInput | null
  AND?: NotificationWhereInput[]
  OR?: NotificationWhereInput[]
  NOT?: NotificationWhereInput[]
}
export type NotificationWhereInputInputObject =
  | Extract<keyof NotificationWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'image_url', alias?: string  } 
  | { name: 'image_url_not', alias?: string  } 
  | { name: 'image_url_in', alias?: string  } 
  | { name: 'image_url_not_in', alias?: string  } 
  | { name: 'image_url_lt', alias?: string  } 
  | { name: 'image_url_lte', alias?: string  } 
  | { name: 'image_url_gt', alias?: string  } 
  | { name: 'image_url_gte', alias?: string  } 
  | { name: 'image_url_contains', alias?: string  } 
  | { name: 'image_url_not_contains', alias?: string  } 
  | { name: 'image_url_starts_with', alias?: string  } 
  | { name: 'image_url_not_starts_with', alias?: string  } 
  | { name: 'image_url_ends_with', alias?: string  } 
  | { name: 'image_url_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'expiration_not', alias?: string  } 
  | { name: 'expiration_in', alias?: string  } 
  | { name: 'expiration_not_in', alias?: string  } 
  | { name: 'expiration_lt', alias?: string  } 
  | { name: 'expiration_lte', alias?: string  } 
  | { name: 'expiration_gt', alias?: string  } 
  | { name: 'expiration_gte', alias?: string  } 
  | { name: 'read', alias?: string  } 
  | { name: 'read_not', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  token?: string | null
  token_not?: string | null
  token_in?: string[]
  token_not_in?: string[]
  token_lt?: string | null
  token_lte?: string | null
  token_gt?: string | null
  token_gte?: string | null
  token_contains?: string | null
  token_not_contains?: string | null
  token_starts_with?: string | null
  token_not_starts_with?: string | null
  token_ends_with?: string | null
  token_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  username?: string | null
  username_not?: string | null
  username_in?: string[]
  username_not_in?: string[]
  username_lt?: string | null
  username_lte?: string | null
  username_gt?: string | null
  username_gte?: string | null
  username_contains?: string | null
  username_not_contains?: string | null
  username_starts_with?: string | null
  username_not_starts_with?: string | null
  username_ends_with?: string | null
  username_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  major?: string | null
  major_not?: string | null
  major_in?: string[]
  major_not_in?: string[]
  major_lt?: string | null
  major_lte?: string | null
  major_gt?: string | null
  major_gte?: string | null
  major_contains?: string | null
  major_not_contains?: string | null
  major_starts_with?: string | null
  major_not_starts_with?: string | null
  major_ends_with?: string | null
  major_not_ends_with?: string | null
  townYouGrewUpIn?: string | null
  townYouGrewUpIn_not?: string | null
  townYouGrewUpIn_in?: string[]
  townYouGrewUpIn_not_in?: string[]
  townYouGrewUpIn_lt?: string | null
  townYouGrewUpIn_lte?: string | null
  townYouGrewUpIn_gt?: string | null
  townYouGrewUpIn_gte?: string | null
  townYouGrewUpIn_contains?: string | null
  townYouGrewUpIn_not_contains?: string | null
  townYouGrewUpIn_starts_with?: string | null
  townYouGrewUpIn_not_starts_with?: string | null
  townYouGrewUpIn_ends_with?: string | null
  townYouGrewUpIn_not_ends_with?: string | null
  favoriteHobby?: string | null
  favoriteHobby_not?: string | null
  favoriteHobby_in?: string[]
  favoriteHobby_not_in?: string[]
  favoriteHobby_lt?: string | null
  favoriteHobby_lte?: string | null
  favoriteHobby_gt?: string | null
  favoriteHobby_gte?: string | null
  favoriteHobby_contains?: string | null
  favoriteHobby_not_contains?: string | null
  favoriteHobby_starts_with?: string | null
  favoriteHobby_not_starts_with?: string | null
  favoriteHobby_ends_with?: string | null
  favoriteHobby_not_ends_with?: string | null
  photo_url?: string | null
  photo_url_not?: string | null
  photo_url_in?: string[]
  photo_url_not_in?: string[]
  photo_url_lt?: string | null
  photo_url_lte?: string | null
  photo_url_gt?: string | null
  photo_url_gte?: string | null
  photo_url_contains?: string | null
  photo_url_not_contains?: string | null
  photo_url_starts_with?: string | null
  photo_url_not_starts_with?: string | null
  photo_url_ends_with?: string | null
  photo_url_not_ends_with?: string | null
  cover_photo_url?: string | null
  cover_photo_url_not?: string | null
  cover_photo_url_in?: string[]
  cover_photo_url_not_in?: string[]
  cover_photo_url_lt?: string | null
  cover_photo_url_lte?: string | null
  cover_photo_url_gt?: string | null
  cover_photo_url_gte?: string | null
  cover_photo_url_contains?: string | null
  cover_photo_url_not_contains?: string | null
  cover_photo_url_starts_with?: string | null
  cover_photo_url_not_starts_with?: string | null
  cover_photo_url_ends_with?: string | null
  cover_photo_url_not_ends_with?: string | null
  flagged_as_objectionable?: boolean | null
  flagged_as_objectionable_not?: boolean | null
  view_objectionable_content?: boolean | null
  view_objectionable_content_not?: boolean | null
  school?: string | null
  school_not?: string | null
  school_in?: string[]
  school_not_in?: string[]
  school_lt?: string | null
  school_lte?: string | null
  school_gt?: string | null
  school_gte?: string | null
  school_contains?: string | null
  school_not_contains?: string | null
  school_starts_with?: string | null
  school_not_starts_with?: string | null
  school_ends_with?: string | null
  school_not_ends_with?: string | null
  about_me?: string | null
  about_me_not?: string | null
  about_me_in?: string[]
  about_me_not_in?: string[]
  about_me_lt?: string | null
  about_me_lte?: string | null
  about_me_gt?: string | null
  about_me_gte?: string | null
  about_me_contains?: string | null
  about_me_not_contains?: string | null
  about_me_starts_with?: string | null
  about_me_not_starts_with?: string | null
  about_me_ends_with?: string | null
  about_me_not_ends_with?: string | null
  receive_push_notifications?: boolean | null
  receive_push_notifications_not?: boolean | null
  oneSignalPlayerId?: string | null
  oneSignalPlayerId_not?: string | null
  oneSignalPlayerId_in?: string[]
  oneSignalPlayerId_not_in?: string[]
  oneSignalPlayerId_lt?: string | null
  oneSignalPlayerId_lte?: string | null
  oneSignalPlayerId_gt?: string | null
  oneSignalPlayerId_gte?: string | null
  oneSignalPlayerId_contains?: string | null
  oneSignalPlayerId_not_contains?: string | null
  oneSignalPlayerId_starts_with?: string | null
  oneSignalPlayerId_not_starts_with?: string | null
  oneSignalPlayerId_ends_with?: string | null
  oneSignalPlayerId_not_ends_with?: string | null
  fcm_token?: string | null
  fcm_token_not?: string | null
  fcm_token_in?: string[]
  fcm_token_not_in?: string[]
  fcm_token_lt?: string | null
  fcm_token_lte?: string | null
  fcm_token_gt?: string | null
  fcm_token_gte?: string | null
  fcm_token_contains?: string | null
  fcm_token_not_contains?: string | null
  fcm_token_starts_with?: string | null
  fcm_token_not_starts_with?: string | null
  fcm_token_ends_with?: string | null
  fcm_token_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  facebook_social_link?: string | null
  facebook_social_link_not?: string | null
  facebook_social_link_in?: string[]
  facebook_social_link_not_in?: string[]
  facebook_social_link_lt?: string | null
  facebook_social_link_lte?: string | null
  facebook_social_link_gt?: string | null
  facebook_social_link_gte?: string | null
  facebook_social_link_contains?: string | null
  facebook_social_link_not_contains?: string | null
  facebook_social_link_starts_with?: string | null
  facebook_social_link_not_starts_with?: string | null
  facebook_social_link_ends_with?: string | null
  facebook_social_link_not_ends_with?: string | null
  twitter_social_link?: string | null
  twitter_social_link_not?: string | null
  twitter_social_link_in?: string[]
  twitter_social_link_not_in?: string[]
  twitter_social_link_lt?: string | null
  twitter_social_link_lte?: string | null
  twitter_social_link_gt?: string | null
  twitter_social_link_gte?: string | null
  twitter_social_link_contains?: string | null
  twitter_social_link_not_contains?: string | null
  twitter_social_link_starts_with?: string | null
  twitter_social_link_not_starts_with?: string | null
  twitter_social_link_ends_with?: string | null
  twitter_social_link_not_ends_with?: string | null
  instagram_social_link?: string | null
  instagram_social_link_not?: string | null
  instagram_social_link_in?: string[]
  instagram_social_link_not_in?: string[]
  instagram_social_link_lt?: string | null
  instagram_social_link_lte?: string | null
  instagram_social_link_gt?: string | null
  instagram_social_link_gte?: string | null
  instagram_social_link_contains?: string | null
  instagram_social_link_not_contains?: string | null
  instagram_social_link_starts_with?: string | null
  instagram_social_link_not_starts_with?: string | null
  instagram_social_link_ends_with?: string | null
  instagram_social_link_not_ends_with?: string | null
  snapchat_social_link?: string | null
  snapchat_social_link_not?: string | null
  snapchat_social_link_in?: string[]
  snapchat_social_link_not_in?: string[]
  snapchat_social_link_lt?: string | null
  snapchat_social_link_lte?: string | null
  snapchat_social_link_gt?: string | null
  snapchat_social_link_gte?: string | null
  snapchat_social_link_contains?: string | null
  snapchat_social_link_not_contains?: string | null
  snapchat_social_link_starts_with?: string | null
  snapchat_social_link_not_starts_with?: string | null
  snapchat_social_link_ends_with?: string | null
  snapchat_social_link_not_ends_with?: string | null
  role?: prisma.ROLE | null
  role_not?: prisma.ROLE | null
  role_in?: prisma.ROLE[]
  role_not_in?: prisma.ROLE[]
  notifications_every?: NotificationWhereInput | null
  notifications_some?: NotificationWhereInput | null
  notifications_none?: NotificationWhereInput | null
  block_list_every?: UserWhereInput | null
  block_list_some?: UserWhereInput | null
  block_list_none?: UserWhereInput | null
  tasks_every?: TaskWhereInput | null
  tasks_some?: TaskWhereInput | null
  tasks_none?: TaskWhereInput | null
  reviews_every?: ReviewWhereInput | null
  reviews_some?: ReviewWhereInput | null
  reviews_none?: ReviewWhereInput | null
  categories_every?: UserCategoryWhereInput | null
  categories_some?: UserCategoryWhereInput | null
  categories_none?: UserCategoryWhereInput | null
  conversations_every?: ConversationWhereInput | null
  conversations_some?: ConversationWhereInput | null
  conversations_none?: ConversationWhereInput | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'token', alias?: string  } 
  | { name: 'token_not', alias?: string  } 
  | { name: 'token_in', alias?: string  } 
  | { name: 'token_not_in', alias?: string  } 
  | { name: 'token_lt', alias?: string  } 
  | { name: 'token_lte', alias?: string  } 
  | { name: 'token_gt', alias?: string  } 
  | { name: 'token_gte', alias?: string  } 
  | { name: 'token_contains', alias?: string  } 
  | { name: 'token_not_contains', alias?: string  } 
  | { name: 'token_starts_with', alias?: string  } 
  | { name: 'token_not_starts_with', alias?: string  } 
  | { name: 'token_ends_with', alias?: string  } 
  | { name: 'token_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'username_not', alias?: string  } 
  | { name: 'username_in', alias?: string  } 
  | { name: 'username_not_in', alias?: string  } 
  | { name: 'username_lt', alias?: string  } 
  | { name: 'username_lte', alias?: string  } 
  | { name: 'username_gt', alias?: string  } 
  | { name: 'username_gte', alias?: string  } 
  | { name: 'username_contains', alias?: string  } 
  | { name: 'username_not_contains', alias?: string  } 
  | { name: 'username_starts_with', alias?: string  } 
  | { name: 'username_not_starts_with', alias?: string  } 
  | { name: 'username_ends_with', alias?: string  } 
  | { name: 'username_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'major', alias?: string  } 
  | { name: 'major_not', alias?: string  } 
  | { name: 'major_in', alias?: string  } 
  | { name: 'major_not_in', alias?: string  } 
  | { name: 'major_lt', alias?: string  } 
  | { name: 'major_lte', alias?: string  } 
  | { name: 'major_gt', alias?: string  } 
  | { name: 'major_gte', alias?: string  } 
  | { name: 'major_contains', alias?: string  } 
  | { name: 'major_not_contains', alias?: string  } 
  | { name: 'major_starts_with', alias?: string  } 
  | { name: 'major_not_starts_with', alias?: string  } 
  | { name: 'major_ends_with', alias?: string  } 
  | { name: 'major_not_ends_with', alias?: string  } 
  | { name: 'townYouGrewUpIn', alias?: string  } 
  | { name: 'townYouGrewUpIn_not', alias?: string  } 
  | { name: 'townYouGrewUpIn_in', alias?: string  } 
  | { name: 'townYouGrewUpIn_not_in', alias?: string  } 
  | { name: 'townYouGrewUpIn_lt', alias?: string  } 
  | { name: 'townYouGrewUpIn_lte', alias?: string  } 
  | { name: 'townYouGrewUpIn_gt', alias?: string  } 
  | { name: 'townYouGrewUpIn_gte', alias?: string  } 
  | { name: 'townYouGrewUpIn_contains', alias?: string  } 
  | { name: 'townYouGrewUpIn_not_contains', alias?: string  } 
  | { name: 'townYouGrewUpIn_starts_with', alias?: string  } 
  | { name: 'townYouGrewUpIn_not_starts_with', alias?: string  } 
  | { name: 'townYouGrewUpIn_ends_with', alias?: string  } 
  | { name: 'townYouGrewUpIn_not_ends_with', alias?: string  } 
  | { name: 'favoriteHobby', alias?: string  } 
  | { name: 'favoriteHobby_not', alias?: string  } 
  | { name: 'favoriteHobby_in', alias?: string  } 
  | { name: 'favoriteHobby_not_in', alias?: string  } 
  | { name: 'favoriteHobby_lt', alias?: string  } 
  | { name: 'favoriteHobby_lte', alias?: string  } 
  | { name: 'favoriteHobby_gt', alias?: string  } 
  | { name: 'favoriteHobby_gte', alias?: string  } 
  | { name: 'favoriteHobby_contains', alias?: string  } 
  | { name: 'favoriteHobby_not_contains', alias?: string  } 
  | { name: 'favoriteHobby_starts_with', alias?: string  } 
  | { name: 'favoriteHobby_not_starts_with', alias?: string  } 
  | { name: 'favoriteHobby_ends_with', alias?: string  } 
  | { name: 'favoriteHobby_not_ends_with', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'photo_url_not', alias?: string  } 
  | { name: 'photo_url_in', alias?: string  } 
  | { name: 'photo_url_not_in', alias?: string  } 
  | { name: 'photo_url_lt', alias?: string  } 
  | { name: 'photo_url_lte', alias?: string  } 
  | { name: 'photo_url_gt', alias?: string  } 
  | { name: 'photo_url_gte', alias?: string  } 
  | { name: 'photo_url_contains', alias?: string  } 
  | { name: 'photo_url_not_contains', alias?: string  } 
  | { name: 'photo_url_starts_with', alias?: string  } 
  | { name: 'photo_url_not_starts_with', alias?: string  } 
  | { name: 'photo_url_ends_with', alias?: string  } 
  | { name: 'photo_url_not_ends_with', alias?: string  } 
  | { name: 'cover_photo_url', alias?: string  } 
  | { name: 'cover_photo_url_not', alias?: string  } 
  | { name: 'cover_photo_url_in', alias?: string  } 
  | { name: 'cover_photo_url_not_in', alias?: string  } 
  | { name: 'cover_photo_url_lt', alias?: string  } 
  | { name: 'cover_photo_url_lte', alias?: string  } 
  | { name: 'cover_photo_url_gt', alias?: string  } 
  | { name: 'cover_photo_url_gte', alias?: string  } 
  | { name: 'cover_photo_url_contains', alias?: string  } 
  | { name: 'cover_photo_url_not_contains', alias?: string  } 
  | { name: 'cover_photo_url_starts_with', alias?: string  } 
  | { name: 'cover_photo_url_not_starts_with', alias?: string  } 
  | { name: 'cover_photo_url_ends_with', alias?: string  } 
  | { name: 'cover_photo_url_not_ends_with', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'flagged_as_objectionable_not', alias?: string  } 
  | { name: 'view_objectionable_content', alias?: string  } 
  | { name: 'view_objectionable_content_not', alias?: string  } 
  | { name: 'school', alias?: string  } 
  | { name: 'school_not', alias?: string  } 
  | { name: 'school_in', alias?: string  } 
  | { name: 'school_not_in', alias?: string  } 
  | { name: 'school_lt', alias?: string  } 
  | { name: 'school_lte', alias?: string  } 
  | { name: 'school_gt', alias?: string  } 
  | { name: 'school_gte', alias?: string  } 
  | { name: 'school_contains', alias?: string  } 
  | { name: 'school_not_contains', alias?: string  } 
  | { name: 'school_starts_with', alias?: string  } 
  | { name: 'school_not_starts_with', alias?: string  } 
  | { name: 'school_ends_with', alias?: string  } 
  | { name: 'school_not_ends_with', alias?: string  } 
  | { name: 'about_me', alias?: string  } 
  | { name: 'about_me_not', alias?: string  } 
  | { name: 'about_me_in', alias?: string  } 
  | { name: 'about_me_not_in', alias?: string  } 
  | { name: 'about_me_lt', alias?: string  } 
  | { name: 'about_me_lte', alias?: string  } 
  | { name: 'about_me_gt', alias?: string  } 
  | { name: 'about_me_gte', alias?: string  } 
  | { name: 'about_me_contains', alias?: string  } 
  | { name: 'about_me_not_contains', alias?: string  } 
  | { name: 'about_me_starts_with', alias?: string  } 
  | { name: 'about_me_not_starts_with', alias?: string  } 
  | { name: 'about_me_ends_with', alias?: string  } 
  | { name: 'about_me_not_ends_with', alias?: string  } 
  | { name: 'receive_push_notifications', alias?: string  } 
  | { name: 'receive_push_notifications_not', alias?: string  } 
  | { name: 'oneSignalPlayerId', alias?: string  } 
  | { name: 'oneSignalPlayerId_not', alias?: string  } 
  | { name: 'oneSignalPlayerId_in', alias?: string  } 
  | { name: 'oneSignalPlayerId_not_in', alias?: string  } 
  | { name: 'oneSignalPlayerId_lt', alias?: string  } 
  | { name: 'oneSignalPlayerId_lte', alias?: string  } 
  | { name: 'oneSignalPlayerId_gt', alias?: string  } 
  | { name: 'oneSignalPlayerId_gte', alias?: string  } 
  | { name: 'oneSignalPlayerId_contains', alias?: string  } 
  | { name: 'oneSignalPlayerId_not_contains', alias?: string  } 
  | { name: 'oneSignalPlayerId_starts_with', alias?: string  } 
  | { name: 'oneSignalPlayerId_not_starts_with', alias?: string  } 
  | { name: 'oneSignalPlayerId_ends_with', alias?: string  } 
  | { name: 'oneSignalPlayerId_not_ends_with', alias?: string  } 
  | { name: 'fcm_token', alias?: string  } 
  | { name: 'fcm_token_not', alias?: string  } 
  | { name: 'fcm_token_in', alias?: string  } 
  | { name: 'fcm_token_not_in', alias?: string  } 
  | { name: 'fcm_token_lt', alias?: string  } 
  | { name: 'fcm_token_lte', alias?: string  } 
  | { name: 'fcm_token_gt', alias?: string  } 
  | { name: 'fcm_token_gte', alias?: string  } 
  | { name: 'fcm_token_contains', alias?: string  } 
  | { name: 'fcm_token_not_contains', alias?: string  } 
  | { name: 'fcm_token_starts_with', alias?: string  } 
  | { name: 'fcm_token_not_starts_with', alias?: string  } 
  | { name: 'fcm_token_ends_with', alias?: string  } 
  | { name: 'fcm_token_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'facebook_social_link', alias?: string  } 
  | { name: 'facebook_social_link_not', alias?: string  } 
  | { name: 'facebook_social_link_in', alias?: string  } 
  | { name: 'facebook_social_link_not_in', alias?: string  } 
  | { name: 'facebook_social_link_lt', alias?: string  } 
  | { name: 'facebook_social_link_lte', alias?: string  } 
  | { name: 'facebook_social_link_gt', alias?: string  } 
  | { name: 'facebook_social_link_gte', alias?: string  } 
  | { name: 'facebook_social_link_contains', alias?: string  } 
  | { name: 'facebook_social_link_not_contains', alias?: string  } 
  | { name: 'facebook_social_link_starts_with', alias?: string  } 
  | { name: 'facebook_social_link_not_starts_with', alias?: string  } 
  | { name: 'facebook_social_link_ends_with', alias?: string  } 
  | { name: 'facebook_social_link_not_ends_with', alias?: string  } 
  | { name: 'twitter_social_link', alias?: string  } 
  | { name: 'twitter_social_link_not', alias?: string  } 
  | { name: 'twitter_social_link_in', alias?: string  } 
  | { name: 'twitter_social_link_not_in', alias?: string  } 
  | { name: 'twitter_social_link_lt', alias?: string  } 
  | { name: 'twitter_social_link_lte', alias?: string  } 
  | { name: 'twitter_social_link_gt', alias?: string  } 
  | { name: 'twitter_social_link_gte', alias?: string  } 
  | { name: 'twitter_social_link_contains', alias?: string  } 
  | { name: 'twitter_social_link_not_contains', alias?: string  } 
  | { name: 'twitter_social_link_starts_with', alias?: string  } 
  | { name: 'twitter_social_link_not_starts_with', alias?: string  } 
  | { name: 'twitter_social_link_ends_with', alias?: string  } 
  | { name: 'twitter_social_link_not_ends_with', alias?: string  } 
  | { name: 'instagram_social_link', alias?: string  } 
  | { name: 'instagram_social_link_not', alias?: string  } 
  | { name: 'instagram_social_link_in', alias?: string  } 
  | { name: 'instagram_social_link_not_in', alias?: string  } 
  | { name: 'instagram_social_link_lt', alias?: string  } 
  | { name: 'instagram_social_link_lte', alias?: string  } 
  | { name: 'instagram_social_link_gt', alias?: string  } 
  | { name: 'instagram_social_link_gte', alias?: string  } 
  | { name: 'instagram_social_link_contains', alias?: string  } 
  | { name: 'instagram_social_link_not_contains', alias?: string  } 
  | { name: 'instagram_social_link_starts_with', alias?: string  } 
  | { name: 'instagram_social_link_not_starts_with', alias?: string  } 
  | { name: 'instagram_social_link_ends_with', alias?: string  } 
  | { name: 'instagram_social_link_not_ends_with', alias?: string  } 
  | { name: 'snapchat_social_link', alias?: string  } 
  | { name: 'snapchat_social_link_not', alias?: string  } 
  | { name: 'snapchat_social_link_in', alias?: string  } 
  | { name: 'snapchat_social_link_not_in', alias?: string  } 
  | { name: 'snapchat_social_link_lt', alias?: string  } 
  | { name: 'snapchat_social_link_lte', alias?: string  } 
  | { name: 'snapchat_social_link_gt', alias?: string  } 
  | { name: 'snapchat_social_link_gte', alias?: string  } 
  | { name: 'snapchat_social_link_contains', alias?: string  } 
  | { name: 'snapchat_social_link_not_contains', alias?: string  } 
  | { name: 'snapchat_social_link_starts_with', alias?: string  } 
  | { name: 'snapchat_social_link_not_starts_with', alias?: string  } 
  | { name: 'snapchat_social_link_ends_with', alias?: string  } 
  | { name: 'snapchat_social_link_not_ends_with', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'role_not', alias?: string  } 
  | { name: 'role_in', alias?: string  } 
  | { name: 'role_not_in', alias?: string  } 
  | { name: 'notifications_every', alias?: string  } 
  | { name: 'notifications_some', alias?: string  } 
  | { name: 'notifications_none', alias?: string  } 
  | { name: 'block_list_every', alias?: string  } 
  | { name: 'block_list_some', alias?: string  } 
  | { name: 'block_list_none', alias?: string  } 
  | { name: 'tasks_every', alias?: string  } 
  | { name: 'tasks_some', alias?: string  } 
  | { name: 'tasks_none', alias?: string  } 
  | { name: 'reviews_every', alias?: string  } 
  | { name: 'reviews_some', alias?: string  } 
  | { name: 'reviews_none', alias?: string  } 
  | { name: 'categories_every', alias?: string  } 
  | { name: 'categories_some', alias?: string  } 
  | { name: 'categories_none', alias?: string  } 
  | { name: 'conversations_every', alias?: string  } 
  | { name: 'conversations_some', alias?: string  } 
  | { name: 'conversations_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TaskWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  location?: string | null
  location_not?: string | null
  location_in?: string[]
  location_not_in?: string[]
  location_lt?: string | null
  location_lte?: string | null
  location_gt?: string | null
  location_gte?: string | null
  location_contains?: string | null
  location_not_contains?: string | null
  location_starts_with?: string | null
  location_not_starts_with?: string | null
  location_ends_with?: string | null
  location_not_ends_with?: string | null
  eventTime?: string | null
  eventTime_not?: string | null
  eventTime_in?: string[]
  eventTime_not_in?: string[]
  eventTime_lt?: string | null
  eventTime_lte?: string | null
  eventTime_gt?: string | null
  eventTime_gte?: string | null
  featured?: boolean | null
  featured_not?: boolean | null
  flagged_as_objectionable?: boolean | null
  flagged_as_objectionable_not?: boolean | null
  created_by_joinmi?: boolean | null
  created_by_joinmi_not?: boolean | null
  task_type?: prisma.TASK_TYPE | null
  task_type_not?: prisma.TASK_TYPE | null
  task_type_in?: prisma.TASK_TYPE[]
  task_type_not_in?: prisma.TASK_TYPE[]
  active?: boolean | null
  active_not?: boolean | null
  expiration?: string | null
  expiration_not?: string | null
  expiration_in?: string[]
  expiration_not_in?: string[]
  expiration_lt?: string | null
  expiration_lte?: string | null
  expiration_gt?: string | null
  expiration_gte?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  creator?: UserWhereInput | null
  participants_every?: UserWhereInput | null
  participants_some?: UserWhereInput | null
  participants_none?: UserWhereInput | null
  conversations_every?: ConversationWhereInput | null
  conversations_some?: ConversationWhereInput | null
  conversations_none?: ConversationWhereInput | null
  reviews_every?: ReviewWhereInput | null
  reviews_some?: ReviewWhereInput | null
  reviews_none?: ReviewWhereInput | null
  category?: CategoryWhereInput | null
  AND?: TaskWhereInput[]
  OR?: TaskWhereInput[]
  NOT?: TaskWhereInput[]
}
export type TaskWhereInputInputObject =
  | Extract<keyof TaskWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'location_not', alias?: string  } 
  | { name: 'location_in', alias?: string  } 
  | { name: 'location_not_in', alias?: string  } 
  | { name: 'location_lt', alias?: string  } 
  | { name: 'location_lte', alias?: string  } 
  | { name: 'location_gt', alias?: string  } 
  | { name: 'location_gte', alias?: string  } 
  | { name: 'location_contains', alias?: string  } 
  | { name: 'location_not_contains', alias?: string  } 
  | { name: 'location_starts_with', alias?: string  } 
  | { name: 'location_not_starts_with', alias?: string  } 
  | { name: 'location_ends_with', alias?: string  } 
  | { name: 'location_not_ends_with', alias?: string  } 
  | { name: 'eventTime', alias?: string  } 
  | { name: 'eventTime_not', alias?: string  } 
  | { name: 'eventTime_in', alias?: string  } 
  | { name: 'eventTime_not_in', alias?: string  } 
  | { name: 'eventTime_lt', alias?: string  } 
  | { name: 'eventTime_lte', alias?: string  } 
  | { name: 'eventTime_gt', alias?: string  } 
  | { name: 'eventTime_gte', alias?: string  } 
  | { name: 'featured', alias?: string  } 
  | { name: 'featured_not', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'flagged_as_objectionable_not', alias?: string  } 
  | { name: 'created_by_joinmi', alias?: string  } 
  | { name: 'created_by_joinmi_not', alias?: string  } 
  | { name: 'task_type', alias?: string  } 
  | { name: 'task_type_not', alias?: string  } 
  | { name: 'task_type_in', alias?: string  } 
  | { name: 'task_type_not_in', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'active_not', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'expiration_not', alias?: string  } 
  | { name: 'expiration_in', alias?: string  } 
  | { name: 'expiration_not_in', alias?: string  } 
  | { name: 'expiration_lt', alias?: string  } 
  | { name: 'expiration_lte', alias?: string  } 
  | { name: 'expiration_gt', alias?: string  } 
  | { name: 'expiration_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  | { name: 'participants_every', alias?: string  } 
  | { name: 'participants_some', alias?: string  } 
  | { name: 'participants_none', alias?: string  } 
  | { name: 'conversations_every', alias?: string  } 
  | { name: 'conversations_some', alias?: string  } 
  | { name: 'conversations_none', alias?: string  } 
  | { name: 'reviews_every', alias?: string  } 
  | { name: 'reviews_some', alias?: string  } 
  | { name: 'reviews_none', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ConversationWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  active?: boolean | null
  active_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  participants_every?: UserWhereInput | null
  participants_some?: UserWhereInput | null
  participants_none?: UserWhereInput | null
  task?: TaskWhereInput | null
  AND?: ConversationWhereInput[]
  OR?: ConversationWhereInput[]
  NOT?: ConversationWhereInput[]
}
export type ConversationWhereInputInputObject =
  | Extract<keyof ConversationWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'active_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'participants_every', alias?: string  } 
  | { name: 'participants_some', alias?: string  } 
  | { name: 'participants_none', alias?: string  } 
  | { name: 'task', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ReviewWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  rating?: prisma.RATING | null
  rating_not?: prisma.RATING | null
  rating_in?: prisma.RATING[]
  rating_not_in?: prisma.RATING[]
  reviewer?: UserWhereInput | null
  task?: TaskWhereInput | null
  AND?: ReviewWhereInput[]
  OR?: ReviewWhereInput[]
  NOT?: ReviewWhereInput[]
}
export type ReviewWhereInputInputObject =
  | Extract<keyof ReviewWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'rating_not', alias?: string  } 
  | { name: 'rating_in', alias?: string  } 
  | { name: 'rating_not_in', alias?: string  } 
  | { name: 'reviewer', alias?: string  } 
  | { name: 'task', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CategoryWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  image_url?: string | null
  image_url_not?: string | null
  image_url_in?: string[]
  image_url_not_in?: string[]
  image_url_lt?: string | null
  image_url_lte?: string | null
  image_url_gt?: string | null
  image_url_gte?: string | null
  image_url_contains?: string | null
  image_url_not_contains?: string | null
  image_url_starts_with?: string | null
  image_url_not_starts_with?: string | null
  image_url_ends_with?: string | null
  image_url_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  tasks_every?: TaskWhereInput | null
  tasks_some?: TaskWhereInput | null
  tasks_none?: TaskWhereInput | null
  userCategories_every?: UserCategoryWhereInput | null
  userCategories_some?: UserCategoryWhereInput | null
  userCategories_none?: UserCategoryWhereInput | null
  AND?: CategoryWhereInput[]
  OR?: CategoryWhereInput[]
  NOT?: CategoryWhereInput[]
}
export type CategoryWhereInputInputObject =
  | Extract<keyof CategoryWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'image_url', alias?: string  } 
  | { name: 'image_url_not', alias?: string  } 
  | { name: 'image_url_in', alias?: string  } 
  | { name: 'image_url_not_in', alias?: string  } 
  | { name: 'image_url_lt', alias?: string  } 
  | { name: 'image_url_lte', alias?: string  } 
  | { name: 'image_url_gt', alias?: string  } 
  | { name: 'image_url_gte', alias?: string  } 
  | { name: 'image_url_contains', alias?: string  } 
  | { name: 'image_url_not_contains', alias?: string  } 
  | { name: 'image_url_starts_with', alias?: string  } 
  | { name: 'image_url_not_starts_with', alias?: string  } 
  | { name: 'image_url_ends_with', alias?: string  } 
  | { name: 'image_url_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'tasks_every', alias?: string  } 
  | { name: 'tasks_some', alias?: string  } 
  | { name: 'tasks_none', alias?: string  } 
  | { name: 'userCategories_every', alias?: string  } 
  | { name: 'userCategories_some', alias?: string  } 
  | { name: 'userCategories_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserCategoryWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  category?: CategoryWhereInput | null
  selected?: boolean | null
  selected_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  user?: UserWhereInput | null
  AND?: UserCategoryWhereInput[]
  OR?: UserCategoryWhereInput[]
  NOT?: UserCategoryWhereInput[]
}
export type UserCategoryWhereInputInputObject =
  | Extract<keyof UserCategoryWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'selected', alias?: string  } 
  | { name: 'selected_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TaskWhereUniqueInput {
  id?: string | null
}
export type TaskWhereUniqueInputInputObject =
  | Extract<keyof TaskWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CategoryWhereUniqueInput {
  id?: string | null
  title?: string | null
}
export type CategoryWhereUniqueInputInputObject =
  | Extract<keyof CategoryWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface UserCategoryWhereUniqueInput {
  id?: string | null
}
export type UserCategoryWhereUniqueInputInputObject =
  | Extract<keyof UserCategoryWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ConversationWhereUniqueInput {
  id?: string | null
}
export type ConversationWhereUniqueInputInputObject =
  | Extract<keyof ConversationWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface NotificationWhereUniqueInput {
  id?: string | null
}
export type NotificationWhereUniqueInputInputObject =
  | Extract<keyof NotificationWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ReviewWhereUniqueInput {
  id?: string | null
}
export type ReviewWhereUniqueInputInputObject =
  | Extract<keyof ReviewWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface SchoolWhereUniqueInput {
  id?: string | null
}
export type SchoolWhereUniqueInputInputObject =
  | Extract<keyof SchoolWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface SchoolWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  domain?: string | null
  domain_not?: string | null
  domain_in?: string[]
  domain_not_in?: string[]
  domain_lt?: string | null
  domain_lte?: string | null
  domain_gt?: string | null
  domain_gte?: string | null
  domain_contains?: string | null
  domain_not_contains?: string | null
  domain_starts_with?: string | null
  domain_not_starts_with?: string | null
  domain_ends_with?: string | null
  domain_not_ends_with?: string | null
  active?: boolean | null
  active_not?: boolean | null
  AND?: SchoolWhereInput[]
  OR?: SchoolWhereInput[]
  NOT?: SchoolWhereInput[]
}
export type SchoolWhereInputInputObject =
  | Extract<keyof SchoolWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  | { name: 'domain_not', alias?: string  } 
  | { name: 'domain_in', alias?: string  } 
  | { name: 'domain_not_in', alias?: string  } 
  | { name: 'domain_lt', alias?: string  } 
  | { name: 'domain_lte', alias?: string  } 
  | { name: 'domain_gt', alias?: string  } 
  | { name: 'domain_gte', alias?: string  } 
  | { name: 'domain_contains', alias?: string  } 
  | { name: 'domain_not_contains', alias?: string  } 
  | { name: 'domain_starts_with', alias?: string  } 
  | { name: 'domain_not_starts_with', alias?: string  } 
  | { name: 'domain_ends_with', alias?: string  } 
  | { name: 'domain_not_ends_with', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'active_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  email?: string
  token?: string | null
  name?: string | null
  username?: string | null
  description?: string | null
  major?: string | null
  townYouGrewUpIn?: string | null
  favoriteHobby?: string | null
  photo_url?: string | null
  cover_photo_url?: string | null
  flagged_as_objectionable?: boolean | null
  view_objectionable_content?: boolean | null
  school?: string | null
  about_me?: string | null
  receive_push_notifications?: boolean | null
  oneSignalPlayerId?: string | null
  fcm_token?: string | null
  facebook_social_link?: string | null
  twitter_social_link?: string | null
  instagram_social_link?: string | null
  snapchat_social_link?: string | null
  role?: prisma.ROLE | null
  notifications?: NotificationCreateManyWithoutUserInput | null
  block_list?: UserCreateManyInput | null
  tasks?: TaskCreateManyWithoutParticipantsInput | null
  reviews?: ReviewCreateManyWithoutReviewerInput | null
  categories?: UserCategoryCreateManyWithoutUserInput | null
  conversations?: ConversationCreateManyWithoutParticipantsInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'token', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'major', alias?: string  } 
  | { name: 'townYouGrewUpIn', alias?: string  } 
  | { name: 'favoriteHobby', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'cover_photo_url', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'view_objectionable_content', alias?: string  } 
  | { name: 'school', alias?: string  } 
  | { name: 'about_me', alias?: string  } 
  | { name: 'receive_push_notifications', alias?: string  } 
  | { name: 'oneSignalPlayerId', alias?: string  } 
  | { name: 'fcm_token', alias?: string  } 
  | { name: 'facebook_social_link', alias?: string  } 
  | { name: 'twitter_social_link', alias?: string  } 
  | { name: 'instagram_social_link', alias?: string  } 
  | { name: 'snapchat_social_link', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'notifications', alias?: string  } 
  | { name: 'block_list', alias?: string  } 
  | { name: 'tasks', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  | { name: 'conversations', alias?: string  } 
  
export interface NotificationCreateManyWithoutUserInput {
  create?: NotificationCreateWithoutUserInput[]
  connect?: NotificationWhereUniqueInput[]
}
export type NotificationCreateManyWithoutUserInputInputObject =
  | Extract<keyof NotificationCreateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface NotificationCreateWithoutUserInput {
  id?: string | null
  title?: string | null
  description?: string | null
  image_url?: string | null
  data?: undefined | null
  expiration?: string
  read?: boolean | null
}
export type NotificationCreateWithoutUserInputInputObject =
  | Extract<keyof NotificationCreateWithoutUserInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'image_url', alias?: string  } 
  | { name: 'data', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'read', alias?: string  } 
  
export interface UserCreateManyInput {
  create?: UserCreateInput[]
  connect?: UserWhereUniqueInput[]
}
export type UserCreateManyInputInputObject =
  | Extract<keyof UserCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TaskCreateManyWithoutParticipantsInput {
  create?: TaskCreateWithoutParticipantsInput[]
  connect?: TaskWhereUniqueInput[]
}
export type TaskCreateManyWithoutParticipantsInputInputObject =
  | Extract<keyof TaskCreateManyWithoutParticipantsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TaskCreateWithoutParticipantsInput {
  id?: string | null
  title?: string | null
  description?: string | null
  location?: string | null
  eventTime?: string | null
  featured?: boolean | null
  flagged_as_objectionable?: boolean | null
  created_by_joinmi?: boolean | null
  task_type?: prisma.TASK_TYPE | null
  active?: boolean | null
  expiration?: string | null
  creator?: UserCreateOneInput
  conversations?: ConversationCreateManyWithoutTaskInput | null
  reviews?: ReviewCreateManyWithoutTaskInput | null
  category?: CategoryCreateOneWithoutTasksInput
}
export type TaskCreateWithoutParticipantsInputInputObject =
  | Extract<keyof TaskCreateWithoutParticipantsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'eventTime', alias?: string  } 
  | { name: 'featured', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'created_by_joinmi', alias?: string  } 
  | { name: 'task_type', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  | { name: 'conversations', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  | { name: 'category', alias?: string  } 
  
export interface UserCreateOneInput {
  create?: UserCreateInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneInputInputObject =
  | Extract<keyof UserCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ConversationCreateManyWithoutTaskInput {
  create?: ConversationCreateWithoutTaskInput[]
  connect?: ConversationWhereUniqueInput[]
}
export type ConversationCreateManyWithoutTaskInputInputObject =
  | Extract<keyof ConversationCreateManyWithoutTaskInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ConversationCreateWithoutTaskInput {
  id?: string | null
  description?: string | null
  active?: boolean | null
  participants?: UserCreateManyWithoutConversationsInput | null
}
export type ConversationCreateWithoutTaskInputInputObject =
  | Extract<keyof ConversationCreateWithoutTaskInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'participants', alias?: string  } 
  
export interface UserCreateManyWithoutConversationsInput {
  create?: UserCreateWithoutConversationsInput[]
  connect?: UserWhereUniqueInput[]
}
export type UserCreateManyWithoutConversationsInputInputObject =
  | Extract<keyof UserCreateManyWithoutConversationsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutConversationsInput {
  id?: string | null
  email?: string
  token?: string | null
  name?: string | null
  username?: string | null
  description?: string | null
  major?: string | null
  townYouGrewUpIn?: string | null
  favoriteHobby?: string | null
  photo_url?: string | null
  cover_photo_url?: string | null
  flagged_as_objectionable?: boolean | null
  view_objectionable_content?: boolean | null
  school?: string | null
  about_me?: string | null
  receive_push_notifications?: boolean | null
  oneSignalPlayerId?: string | null
  fcm_token?: string | null
  facebook_social_link?: string | null
  twitter_social_link?: string | null
  instagram_social_link?: string | null
  snapchat_social_link?: string | null
  role?: prisma.ROLE | null
  notifications?: NotificationCreateManyWithoutUserInput | null
  block_list?: UserCreateManyInput | null
  tasks?: TaskCreateManyWithoutParticipantsInput | null
  reviews?: ReviewCreateManyWithoutReviewerInput | null
  categories?: UserCategoryCreateManyWithoutUserInput | null
}
export type UserCreateWithoutConversationsInputInputObject =
  | Extract<keyof UserCreateWithoutConversationsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'token', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'major', alias?: string  } 
  | { name: 'townYouGrewUpIn', alias?: string  } 
  | { name: 'favoriteHobby', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'cover_photo_url', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'view_objectionable_content', alias?: string  } 
  | { name: 'school', alias?: string  } 
  | { name: 'about_me', alias?: string  } 
  | { name: 'receive_push_notifications', alias?: string  } 
  | { name: 'oneSignalPlayerId', alias?: string  } 
  | { name: 'fcm_token', alias?: string  } 
  | { name: 'facebook_social_link', alias?: string  } 
  | { name: 'twitter_social_link', alias?: string  } 
  | { name: 'instagram_social_link', alias?: string  } 
  | { name: 'snapchat_social_link', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'notifications', alias?: string  } 
  | { name: 'block_list', alias?: string  } 
  | { name: 'tasks', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  
export interface ReviewCreateManyWithoutReviewerInput {
  create?: ReviewCreateWithoutReviewerInput[]
  connect?: ReviewWhereUniqueInput[]
}
export type ReviewCreateManyWithoutReviewerInputInputObject =
  | Extract<keyof ReviewCreateManyWithoutReviewerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ReviewCreateWithoutReviewerInput {
  id?: string | null
  title?: string | null
  description?: string | null
  rating?: prisma.RATING | null
  task?: TaskCreateOneWithoutReviewsInput | null
}
export type ReviewCreateWithoutReviewerInputInputObject =
  | Extract<keyof ReviewCreateWithoutReviewerInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'task', alias?: string  } 
  
export interface TaskCreateOneWithoutReviewsInput {
  create?: TaskCreateWithoutReviewsInput | null
  connect?: TaskWhereUniqueInput | null
}
export type TaskCreateOneWithoutReviewsInputInputObject =
  | Extract<keyof TaskCreateOneWithoutReviewsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TaskCreateWithoutReviewsInput {
  id?: string | null
  title?: string | null
  description?: string | null
  location?: string | null
  eventTime?: string | null
  featured?: boolean | null
  flagged_as_objectionable?: boolean | null
  created_by_joinmi?: boolean | null
  task_type?: prisma.TASK_TYPE | null
  active?: boolean | null
  expiration?: string | null
  creator?: UserCreateOneInput
  participants?: UserCreateManyWithoutTasksInput | null
  conversations?: ConversationCreateManyWithoutTaskInput | null
  category?: CategoryCreateOneWithoutTasksInput
}
export type TaskCreateWithoutReviewsInputInputObject =
  | Extract<keyof TaskCreateWithoutReviewsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'eventTime', alias?: string  } 
  | { name: 'featured', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'created_by_joinmi', alias?: string  } 
  | { name: 'task_type', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  | { name: 'participants', alias?: string  } 
  | { name: 'conversations', alias?: string  } 
  | { name: 'category', alias?: string  } 
  
export interface UserCreateManyWithoutTasksInput {
  create?: UserCreateWithoutTasksInput[]
  connect?: UserWhereUniqueInput[]
}
export type UserCreateManyWithoutTasksInputInputObject =
  | Extract<keyof UserCreateManyWithoutTasksInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutTasksInput {
  id?: string | null
  email?: string
  token?: string | null
  name?: string | null
  username?: string | null
  description?: string | null
  major?: string | null
  townYouGrewUpIn?: string | null
  favoriteHobby?: string | null
  photo_url?: string | null
  cover_photo_url?: string | null
  flagged_as_objectionable?: boolean | null
  view_objectionable_content?: boolean | null
  school?: string | null
  about_me?: string | null
  receive_push_notifications?: boolean | null
  oneSignalPlayerId?: string | null
  fcm_token?: string | null
  facebook_social_link?: string | null
  twitter_social_link?: string | null
  instagram_social_link?: string | null
  snapchat_social_link?: string | null
  role?: prisma.ROLE | null
  notifications?: NotificationCreateManyWithoutUserInput | null
  block_list?: UserCreateManyInput | null
  reviews?: ReviewCreateManyWithoutReviewerInput | null
  categories?: UserCategoryCreateManyWithoutUserInput | null
  conversations?: ConversationCreateManyWithoutParticipantsInput | null
}
export type UserCreateWithoutTasksInputInputObject =
  | Extract<keyof UserCreateWithoutTasksInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'token', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'major', alias?: string  } 
  | { name: 'townYouGrewUpIn', alias?: string  } 
  | { name: 'favoriteHobby', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'cover_photo_url', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'view_objectionable_content', alias?: string  } 
  | { name: 'school', alias?: string  } 
  | { name: 'about_me', alias?: string  } 
  | { name: 'receive_push_notifications', alias?: string  } 
  | { name: 'oneSignalPlayerId', alias?: string  } 
  | { name: 'fcm_token', alias?: string  } 
  | { name: 'facebook_social_link', alias?: string  } 
  | { name: 'twitter_social_link', alias?: string  } 
  | { name: 'instagram_social_link', alias?: string  } 
  | { name: 'snapchat_social_link', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'notifications', alias?: string  } 
  | { name: 'block_list', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  | { name: 'conversations', alias?: string  } 
  
export interface UserCategoryCreateManyWithoutUserInput {
  create?: UserCategoryCreateWithoutUserInput[]
  connect?: UserCategoryWhereUniqueInput[]
}
export type UserCategoryCreateManyWithoutUserInputInputObject =
  | Extract<keyof UserCategoryCreateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCategoryCreateWithoutUserInput {
  id?: string | null
  category?: CategoryCreateOneWithoutUserCategoriesInput | null
  selected?: boolean | null
}
export type UserCategoryCreateWithoutUserInputInputObject =
  | Extract<keyof UserCategoryCreateWithoutUserInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'selected', alias?: string  } 
  
export interface CategoryCreateOneWithoutUserCategoriesInput {
  create?: CategoryCreateWithoutUserCategoriesInput | null
  connect?: CategoryWhereUniqueInput | null
}
export type CategoryCreateOneWithoutUserCategoriesInputInputObject =
  | Extract<keyof CategoryCreateOneWithoutUserCategoriesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CategoryCreateWithoutUserCategoriesInput {
  id?: string | null
  title?: string
  image_url?: string | null
  tasks?: TaskCreateManyWithoutCategoryInput | null
}
export type CategoryCreateWithoutUserCategoriesInputInputObject =
  | Extract<keyof CategoryCreateWithoutUserCategoriesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'image_url', alias?: string  } 
  | { name: 'tasks', alias?: string  } 
  
export interface TaskCreateManyWithoutCategoryInput {
  create?: TaskCreateWithoutCategoryInput[]
  connect?: TaskWhereUniqueInput[]
}
export type TaskCreateManyWithoutCategoryInputInputObject =
  | Extract<keyof TaskCreateManyWithoutCategoryInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TaskCreateWithoutCategoryInput {
  id?: string | null
  title?: string | null
  description?: string | null
  location?: string | null
  eventTime?: string | null
  featured?: boolean | null
  flagged_as_objectionable?: boolean | null
  created_by_joinmi?: boolean | null
  task_type?: prisma.TASK_TYPE | null
  active?: boolean | null
  expiration?: string | null
  creator?: UserCreateOneInput
  participants?: UserCreateManyWithoutTasksInput | null
  conversations?: ConversationCreateManyWithoutTaskInput | null
  reviews?: ReviewCreateManyWithoutTaskInput | null
}
export type TaskCreateWithoutCategoryInputInputObject =
  | Extract<keyof TaskCreateWithoutCategoryInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'eventTime', alias?: string  } 
  | { name: 'featured', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'created_by_joinmi', alias?: string  } 
  | { name: 'task_type', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  | { name: 'participants', alias?: string  } 
  | { name: 'conversations', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  
export interface ReviewCreateManyWithoutTaskInput {
  create?: ReviewCreateWithoutTaskInput[]
  connect?: ReviewWhereUniqueInput[]
}
export type ReviewCreateManyWithoutTaskInputInputObject =
  | Extract<keyof ReviewCreateManyWithoutTaskInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ReviewCreateWithoutTaskInput {
  id?: string | null
  title?: string | null
  description?: string | null
  rating?: prisma.RATING | null
  reviewer?: UserCreateOneWithoutReviewsInput
}
export type ReviewCreateWithoutTaskInputInputObject =
  | Extract<keyof ReviewCreateWithoutTaskInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'reviewer', alias?: string  } 
  
export interface UserCreateOneWithoutReviewsInput {
  create?: UserCreateWithoutReviewsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutReviewsInputInputObject =
  | Extract<keyof UserCreateOneWithoutReviewsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutReviewsInput {
  id?: string | null
  email?: string
  token?: string | null
  name?: string | null
  username?: string | null
  description?: string | null
  major?: string | null
  townYouGrewUpIn?: string | null
  favoriteHobby?: string | null
  photo_url?: string | null
  cover_photo_url?: string | null
  flagged_as_objectionable?: boolean | null
  view_objectionable_content?: boolean | null
  school?: string | null
  about_me?: string | null
  receive_push_notifications?: boolean | null
  oneSignalPlayerId?: string | null
  fcm_token?: string | null
  facebook_social_link?: string | null
  twitter_social_link?: string | null
  instagram_social_link?: string | null
  snapchat_social_link?: string | null
  role?: prisma.ROLE | null
  notifications?: NotificationCreateManyWithoutUserInput | null
  block_list?: UserCreateManyInput | null
  tasks?: TaskCreateManyWithoutParticipantsInput | null
  categories?: UserCategoryCreateManyWithoutUserInput | null
  conversations?: ConversationCreateManyWithoutParticipantsInput | null
}
export type UserCreateWithoutReviewsInputInputObject =
  | Extract<keyof UserCreateWithoutReviewsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'token', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'major', alias?: string  } 
  | { name: 'townYouGrewUpIn', alias?: string  } 
  | { name: 'favoriteHobby', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'cover_photo_url', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'view_objectionable_content', alias?: string  } 
  | { name: 'school', alias?: string  } 
  | { name: 'about_me', alias?: string  } 
  | { name: 'receive_push_notifications', alias?: string  } 
  | { name: 'oneSignalPlayerId', alias?: string  } 
  | { name: 'fcm_token', alias?: string  } 
  | { name: 'facebook_social_link', alias?: string  } 
  | { name: 'twitter_social_link', alias?: string  } 
  | { name: 'instagram_social_link', alias?: string  } 
  | { name: 'snapchat_social_link', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'notifications', alias?: string  } 
  | { name: 'block_list', alias?: string  } 
  | { name: 'tasks', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  | { name: 'conversations', alias?: string  } 
  
export interface ConversationCreateManyWithoutParticipantsInput {
  create?: ConversationCreateWithoutParticipantsInput[]
  connect?: ConversationWhereUniqueInput[]
}
export type ConversationCreateManyWithoutParticipantsInputInputObject =
  | Extract<keyof ConversationCreateManyWithoutParticipantsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ConversationCreateWithoutParticipantsInput {
  id?: string | null
  description?: string | null
  active?: boolean | null
  task?: TaskCreateOneWithoutConversationsInput | null
}
export type ConversationCreateWithoutParticipantsInputInputObject =
  | Extract<keyof ConversationCreateWithoutParticipantsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'task', alias?: string  } 
  
export interface TaskCreateOneWithoutConversationsInput {
  create?: TaskCreateWithoutConversationsInput | null
  connect?: TaskWhereUniqueInput | null
}
export type TaskCreateOneWithoutConversationsInputInputObject =
  | Extract<keyof TaskCreateOneWithoutConversationsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TaskCreateWithoutConversationsInput {
  id?: string | null
  title?: string | null
  description?: string | null
  location?: string | null
  eventTime?: string | null
  featured?: boolean | null
  flagged_as_objectionable?: boolean | null
  created_by_joinmi?: boolean | null
  task_type?: prisma.TASK_TYPE | null
  active?: boolean | null
  expiration?: string | null
  creator?: UserCreateOneInput
  participants?: UserCreateManyWithoutTasksInput | null
  reviews?: ReviewCreateManyWithoutTaskInput | null
  category?: CategoryCreateOneWithoutTasksInput
}
export type TaskCreateWithoutConversationsInputInputObject =
  | Extract<keyof TaskCreateWithoutConversationsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'eventTime', alias?: string  } 
  | { name: 'featured', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'created_by_joinmi', alias?: string  } 
  | { name: 'task_type', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  | { name: 'participants', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  | { name: 'category', alias?: string  } 
  
export interface CategoryCreateOneWithoutTasksInput {
  create?: CategoryCreateWithoutTasksInput | null
  connect?: CategoryWhereUniqueInput | null
}
export type CategoryCreateOneWithoutTasksInputInputObject =
  | Extract<keyof CategoryCreateOneWithoutTasksInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CategoryCreateWithoutTasksInput {
  id?: string | null
  title?: string
  image_url?: string | null
  userCategories?: UserCategoryCreateManyWithoutCategoryInput | null
}
export type CategoryCreateWithoutTasksInputInputObject =
  | Extract<keyof CategoryCreateWithoutTasksInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'image_url', alias?: string  } 
  | { name: 'userCategories', alias?: string  } 
  
export interface UserCategoryCreateManyWithoutCategoryInput {
  create?: UserCategoryCreateWithoutCategoryInput[]
  connect?: UserCategoryWhereUniqueInput[]
}
export type UserCategoryCreateManyWithoutCategoryInputInputObject =
  | Extract<keyof UserCategoryCreateManyWithoutCategoryInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCategoryCreateWithoutCategoryInput {
  id?: string | null
  selected?: boolean | null
  user?: UserCreateOneWithoutCategoriesInput | null
}
export type UserCategoryCreateWithoutCategoryInputInputObject =
  | Extract<keyof UserCategoryCreateWithoutCategoryInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'selected', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserCreateOneWithoutCategoriesInput {
  create?: UserCreateWithoutCategoriesInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutCategoriesInputInputObject =
  | Extract<keyof UserCreateOneWithoutCategoriesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutCategoriesInput {
  id?: string | null
  email?: string
  token?: string | null
  name?: string | null
  username?: string | null
  description?: string | null
  major?: string | null
  townYouGrewUpIn?: string | null
  favoriteHobby?: string | null
  photo_url?: string | null
  cover_photo_url?: string | null
  flagged_as_objectionable?: boolean | null
  view_objectionable_content?: boolean | null
  school?: string | null
  about_me?: string | null
  receive_push_notifications?: boolean | null
  oneSignalPlayerId?: string | null
  fcm_token?: string | null
  facebook_social_link?: string | null
  twitter_social_link?: string | null
  instagram_social_link?: string | null
  snapchat_social_link?: string | null
  role?: prisma.ROLE | null
  notifications?: NotificationCreateManyWithoutUserInput | null
  block_list?: UserCreateManyInput | null
  tasks?: TaskCreateManyWithoutParticipantsInput | null
  reviews?: ReviewCreateManyWithoutReviewerInput | null
  conversations?: ConversationCreateManyWithoutParticipantsInput | null
}
export type UserCreateWithoutCategoriesInputInputObject =
  | Extract<keyof UserCreateWithoutCategoriesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'token', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'major', alias?: string  } 
  | { name: 'townYouGrewUpIn', alias?: string  } 
  | { name: 'favoriteHobby', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'cover_photo_url', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'view_objectionable_content', alias?: string  } 
  | { name: 'school', alias?: string  } 
  | { name: 'about_me', alias?: string  } 
  | { name: 'receive_push_notifications', alias?: string  } 
  | { name: 'oneSignalPlayerId', alias?: string  } 
  | { name: 'fcm_token', alias?: string  } 
  | { name: 'facebook_social_link', alias?: string  } 
  | { name: 'twitter_social_link', alias?: string  } 
  | { name: 'instagram_social_link', alias?: string  } 
  | { name: 'snapchat_social_link', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'notifications', alias?: string  } 
  | { name: 'block_list', alias?: string  } 
  | { name: 'tasks', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  | { name: 'conversations', alias?: string  } 
  
export interface UserUpdateInput {
  email?: string | null
  token?: string | null
  name?: string | null
  username?: string | null
  description?: string | null
  major?: string | null
  townYouGrewUpIn?: string | null
  favoriteHobby?: string | null
  photo_url?: string | null
  cover_photo_url?: string | null
  flagged_as_objectionable?: boolean | null
  view_objectionable_content?: boolean | null
  school?: string | null
  about_me?: string | null
  receive_push_notifications?: boolean | null
  oneSignalPlayerId?: string | null
  fcm_token?: string | null
  facebook_social_link?: string | null
  twitter_social_link?: string | null
  instagram_social_link?: string | null
  snapchat_social_link?: string | null
  role?: prisma.ROLE | null
  notifications?: NotificationUpdateManyWithoutUserInput | null
  block_list?: UserUpdateManyInput | null
  tasks?: TaskUpdateManyWithoutParticipantsInput | null
  reviews?: ReviewUpdateManyWithoutReviewerInput | null
  categories?: UserCategoryUpdateManyWithoutUserInput | null
  conversations?: ConversationUpdateManyWithoutParticipantsInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'token', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'major', alias?: string  } 
  | { name: 'townYouGrewUpIn', alias?: string  } 
  | { name: 'favoriteHobby', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'cover_photo_url', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'view_objectionable_content', alias?: string  } 
  | { name: 'school', alias?: string  } 
  | { name: 'about_me', alias?: string  } 
  | { name: 'receive_push_notifications', alias?: string  } 
  | { name: 'oneSignalPlayerId', alias?: string  } 
  | { name: 'fcm_token', alias?: string  } 
  | { name: 'facebook_social_link', alias?: string  } 
  | { name: 'twitter_social_link', alias?: string  } 
  | { name: 'instagram_social_link', alias?: string  } 
  | { name: 'snapchat_social_link', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'notifications', alias?: string  } 
  | { name: 'block_list', alias?: string  } 
  | { name: 'tasks', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  | { name: 'conversations', alias?: string  } 
  
export interface NotificationUpdateManyWithoutUserInput {
  create?: NotificationCreateWithoutUserInput[]
  delete?: NotificationWhereUniqueInput[]
  connect?: NotificationWhereUniqueInput[]
  set?: NotificationWhereUniqueInput[]
  disconnect?: NotificationWhereUniqueInput[]
  update?: NotificationUpdateWithWhereUniqueWithoutUserInput[]
  upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput[]
  deleteMany?: NotificationScalarWhereInput[]
  updateMany?: NotificationUpdateManyWithWhereNestedInput[]
}
export type NotificationUpdateManyWithoutUserInputInputObject =
  | Extract<keyof NotificationUpdateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface NotificationUpdateWithWhereUniqueWithoutUserInput {
  where?: NotificationWhereUniqueInput
  data?: NotificationUpdateWithoutUserDataInput
}
export type NotificationUpdateWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof NotificationUpdateWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface NotificationUpdateWithoutUserDataInput {
  title?: string | null
  description?: string | null
  image_url?: string | null
  data?: undefined | null
  expiration?: string | null
  read?: boolean | null
}
export type NotificationUpdateWithoutUserDataInputInputObject =
  | Extract<keyof NotificationUpdateWithoutUserDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'image_url', alias?: string  } 
  | { name: 'data', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'read', alias?: string  } 
  
export interface NotificationUpsertWithWhereUniqueWithoutUserInput {
  where?: NotificationWhereUniqueInput
  update?: NotificationUpdateWithoutUserDataInput
  create?: NotificationCreateWithoutUserInput
}
export type NotificationUpsertWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof NotificationUpsertWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface NotificationScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  image_url?: string | null
  image_url_not?: string | null
  image_url_in?: string[]
  image_url_not_in?: string[]
  image_url_lt?: string | null
  image_url_lte?: string | null
  image_url_gt?: string | null
  image_url_gte?: string | null
  image_url_contains?: string | null
  image_url_not_contains?: string | null
  image_url_starts_with?: string | null
  image_url_not_starts_with?: string | null
  image_url_ends_with?: string | null
  image_url_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  expiration?: string | null
  expiration_not?: string | null
  expiration_in?: string[]
  expiration_not_in?: string[]
  expiration_lt?: string | null
  expiration_lte?: string | null
  expiration_gt?: string | null
  expiration_gte?: string | null
  read?: boolean | null
  read_not?: boolean | null
  AND?: NotificationScalarWhereInput[]
  OR?: NotificationScalarWhereInput[]
  NOT?: NotificationScalarWhereInput[]
}
export type NotificationScalarWhereInputInputObject =
  | Extract<keyof NotificationScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'image_url', alias?: string  } 
  | { name: 'image_url_not', alias?: string  } 
  | { name: 'image_url_in', alias?: string  } 
  | { name: 'image_url_not_in', alias?: string  } 
  | { name: 'image_url_lt', alias?: string  } 
  | { name: 'image_url_lte', alias?: string  } 
  | { name: 'image_url_gt', alias?: string  } 
  | { name: 'image_url_gte', alias?: string  } 
  | { name: 'image_url_contains', alias?: string  } 
  | { name: 'image_url_not_contains', alias?: string  } 
  | { name: 'image_url_starts_with', alias?: string  } 
  | { name: 'image_url_not_starts_with', alias?: string  } 
  | { name: 'image_url_ends_with', alias?: string  } 
  | { name: 'image_url_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'expiration_not', alias?: string  } 
  | { name: 'expiration_in', alias?: string  } 
  | { name: 'expiration_not_in', alias?: string  } 
  | { name: 'expiration_lt', alias?: string  } 
  | { name: 'expiration_lte', alias?: string  } 
  | { name: 'expiration_gt', alias?: string  } 
  | { name: 'expiration_gte', alias?: string  } 
  | { name: 'read', alias?: string  } 
  | { name: 'read_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface NotificationUpdateManyWithWhereNestedInput {
  where?: NotificationScalarWhereInput
  data?: NotificationUpdateManyDataInput
}
export type NotificationUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof NotificationUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface NotificationUpdateManyDataInput {
  title?: string | null
  description?: string | null
  image_url?: string | null
  data?: undefined | null
  expiration?: string | null
  read?: boolean | null
}
export type NotificationUpdateManyDataInputInputObject =
  | Extract<keyof NotificationUpdateManyDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'image_url', alias?: string  } 
  | { name: 'data', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'read', alias?: string  } 
  
export interface UserUpdateManyInput {
  create?: UserCreateInput[]
  update?: UserUpdateWithWhereUniqueNestedInput[]
  upsert?: UserUpsertWithWhereUniqueNestedInput[]
  delete?: UserWhereUniqueInput[]
  connect?: UserWhereUniqueInput[]
  set?: UserWhereUniqueInput[]
  disconnect?: UserWhereUniqueInput[]
  deleteMany?: UserScalarWhereInput[]
  updateMany?: UserUpdateManyWithWhereNestedInput[]
}
export type UserUpdateManyInputInputObject =
  | Extract<keyof UserUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserUpdateWithWhereUniqueNestedInput {
  where?: UserWhereUniqueInput
  data?: UserUpdateDataInput
}
export type UserUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof UserUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateDataInput {
  email?: string | null
  token?: string | null
  name?: string | null
  username?: string | null
  description?: string | null
  major?: string | null
  townYouGrewUpIn?: string | null
  favoriteHobby?: string | null
  photo_url?: string | null
  cover_photo_url?: string | null
  flagged_as_objectionable?: boolean | null
  view_objectionable_content?: boolean | null
  school?: string | null
  about_me?: string | null
  receive_push_notifications?: boolean | null
  oneSignalPlayerId?: string | null
  fcm_token?: string | null
  facebook_social_link?: string | null
  twitter_social_link?: string | null
  instagram_social_link?: string | null
  snapchat_social_link?: string | null
  role?: prisma.ROLE | null
  notifications?: NotificationUpdateManyWithoutUserInput | null
  block_list?: UserUpdateManyInput | null
  tasks?: TaskUpdateManyWithoutParticipantsInput | null
  reviews?: ReviewUpdateManyWithoutReviewerInput | null
  categories?: UserCategoryUpdateManyWithoutUserInput | null
  conversations?: ConversationUpdateManyWithoutParticipantsInput | null
}
export type UserUpdateDataInputInputObject =
  | Extract<keyof UserUpdateDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'token', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'major', alias?: string  } 
  | { name: 'townYouGrewUpIn', alias?: string  } 
  | { name: 'favoriteHobby', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'cover_photo_url', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'view_objectionable_content', alias?: string  } 
  | { name: 'school', alias?: string  } 
  | { name: 'about_me', alias?: string  } 
  | { name: 'receive_push_notifications', alias?: string  } 
  | { name: 'oneSignalPlayerId', alias?: string  } 
  | { name: 'fcm_token', alias?: string  } 
  | { name: 'facebook_social_link', alias?: string  } 
  | { name: 'twitter_social_link', alias?: string  } 
  | { name: 'instagram_social_link', alias?: string  } 
  | { name: 'snapchat_social_link', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'notifications', alias?: string  } 
  | { name: 'block_list', alias?: string  } 
  | { name: 'tasks', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  | { name: 'conversations', alias?: string  } 
  
export interface TaskUpdateManyWithoutParticipantsInput {
  create?: TaskCreateWithoutParticipantsInput[]
  delete?: TaskWhereUniqueInput[]
  connect?: TaskWhereUniqueInput[]
  set?: TaskWhereUniqueInput[]
  disconnect?: TaskWhereUniqueInput[]
  update?: TaskUpdateWithWhereUniqueWithoutParticipantsInput[]
  upsert?: TaskUpsertWithWhereUniqueWithoutParticipantsInput[]
  deleteMany?: TaskScalarWhereInput[]
  updateMany?: TaskUpdateManyWithWhereNestedInput[]
}
export type TaskUpdateManyWithoutParticipantsInputInputObject =
  | Extract<keyof TaskUpdateManyWithoutParticipantsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface TaskUpdateWithWhereUniqueWithoutParticipantsInput {
  where?: TaskWhereUniqueInput
  data?: TaskUpdateWithoutParticipantsDataInput
}
export type TaskUpdateWithWhereUniqueWithoutParticipantsInputInputObject =
  | Extract<keyof TaskUpdateWithWhereUniqueWithoutParticipantsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TaskUpdateWithoutParticipantsDataInput {
  title?: string | null
  description?: string | null
  location?: string | null
  eventTime?: string | null
  featured?: boolean | null
  flagged_as_objectionable?: boolean | null
  created_by_joinmi?: boolean | null
  task_type?: prisma.TASK_TYPE | null
  active?: boolean | null
  expiration?: string | null
  creator?: UserUpdateOneRequiredInput | null
  conversations?: ConversationUpdateManyWithoutTaskInput | null
  reviews?: ReviewUpdateManyWithoutTaskInput | null
  category?: CategoryUpdateOneRequiredWithoutTasksInput | null
}
export type TaskUpdateWithoutParticipantsDataInputInputObject =
  | Extract<keyof TaskUpdateWithoutParticipantsDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'eventTime', alias?: string  } 
  | { name: 'featured', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'created_by_joinmi', alias?: string  } 
  | { name: 'task_type', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  | { name: 'conversations', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  | { name: 'category', alias?: string  } 
  
export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput | null
  update?: UserUpdateDataInput | null
  upsert?: UserUpsertNestedInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredInputInputObject =
  | Extract<keyof UserUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpsertNestedInput {
  update?: UserUpdateDataInput
  create?: UserCreateInput
}
export type UserUpsertNestedInputInputObject =
  | Extract<keyof UserUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ConversationUpdateManyWithoutTaskInput {
  create?: ConversationCreateWithoutTaskInput[]
  delete?: ConversationWhereUniqueInput[]
  connect?: ConversationWhereUniqueInput[]
  set?: ConversationWhereUniqueInput[]
  disconnect?: ConversationWhereUniqueInput[]
  update?: ConversationUpdateWithWhereUniqueWithoutTaskInput[]
  upsert?: ConversationUpsertWithWhereUniqueWithoutTaskInput[]
  deleteMany?: ConversationScalarWhereInput[]
  updateMany?: ConversationUpdateManyWithWhereNestedInput[]
}
export type ConversationUpdateManyWithoutTaskInputInputObject =
  | Extract<keyof ConversationUpdateManyWithoutTaskInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ConversationUpdateWithWhereUniqueWithoutTaskInput {
  where?: ConversationWhereUniqueInput
  data?: ConversationUpdateWithoutTaskDataInput
}
export type ConversationUpdateWithWhereUniqueWithoutTaskInputInputObject =
  | Extract<keyof ConversationUpdateWithWhereUniqueWithoutTaskInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ConversationUpdateWithoutTaskDataInput {
  description?: string | null
  active?: boolean | null
  participants?: UserUpdateManyWithoutConversationsInput | null
}
export type ConversationUpdateWithoutTaskDataInputInputObject =
  | Extract<keyof ConversationUpdateWithoutTaskDataInput, string>
  | { name: 'description', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'participants', alias?: string  } 
  
export interface UserUpdateManyWithoutConversationsInput {
  create?: UserCreateWithoutConversationsInput[]
  delete?: UserWhereUniqueInput[]
  connect?: UserWhereUniqueInput[]
  set?: UserWhereUniqueInput[]
  disconnect?: UserWhereUniqueInput[]
  update?: UserUpdateWithWhereUniqueWithoutConversationsInput[]
  upsert?: UserUpsertWithWhereUniqueWithoutConversationsInput[]
  deleteMany?: UserScalarWhereInput[]
  updateMany?: UserUpdateManyWithWhereNestedInput[]
}
export type UserUpdateManyWithoutConversationsInputInputObject =
  | Extract<keyof UserUpdateManyWithoutConversationsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserUpdateWithWhereUniqueWithoutConversationsInput {
  where?: UserWhereUniqueInput
  data?: UserUpdateWithoutConversationsDataInput
}
export type UserUpdateWithWhereUniqueWithoutConversationsInputInputObject =
  | Extract<keyof UserUpdateWithWhereUniqueWithoutConversationsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateWithoutConversationsDataInput {
  email?: string | null
  token?: string | null
  name?: string | null
  username?: string | null
  description?: string | null
  major?: string | null
  townYouGrewUpIn?: string | null
  favoriteHobby?: string | null
  photo_url?: string | null
  cover_photo_url?: string | null
  flagged_as_objectionable?: boolean | null
  view_objectionable_content?: boolean | null
  school?: string | null
  about_me?: string | null
  receive_push_notifications?: boolean | null
  oneSignalPlayerId?: string | null
  fcm_token?: string | null
  facebook_social_link?: string | null
  twitter_social_link?: string | null
  instagram_social_link?: string | null
  snapchat_social_link?: string | null
  role?: prisma.ROLE | null
  notifications?: NotificationUpdateManyWithoutUserInput | null
  block_list?: UserUpdateManyInput | null
  tasks?: TaskUpdateManyWithoutParticipantsInput | null
  reviews?: ReviewUpdateManyWithoutReviewerInput | null
  categories?: UserCategoryUpdateManyWithoutUserInput | null
}
export type UserUpdateWithoutConversationsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutConversationsDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'token', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'major', alias?: string  } 
  | { name: 'townYouGrewUpIn', alias?: string  } 
  | { name: 'favoriteHobby', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'cover_photo_url', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'view_objectionable_content', alias?: string  } 
  | { name: 'school', alias?: string  } 
  | { name: 'about_me', alias?: string  } 
  | { name: 'receive_push_notifications', alias?: string  } 
  | { name: 'oneSignalPlayerId', alias?: string  } 
  | { name: 'fcm_token', alias?: string  } 
  | { name: 'facebook_social_link', alias?: string  } 
  | { name: 'twitter_social_link', alias?: string  } 
  | { name: 'instagram_social_link', alias?: string  } 
  | { name: 'snapchat_social_link', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'notifications', alias?: string  } 
  | { name: 'block_list', alias?: string  } 
  | { name: 'tasks', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  
export interface ReviewUpdateManyWithoutReviewerInput {
  create?: ReviewCreateWithoutReviewerInput[]
  delete?: ReviewWhereUniqueInput[]
  connect?: ReviewWhereUniqueInput[]
  set?: ReviewWhereUniqueInput[]
  disconnect?: ReviewWhereUniqueInput[]
  update?: ReviewUpdateWithWhereUniqueWithoutReviewerInput[]
  upsert?: ReviewUpsertWithWhereUniqueWithoutReviewerInput[]
  deleteMany?: ReviewScalarWhereInput[]
  updateMany?: ReviewUpdateManyWithWhereNestedInput[]
}
export type ReviewUpdateManyWithoutReviewerInputInputObject =
  | Extract<keyof ReviewUpdateManyWithoutReviewerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ReviewUpdateWithWhereUniqueWithoutReviewerInput {
  where?: ReviewWhereUniqueInput
  data?: ReviewUpdateWithoutReviewerDataInput
}
export type ReviewUpdateWithWhereUniqueWithoutReviewerInputInputObject =
  | Extract<keyof ReviewUpdateWithWhereUniqueWithoutReviewerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ReviewUpdateWithoutReviewerDataInput {
  title?: string | null
  description?: string | null
  rating?: prisma.RATING | null
  task?: TaskUpdateOneWithoutReviewsInput | null
}
export type ReviewUpdateWithoutReviewerDataInputInputObject =
  | Extract<keyof ReviewUpdateWithoutReviewerDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'task', alias?: string  } 
  
export interface TaskUpdateOneWithoutReviewsInput {
  create?: TaskCreateWithoutReviewsInput | null
  update?: TaskUpdateWithoutReviewsDataInput | null
  upsert?: TaskUpsertWithoutReviewsInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: TaskWhereUniqueInput | null
}
export type TaskUpdateOneWithoutReviewsInputInputObject =
  | Extract<keyof TaskUpdateOneWithoutReviewsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TaskUpdateWithoutReviewsDataInput {
  title?: string | null
  description?: string | null
  location?: string | null
  eventTime?: string | null
  featured?: boolean | null
  flagged_as_objectionable?: boolean | null
  created_by_joinmi?: boolean | null
  task_type?: prisma.TASK_TYPE | null
  active?: boolean | null
  expiration?: string | null
  creator?: UserUpdateOneRequiredInput | null
  participants?: UserUpdateManyWithoutTasksInput | null
  conversations?: ConversationUpdateManyWithoutTaskInput | null
  category?: CategoryUpdateOneRequiredWithoutTasksInput | null
}
export type TaskUpdateWithoutReviewsDataInputInputObject =
  | Extract<keyof TaskUpdateWithoutReviewsDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'eventTime', alias?: string  } 
  | { name: 'featured', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'created_by_joinmi', alias?: string  } 
  | { name: 'task_type', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  | { name: 'participants', alias?: string  } 
  | { name: 'conversations', alias?: string  } 
  | { name: 'category', alias?: string  } 
  
export interface UserUpdateManyWithoutTasksInput {
  create?: UserCreateWithoutTasksInput[]
  delete?: UserWhereUniqueInput[]
  connect?: UserWhereUniqueInput[]
  set?: UserWhereUniqueInput[]
  disconnect?: UserWhereUniqueInput[]
  update?: UserUpdateWithWhereUniqueWithoutTasksInput[]
  upsert?: UserUpsertWithWhereUniqueWithoutTasksInput[]
  deleteMany?: UserScalarWhereInput[]
  updateMany?: UserUpdateManyWithWhereNestedInput[]
}
export type UserUpdateManyWithoutTasksInputInputObject =
  | Extract<keyof UserUpdateManyWithoutTasksInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserUpdateWithWhereUniqueWithoutTasksInput {
  where?: UserWhereUniqueInput
  data?: UserUpdateWithoutTasksDataInput
}
export type UserUpdateWithWhereUniqueWithoutTasksInputInputObject =
  | Extract<keyof UserUpdateWithWhereUniqueWithoutTasksInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateWithoutTasksDataInput {
  email?: string | null
  token?: string | null
  name?: string | null
  username?: string | null
  description?: string | null
  major?: string | null
  townYouGrewUpIn?: string | null
  favoriteHobby?: string | null
  photo_url?: string | null
  cover_photo_url?: string | null
  flagged_as_objectionable?: boolean | null
  view_objectionable_content?: boolean | null
  school?: string | null
  about_me?: string | null
  receive_push_notifications?: boolean | null
  oneSignalPlayerId?: string | null
  fcm_token?: string | null
  facebook_social_link?: string | null
  twitter_social_link?: string | null
  instagram_social_link?: string | null
  snapchat_social_link?: string | null
  role?: prisma.ROLE | null
  notifications?: NotificationUpdateManyWithoutUserInput | null
  block_list?: UserUpdateManyInput | null
  reviews?: ReviewUpdateManyWithoutReviewerInput | null
  categories?: UserCategoryUpdateManyWithoutUserInput | null
  conversations?: ConversationUpdateManyWithoutParticipantsInput | null
}
export type UserUpdateWithoutTasksDataInputInputObject =
  | Extract<keyof UserUpdateWithoutTasksDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'token', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'major', alias?: string  } 
  | { name: 'townYouGrewUpIn', alias?: string  } 
  | { name: 'favoriteHobby', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'cover_photo_url', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'view_objectionable_content', alias?: string  } 
  | { name: 'school', alias?: string  } 
  | { name: 'about_me', alias?: string  } 
  | { name: 'receive_push_notifications', alias?: string  } 
  | { name: 'oneSignalPlayerId', alias?: string  } 
  | { name: 'fcm_token', alias?: string  } 
  | { name: 'facebook_social_link', alias?: string  } 
  | { name: 'twitter_social_link', alias?: string  } 
  | { name: 'instagram_social_link', alias?: string  } 
  | { name: 'snapchat_social_link', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'notifications', alias?: string  } 
  | { name: 'block_list', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  | { name: 'conversations', alias?: string  } 
  
export interface UserCategoryUpdateManyWithoutUserInput {
  create?: UserCategoryCreateWithoutUserInput[]
  delete?: UserCategoryWhereUniqueInput[]
  connect?: UserCategoryWhereUniqueInput[]
  set?: UserCategoryWhereUniqueInput[]
  disconnect?: UserCategoryWhereUniqueInput[]
  update?: UserCategoryUpdateWithWhereUniqueWithoutUserInput[]
  upsert?: UserCategoryUpsertWithWhereUniqueWithoutUserInput[]
  deleteMany?: UserCategoryScalarWhereInput[]
  updateMany?: UserCategoryUpdateManyWithWhereNestedInput[]
}
export type UserCategoryUpdateManyWithoutUserInputInputObject =
  | Extract<keyof UserCategoryUpdateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserCategoryUpdateWithWhereUniqueWithoutUserInput {
  where?: UserCategoryWhereUniqueInput
  data?: UserCategoryUpdateWithoutUserDataInput
}
export type UserCategoryUpdateWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof UserCategoryUpdateWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserCategoryUpdateWithoutUserDataInput {
  category?: CategoryUpdateOneWithoutUserCategoriesInput | null
  selected?: boolean | null
}
export type UserCategoryUpdateWithoutUserDataInputInputObject =
  | Extract<keyof UserCategoryUpdateWithoutUserDataInput, string>
  | { name: 'category', alias?: string  } 
  | { name: 'selected', alias?: string  } 
  
export interface CategoryUpdateOneWithoutUserCategoriesInput {
  create?: CategoryCreateWithoutUserCategoriesInput | null
  update?: CategoryUpdateWithoutUserCategoriesDataInput | null
  upsert?: CategoryUpsertWithoutUserCategoriesInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: CategoryWhereUniqueInput | null
}
export type CategoryUpdateOneWithoutUserCategoriesInputInputObject =
  | Extract<keyof CategoryUpdateOneWithoutUserCategoriesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CategoryUpdateWithoutUserCategoriesDataInput {
  title?: string | null
  image_url?: string | null
  tasks?: TaskUpdateManyWithoutCategoryInput | null
}
export type CategoryUpdateWithoutUserCategoriesDataInputInputObject =
  | Extract<keyof CategoryUpdateWithoutUserCategoriesDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'image_url', alias?: string  } 
  | { name: 'tasks', alias?: string  } 
  
export interface TaskUpdateManyWithoutCategoryInput {
  create?: TaskCreateWithoutCategoryInput[]
  delete?: TaskWhereUniqueInput[]
  connect?: TaskWhereUniqueInput[]
  set?: TaskWhereUniqueInput[]
  disconnect?: TaskWhereUniqueInput[]
  update?: TaskUpdateWithWhereUniqueWithoutCategoryInput[]
  upsert?: TaskUpsertWithWhereUniqueWithoutCategoryInput[]
  deleteMany?: TaskScalarWhereInput[]
  updateMany?: TaskUpdateManyWithWhereNestedInput[]
}
export type TaskUpdateManyWithoutCategoryInputInputObject =
  | Extract<keyof TaskUpdateManyWithoutCategoryInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface TaskUpdateWithWhereUniqueWithoutCategoryInput {
  where?: TaskWhereUniqueInput
  data?: TaskUpdateWithoutCategoryDataInput
}
export type TaskUpdateWithWhereUniqueWithoutCategoryInputInputObject =
  | Extract<keyof TaskUpdateWithWhereUniqueWithoutCategoryInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TaskUpdateWithoutCategoryDataInput {
  title?: string | null
  description?: string | null
  location?: string | null
  eventTime?: string | null
  featured?: boolean | null
  flagged_as_objectionable?: boolean | null
  created_by_joinmi?: boolean | null
  task_type?: prisma.TASK_TYPE | null
  active?: boolean | null
  expiration?: string | null
  creator?: UserUpdateOneRequiredInput | null
  participants?: UserUpdateManyWithoutTasksInput | null
  conversations?: ConversationUpdateManyWithoutTaskInput | null
  reviews?: ReviewUpdateManyWithoutTaskInput | null
}
export type TaskUpdateWithoutCategoryDataInputInputObject =
  | Extract<keyof TaskUpdateWithoutCategoryDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'eventTime', alias?: string  } 
  | { name: 'featured', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'created_by_joinmi', alias?: string  } 
  | { name: 'task_type', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  | { name: 'participants', alias?: string  } 
  | { name: 'conversations', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  
export interface ReviewUpdateManyWithoutTaskInput {
  create?: ReviewCreateWithoutTaskInput[]
  delete?: ReviewWhereUniqueInput[]
  connect?: ReviewWhereUniqueInput[]
  set?: ReviewWhereUniqueInput[]
  disconnect?: ReviewWhereUniqueInput[]
  update?: ReviewUpdateWithWhereUniqueWithoutTaskInput[]
  upsert?: ReviewUpsertWithWhereUniqueWithoutTaskInput[]
  deleteMany?: ReviewScalarWhereInput[]
  updateMany?: ReviewUpdateManyWithWhereNestedInput[]
}
export type ReviewUpdateManyWithoutTaskInputInputObject =
  | Extract<keyof ReviewUpdateManyWithoutTaskInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ReviewUpdateWithWhereUniqueWithoutTaskInput {
  where?: ReviewWhereUniqueInput
  data?: ReviewUpdateWithoutTaskDataInput
}
export type ReviewUpdateWithWhereUniqueWithoutTaskInputInputObject =
  | Extract<keyof ReviewUpdateWithWhereUniqueWithoutTaskInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ReviewUpdateWithoutTaskDataInput {
  title?: string | null
  description?: string | null
  rating?: prisma.RATING | null
  reviewer?: UserUpdateOneRequiredWithoutReviewsInput | null
}
export type ReviewUpdateWithoutTaskDataInputInputObject =
  | Extract<keyof ReviewUpdateWithoutTaskDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'reviewer', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutReviewsInput {
  create?: UserCreateWithoutReviewsInput | null
  update?: UserUpdateWithoutReviewsDataInput | null
  upsert?: UserUpsertWithoutReviewsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutReviewsInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutReviewsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutReviewsDataInput {
  email?: string | null
  token?: string | null
  name?: string | null
  username?: string | null
  description?: string | null
  major?: string | null
  townYouGrewUpIn?: string | null
  favoriteHobby?: string | null
  photo_url?: string | null
  cover_photo_url?: string | null
  flagged_as_objectionable?: boolean | null
  view_objectionable_content?: boolean | null
  school?: string | null
  about_me?: string | null
  receive_push_notifications?: boolean | null
  oneSignalPlayerId?: string | null
  fcm_token?: string | null
  facebook_social_link?: string | null
  twitter_social_link?: string | null
  instagram_social_link?: string | null
  snapchat_social_link?: string | null
  role?: prisma.ROLE | null
  notifications?: NotificationUpdateManyWithoutUserInput | null
  block_list?: UserUpdateManyInput | null
  tasks?: TaskUpdateManyWithoutParticipantsInput | null
  categories?: UserCategoryUpdateManyWithoutUserInput | null
  conversations?: ConversationUpdateManyWithoutParticipantsInput | null
}
export type UserUpdateWithoutReviewsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutReviewsDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'token', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'major', alias?: string  } 
  | { name: 'townYouGrewUpIn', alias?: string  } 
  | { name: 'favoriteHobby', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'cover_photo_url', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'view_objectionable_content', alias?: string  } 
  | { name: 'school', alias?: string  } 
  | { name: 'about_me', alias?: string  } 
  | { name: 'receive_push_notifications', alias?: string  } 
  | { name: 'oneSignalPlayerId', alias?: string  } 
  | { name: 'fcm_token', alias?: string  } 
  | { name: 'facebook_social_link', alias?: string  } 
  | { name: 'twitter_social_link', alias?: string  } 
  | { name: 'instagram_social_link', alias?: string  } 
  | { name: 'snapchat_social_link', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'notifications', alias?: string  } 
  | { name: 'block_list', alias?: string  } 
  | { name: 'tasks', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  | { name: 'conversations', alias?: string  } 
  
export interface ConversationUpdateManyWithoutParticipantsInput {
  create?: ConversationCreateWithoutParticipantsInput[]
  delete?: ConversationWhereUniqueInput[]
  connect?: ConversationWhereUniqueInput[]
  set?: ConversationWhereUniqueInput[]
  disconnect?: ConversationWhereUniqueInput[]
  update?: ConversationUpdateWithWhereUniqueWithoutParticipantsInput[]
  upsert?: ConversationUpsertWithWhereUniqueWithoutParticipantsInput[]
  deleteMany?: ConversationScalarWhereInput[]
  updateMany?: ConversationUpdateManyWithWhereNestedInput[]
}
export type ConversationUpdateManyWithoutParticipantsInputInputObject =
  | Extract<keyof ConversationUpdateManyWithoutParticipantsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ConversationUpdateWithWhereUniqueWithoutParticipantsInput {
  where?: ConversationWhereUniqueInput
  data?: ConversationUpdateWithoutParticipantsDataInput
}
export type ConversationUpdateWithWhereUniqueWithoutParticipantsInputInputObject =
  | Extract<keyof ConversationUpdateWithWhereUniqueWithoutParticipantsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ConversationUpdateWithoutParticipantsDataInput {
  description?: string | null
  active?: boolean | null
  task?: TaskUpdateOneWithoutConversationsInput | null
}
export type ConversationUpdateWithoutParticipantsDataInputInputObject =
  | Extract<keyof ConversationUpdateWithoutParticipantsDataInput, string>
  | { name: 'description', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'task', alias?: string  } 
  
export interface TaskUpdateOneWithoutConversationsInput {
  create?: TaskCreateWithoutConversationsInput | null
  update?: TaskUpdateWithoutConversationsDataInput | null
  upsert?: TaskUpsertWithoutConversationsInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: TaskWhereUniqueInput | null
}
export type TaskUpdateOneWithoutConversationsInputInputObject =
  | Extract<keyof TaskUpdateOneWithoutConversationsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TaskUpdateWithoutConversationsDataInput {
  title?: string | null
  description?: string | null
  location?: string | null
  eventTime?: string | null
  featured?: boolean | null
  flagged_as_objectionable?: boolean | null
  created_by_joinmi?: boolean | null
  task_type?: prisma.TASK_TYPE | null
  active?: boolean | null
  expiration?: string | null
  creator?: UserUpdateOneRequiredInput | null
  participants?: UserUpdateManyWithoutTasksInput | null
  reviews?: ReviewUpdateManyWithoutTaskInput | null
  category?: CategoryUpdateOneRequiredWithoutTasksInput | null
}
export type TaskUpdateWithoutConversationsDataInputInputObject =
  | Extract<keyof TaskUpdateWithoutConversationsDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'eventTime', alias?: string  } 
  | { name: 'featured', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'created_by_joinmi', alias?: string  } 
  | { name: 'task_type', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  | { name: 'participants', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  | { name: 'category', alias?: string  } 
  
export interface CategoryUpdateOneRequiredWithoutTasksInput {
  create?: CategoryCreateWithoutTasksInput | null
  update?: CategoryUpdateWithoutTasksDataInput | null
  upsert?: CategoryUpsertWithoutTasksInput | null
  connect?: CategoryWhereUniqueInput | null
}
export type CategoryUpdateOneRequiredWithoutTasksInputInputObject =
  | Extract<keyof CategoryUpdateOneRequiredWithoutTasksInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CategoryUpdateWithoutTasksDataInput {
  title?: string | null
  image_url?: string | null
  userCategories?: UserCategoryUpdateManyWithoutCategoryInput | null
}
export type CategoryUpdateWithoutTasksDataInputInputObject =
  | Extract<keyof CategoryUpdateWithoutTasksDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'image_url', alias?: string  } 
  | { name: 'userCategories', alias?: string  } 
  
export interface UserCategoryUpdateManyWithoutCategoryInput {
  create?: UserCategoryCreateWithoutCategoryInput[]
  delete?: UserCategoryWhereUniqueInput[]
  connect?: UserCategoryWhereUniqueInput[]
  set?: UserCategoryWhereUniqueInput[]
  disconnect?: UserCategoryWhereUniqueInput[]
  update?: UserCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
  upsert?: UserCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
  deleteMany?: UserCategoryScalarWhereInput[]
  updateMany?: UserCategoryUpdateManyWithWhereNestedInput[]
}
export type UserCategoryUpdateManyWithoutCategoryInputInputObject =
  | Extract<keyof UserCategoryUpdateManyWithoutCategoryInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserCategoryUpdateWithWhereUniqueWithoutCategoryInput {
  where?: UserCategoryWhereUniqueInput
  data?: UserCategoryUpdateWithoutCategoryDataInput
}
export type UserCategoryUpdateWithWhereUniqueWithoutCategoryInputInputObject =
  | Extract<keyof UserCategoryUpdateWithWhereUniqueWithoutCategoryInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserCategoryUpdateWithoutCategoryDataInput {
  selected?: boolean | null
  user?: UserUpdateOneWithoutCategoriesInput | null
}
export type UserCategoryUpdateWithoutCategoryDataInputInputObject =
  | Extract<keyof UserCategoryUpdateWithoutCategoryDataInput, string>
  | { name: 'selected', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserUpdateOneWithoutCategoriesInput {
  create?: UserCreateWithoutCategoriesInput | null
  update?: UserUpdateWithoutCategoriesDataInput | null
  upsert?: UserUpsertWithoutCategoriesInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneWithoutCategoriesInputInputObject =
  | Extract<keyof UserUpdateOneWithoutCategoriesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutCategoriesDataInput {
  email?: string | null
  token?: string | null
  name?: string | null
  username?: string | null
  description?: string | null
  major?: string | null
  townYouGrewUpIn?: string | null
  favoriteHobby?: string | null
  photo_url?: string | null
  cover_photo_url?: string | null
  flagged_as_objectionable?: boolean | null
  view_objectionable_content?: boolean | null
  school?: string | null
  about_me?: string | null
  receive_push_notifications?: boolean | null
  oneSignalPlayerId?: string | null
  fcm_token?: string | null
  facebook_social_link?: string | null
  twitter_social_link?: string | null
  instagram_social_link?: string | null
  snapchat_social_link?: string | null
  role?: prisma.ROLE | null
  notifications?: NotificationUpdateManyWithoutUserInput | null
  block_list?: UserUpdateManyInput | null
  tasks?: TaskUpdateManyWithoutParticipantsInput | null
  reviews?: ReviewUpdateManyWithoutReviewerInput | null
  conversations?: ConversationUpdateManyWithoutParticipantsInput | null
}
export type UserUpdateWithoutCategoriesDataInputInputObject =
  | Extract<keyof UserUpdateWithoutCategoriesDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'token', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'major', alias?: string  } 
  | { name: 'townYouGrewUpIn', alias?: string  } 
  | { name: 'favoriteHobby', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'cover_photo_url', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'view_objectionable_content', alias?: string  } 
  | { name: 'school', alias?: string  } 
  | { name: 'about_me', alias?: string  } 
  | { name: 'receive_push_notifications', alias?: string  } 
  | { name: 'oneSignalPlayerId', alias?: string  } 
  | { name: 'fcm_token', alias?: string  } 
  | { name: 'facebook_social_link', alias?: string  } 
  | { name: 'twitter_social_link', alias?: string  } 
  | { name: 'instagram_social_link', alias?: string  } 
  | { name: 'snapchat_social_link', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'notifications', alias?: string  } 
  | { name: 'block_list', alias?: string  } 
  | { name: 'tasks', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  | { name: 'conversations', alias?: string  } 
  
export interface UserUpsertWithoutCategoriesInput {
  update?: UserUpdateWithoutCategoriesDataInput
  create?: UserCreateWithoutCategoriesInput
}
export type UserUpsertWithoutCategoriesInputInputObject =
  | Extract<keyof UserUpsertWithoutCategoriesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserCategoryUpsertWithWhereUniqueWithoutCategoryInput {
  where?: UserCategoryWhereUniqueInput
  update?: UserCategoryUpdateWithoutCategoryDataInput
  create?: UserCategoryCreateWithoutCategoryInput
}
export type UserCategoryUpsertWithWhereUniqueWithoutCategoryInputInputObject =
  | Extract<keyof UserCategoryUpsertWithWhereUniqueWithoutCategoryInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserCategoryScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  selected?: boolean | null
  selected_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: UserCategoryScalarWhereInput[]
  OR?: UserCategoryScalarWhereInput[]
  NOT?: UserCategoryScalarWhereInput[]
}
export type UserCategoryScalarWhereInputInputObject =
  | Extract<keyof UserCategoryScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'selected', alias?: string  } 
  | { name: 'selected_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserCategoryUpdateManyWithWhereNestedInput {
  where?: UserCategoryScalarWhereInput
  data?: UserCategoryUpdateManyDataInput
}
export type UserCategoryUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof UserCategoryUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserCategoryUpdateManyDataInput {
  selected?: boolean | null
}
export type UserCategoryUpdateManyDataInputInputObject =
  | Extract<keyof UserCategoryUpdateManyDataInput, string>
  | { name: 'selected', alias?: string  } 
  
export interface CategoryUpsertWithoutTasksInput {
  update?: CategoryUpdateWithoutTasksDataInput
  create?: CategoryCreateWithoutTasksInput
}
export type CategoryUpsertWithoutTasksInputInputObject =
  | Extract<keyof CategoryUpsertWithoutTasksInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TaskUpsertWithoutConversationsInput {
  update?: TaskUpdateWithoutConversationsDataInput
  create?: TaskCreateWithoutConversationsInput
}
export type TaskUpsertWithoutConversationsInputInputObject =
  | Extract<keyof TaskUpsertWithoutConversationsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ConversationUpsertWithWhereUniqueWithoutParticipantsInput {
  where?: ConversationWhereUniqueInput
  update?: ConversationUpdateWithoutParticipantsDataInput
  create?: ConversationCreateWithoutParticipantsInput
}
export type ConversationUpsertWithWhereUniqueWithoutParticipantsInputInputObject =
  | Extract<keyof ConversationUpsertWithWhereUniqueWithoutParticipantsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ConversationScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  active?: boolean | null
  active_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ConversationScalarWhereInput[]
  OR?: ConversationScalarWhereInput[]
  NOT?: ConversationScalarWhereInput[]
}
export type ConversationScalarWhereInputInputObject =
  | Extract<keyof ConversationScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'active_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ConversationUpdateManyWithWhereNestedInput {
  where?: ConversationScalarWhereInput
  data?: ConversationUpdateManyDataInput
}
export type ConversationUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ConversationUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ConversationUpdateManyDataInput {
  description?: string | null
  active?: boolean | null
}
export type ConversationUpdateManyDataInputInputObject =
  | Extract<keyof ConversationUpdateManyDataInput, string>
  | { name: 'description', alias?: string  } 
  | { name: 'active', alias?: string  } 
  
export interface UserUpsertWithoutReviewsInput {
  update?: UserUpdateWithoutReviewsDataInput
  create?: UserCreateWithoutReviewsInput
}
export type UserUpsertWithoutReviewsInputInputObject =
  | Extract<keyof UserUpsertWithoutReviewsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ReviewUpsertWithWhereUniqueWithoutTaskInput {
  where?: ReviewWhereUniqueInput
  update?: ReviewUpdateWithoutTaskDataInput
  create?: ReviewCreateWithoutTaskInput
}
export type ReviewUpsertWithWhereUniqueWithoutTaskInputInputObject =
  | Extract<keyof ReviewUpsertWithWhereUniqueWithoutTaskInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ReviewScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  rating?: prisma.RATING | null
  rating_not?: prisma.RATING | null
  rating_in?: prisma.RATING[]
  rating_not_in?: prisma.RATING[]
  AND?: ReviewScalarWhereInput[]
  OR?: ReviewScalarWhereInput[]
  NOT?: ReviewScalarWhereInput[]
}
export type ReviewScalarWhereInputInputObject =
  | Extract<keyof ReviewScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'rating_not', alias?: string  } 
  | { name: 'rating_in', alias?: string  } 
  | { name: 'rating_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ReviewUpdateManyWithWhereNestedInput {
  where?: ReviewScalarWhereInput
  data?: ReviewUpdateManyDataInput
}
export type ReviewUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ReviewUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ReviewUpdateManyDataInput {
  title?: string | null
  description?: string | null
  rating?: prisma.RATING | null
}
export type ReviewUpdateManyDataInputInputObject =
  | Extract<keyof ReviewUpdateManyDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  
export interface TaskUpsertWithWhereUniqueWithoutCategoryInput {
  where?: TaskWhereUniqueInput
  update?: TaskUpdateWithoutCategoryDataInput
  create?: TaskCreateWithoutCategoryInput
}
export type TaskUpsertWithWhereUniqueWithoutCategoryInputInputObject =
  | Extract<keyof TaskUpsertWithWhereUniqueWithoutCategoryInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TaskScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  location?: string | null
  location_not?: string | null
  location_in?: string[]
  location_not_in?: string[]
  location_lt?: string | null
  location_lte?: string | null
  location_gt?: string | null
  location_gte?: string | null
  location_contains?: string | null
  location_not_contains?: string | null
  location_starts_with?: string | null
  location_not_starts_with?: string | null
  location_ends_with?: string | null
  location_not_ends_with?: string | null
  eventTime?: string | null
  eventTime_not?: string | null
  eventTime_in?: string[]
  eventTime_not_in?: string[]
  eventTime_lt?: string | null
  eventTime_lte?: string | null
  eventTime_gt?: string | null
  eventTime_gte?: string | null
  featured?: boolean | null
  featured_not?: boolean | null
  flagged_as_objectionable?: boolean | null
  flagged_as_objectionable_not?: boolean | null
  created_by_joinmi?: boolean | null
  created_by_joinmi_not?: boolean | null
  task_type?: prisma.TASK_TYPE | null
  task_type_not?: prisma.TASK_TYPE | null
  task_type_in?: prisma.TASK_TYPE[]
  task_type_not_in?: prisma.TASK_TYPE[]
  active?: boolean | null
  active_not?: boolean | null
  expiration?: string | null
  expiration_not?: string | null
  expiration_in?: string[]
  expiration_not_in?: string[]
  expiration_lt?: string | null
  expiration_lte?: string | null
  expiration_gt?: string | null
  expiration_gte?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: TaskScalarWhereInput[]
  OR?: TaskScalarWhereInput[]
  NOT?: TaskScalarWhereInput[]
}
export type TaskScalarWhereInputInputObject =
  | Extract<keyof TaskScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'location_not', alias?: string  } 
  | { name: 'location_in', alias?: string  } 
  | { name: 'location_not_in', alias?: string  } 
  | { name: 'location_lt', alias?: string  } 
  | { name: 'location_lte', alias?: string  } 
  | { name: 'location_gt', alias?: string  } 
  | { name: 'location_gte', alias?: string  } 
  | { name: 'location_contains', alias?: string  } 
  | { name: 'location_not_contains', alias?: string  } 
  | { name: 'location_starts_with', alias?: string  } 
  | { name: 'location_not_starts_with', alias?: string  } 
  | { name: 'location_ends_with', alias?: string  } 
  | { name: 'location_not_ends_with', alias?: string  } 
  | { name: 'eventTime', alias?: string  } 
  | { name: 'eventTime_not', alias?: string  } 
  | { name: 'eventTime_in', alias?: string  } 
  | { name: 'eventTime_not_in', alias?: string  } 
  | { name: 'eventTime_lt', alias?: string  } 
  | { name: 'eventTime_lte', alias?: string  } 
  | { name: 'eventTime_gt', alias?: string  } 
  | { name: 'eventTime_gte', alias?: string  } 
  | { name: 'featured', alias?: string  } 
  | { name: 'featured_not', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'flagged_as_objectionable_not', alias?: string  } 
  | { name: 'created_by_joinmi', alias?: string  } 
  | { name: 'created_by_joinmi_not', alias?: string  } 
  | { name: 'task_type', alias?: string  } 
  | { name: 'task_type_not', alias?: string  } 
  | { name: 'task_type_in', alias?: string  } 
  | { name: 'task_type_not_in', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'active_not', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'expiration_not', alias?: string  } 
  | { name: 'expiration_in', alias?: string  } 
  | { name: 'expiration_not_in', alias?: string  } 
  | { name: 'expiration_lt', alias?: string  } 
  | { name: 'expiration_lte', alias?: string  } 
  | { name: 'expiration_gt', alias?: string  } 
  | { name: 'expiration_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TaskUpdateManyWithWhereNestedInput {
  where?: TaskScalarWhereInput
  data?: TaskUpdateManyDataInput
}
export type TaskUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof TaskUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TaskUpdateManyDataInput {
  title?: string | null
  description?: string | null
  location?: string | null
  eventTime?: string | null
  featured?: boolean | null
  flagged_as_objectionable?: boolean | null
  created_by_joinmi?: boolean | null
  task_type?: prisma.TASK_TYPE | null
  active?: boolean | null
  expiration?: string | null
}
export type TaskUpdateManyDataInputInputObject =
  | Extract<keyof TaskUpdateManyDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'eventTime', alias?: string  } 
  | { name: 'featured', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'created_by_joinmi', alias?: string  } 
  | { name: 'task_type', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  
export interface CategoryUpsertWithoutUserCategoriesInput {
  update?: CategoryUpdateWithoutUserCategoriesDataInput
  create?: CategoryCreateWithoutUserCategoriesInput
}
export type CategoryUpsertWithoutUserCategoriesInputInputObject =
  | Extract<keyof CategoryUpsertWithoutUserCategoriesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserCategoryUpsertWithWhereUniqueWithoutUserInput {
  where?: UserCategoryWhereUniqueInput
  update?: UserCategoryUpdateWithoutUserDataInput
  create?: UserCategoryCreateWithoutUserInput
}
export type UserCategoryUpsertWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof UserCategoryUpsertWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpsertWithWhereUniqueWithoutTasksInput {
  where?: UserWhereUniqueInput
  update?: UserUpdateWithoutTasksDataInput
  create?: UserCreateWithoutTasksInput
}
export type UserUpsertWithWhereUniqueWithoutTasksInputInputObject =
  | Extract<keyof UserUpsertWithWhereUniqueWithoutTasksInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  token?: string | null
  token_not?: string | null
  token_in?: string[]
  token_not_in?: string[]
  token_lt?: string | null
  token_lte?: string | null
  token_gt?: string | null
  token_gte?: string | null
  token_contains?: string | null
  token_not_contains?: string | null
  token_starts_with?: string | null
  token_not_starts_with?: string | null
  token_ends_with?: string | null
  token_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  username?: string | null
  username_not?: string | null
  username_in?: string[]
  username_not_in?: string[]
  username_lt?: string | null
  username_lte?: string | null
  username_gt?: string | null
  username_gte?: string | null
  username_contains?: string | null
  username_not_contains?: string | null
  username_starts_with?: string | null
  username_not_starts_with?: string | null
  username_ends_with?: string | null
  username_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  major?: string | null
  major_not?: string | null
  major_in?: string[]
  major_not_in?: string[]
  major_lt?: string | null
  major_lte?: string | null
  major_gt?: string | null
  major_gte?: string | null
  major_contains?: string | null
  major_not_contains?: string | null
  major_starts_with?: string | null
  major_not_starts_with?: string | null
  major_ends_with?: string | null
  major_not_ends_with?: string | null
  townYouGrewUpIn?: string | null
  townYouGrewUpIn_not?: string | null
  townYouGrewUpIn_in?: string[]
  townYouGrewUpIn_not_in?: string[]
  townYouGrewUpIn_lt?: string | null
  townYouGrewUpIn_lte?: string | null
  townYouGrewUpIn_gt?: string | null
  townYouGrewUpIn_gte?: string | null
  townYouGrewUpIn_contains?: string | null
  townYouGrewUpIn_not_contains?: string | null
  townYouGrewUpIn_starts_with?: string | null
  townYouGrewUpIn_not_starts_with?: string | null
  townYouGrewUpIn_ends_with?: string | null
  townYouGrewUpIn_not_ends_with?: string | null
  favoriteHobby?: string | null
  favoriteHobby_not?: string | null
  favoriteHobby_in?: string[]
  favoriteHobby_not_in?: string[]
  favoriteHobby_lt?: string | null
  favoriteHobby_lte?: string | null
  favoriteHobby_gt?: string | null
  favoriteHobby_gte?: string | null
  favoriteHobby_contains?: string | null
  favoriteHobby_not_contains?: string | null
  favoriteHobby_starts_with?: string | null
  favoriteHobby_not_starts_with?: string | null
  favoriteHobby_ends_with?: string | null
  favoriteHobby_not_ends_with?: string | null
  photo_url?: string | null
  photo_url_not?: string | null
  photo_url_in?: string[]
  photo_url_not_in?: string[]
  photo_url_lt?: string | null
  photo_url_lte?: string | null
  photo_url_gt?: string | null
  photo_url_gte?: string | null
  photo_url_contains?: string | null
  photo_url_not_contains?: string | null
  photo_url_starts_with?: string | null
  photo_url_not_starts_with?: string | null
  photo_url_ends_with?: string | null
  photo_url_not_ends_with?: string | null
  cover_photo_url?: string | null
  cover_photo_url_not?: string | null
  cover_photo_url_in?: string[]
  cover_photo_url_not_in?: string[]
  cover_photo_url_lt?: string | null
  cover_photo_url_lte?: string | null
  cover_photo_url_gt?: string | null
  cover_photo_url_gte?: string | null
  cover_photo_url_contains?: string | null
  cover_photo_url_not_contains?: string | null
  cover_photo_url_starts_with?: string | null
  cover_photo_url_not_starts_with?: string | null
  cover_photo_url_ends_with?: string | null
  cover_photo_url_not_ends_with?: string | null
  flagged_as_objectionable?: boolean | null
  flagged_as_objectionable_not?: boolean | null
  view_objectionable_content?: boolean | null
  view_objectionable_content_not?: boolean | null
  school?: string | null
  school_not?: string | null
  school_in?: string[]
  school_not_in?: string[]
  school_lt?: string | null
  school_lte?: string | null
  school_gt?: string | null
  school_gte?: string | null
  school_contains?: string | null
  school_not_contains?: string | null
  school_starts_with?: string | null
  school_not_starts_with?: string | null
  school_ends_with?: string | null
  school_not_ends_with?: string | null
  about_me?: string | null
  about_me_not?: string | null
  about_me_in?: string[]
  about_me_not_in?: string[]
  about_me_lt?: string | null
  about_me_lte?: string | null
  about_me_gt?: string | null
  about_me_gte?: string | null
  about_me_contains?: string | null
  about_me_not_contains?: string | null
  about_me_starts_with?: string | null
  about_me_not_starts_with?: string | null
  about_me_ends_with?: string | null
  about_me_not_ends_with?: string | null
  receive_push_notifications?: boolean | null
  receive_push_notifications_not?: boolean | null
  oneSignalPlayerId?: string | null
  oneSignalPlayerId_not?: string | null
  oneSignalPlayerId_in?: string[]
  oneSignalPlayerId_not_in?: string[]
  oneSignalPlayerId_lt?: string | null
  oneSignalPlayerId_lte?: string | null
  oneSignalPlayerId_gt?: string | null
  oneSignalPlayerId_gte?: string | null
  oneSignalPlayerId_contains?: string | null
  oneSignalPlayerId_not_contains?: string | null
  oneSignalPlayerId_starts_with?: string | null
  oneSignalPlayerId_not_starts_with?: string | null
  oneSignalPlayerId_ends_with?: string | null
  oneSignalPlayerId_not_ends_with?: string | null
  fcm_token?: string | null
  fcm_token_not?: string | null
  fcm_token_in?: string[]
  fcm_token_not_in?: string[]
  fcm_token_lt?: string | null
  fcm_token_lte?: string | null
  fcm_token_gt?: string | null
  fcm_token_gte?: string | null
  fcm_token_contains?: string | null
  fcm_token_not_contains?: string | null
  fcm_token_starts_with?: string | null
  fcm_token_not_starts_with?: string | null
  fcm_token_ends_with?: string | null
  fcm_token_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  facebook_social_link?: string | null
  facebook_social_link_not?: string | null
  facebook_social_link_in?: string[]
  facebook_social_link_not_in?: string[]
  facebook_social_link_lt?: string | null
  facebook_social_link_lte?: string | null
  facebook_social_link_gt?: string | null
  facebook_social_link_gte?: string | null
  facebook_social_link_contains?: string | null
  facebook_social_link_not_contains?: string | null
  facebook_social_link_starts_with?: string | null
  facebook_social_link_not_starts_with?: string | null
  facebook_social_link_ends_with?: string | null
  facebook_social_link_not_ends_with?: string | null
  twitter_social_link?: string | null
  twitter_social_link_not?: string | null
  twitter_social_link_in?: string[]
  twitter_social_link_not_in?: string[]
  twitter_social_link_lt?: string | null
  twitter_social_link_lte?: string | null
  twitter_social_link_gt?: string | null
  twitter_social_link_gte?: string | null
  twitter_social_link_contains?: string | null
  twitter_social_link_not_contains?: string | null
  twitter_social_link_starts_with?: string | null
  twitter_social_link_not_starts_with?: string | null
  twitter_social_link_ends_with?: string | null
  twitter_social_link_not_ends_with?: string | null
  instagram_social_link?: string | null
  instagram_social_link_not?: string | null
  instagram_social_link_in?: string[]
  instagram_social_link_not_in?: string[]
  instagram_social_link_lt?: string | null
  instagram_social_link_lte?: string | null
  instagram_social_link_gt?: string | null
  instagram_social_link_gte?: string | null
  instagram_social_link_contains?: string | null
  instagram_social_link_not_contains?: string | null
  instagram_social_link_starts_with?: string | null
  instagram_social_link_not_starts_with?: string | null
  instagram_social_link_ends_with?: string | null
  instagram_social_link_not_ends_with?: string | null
  snapchat_social_link?: string | null
  snapchat_social_link_not?: string | null
  snapchat_social_link_in?: string[]
  snapchat_social_link_not_in?: string[]
  snapchat_social_link_lt?: string | null
  snapchat_social_link_lte?: string | null
  snapchat_social_link_gt?: string | null
  snapchat_social_link_gte?: string | null
  snapchat_social_link_contains?: string | null
  snapchat_social_link_not_contains?: string | null
  snapchat_social_link_starts_with?: string | null
  snapchat_social_link_not_starts_with?: string | null
  snapchat_social_link_ends_with?: string | null
  snapchat_social_link_not_ends_with?: string | null
  role?: prisma.ROLE | null
  role_not?: prisma.ROLE | null
  role_in?: prisma.ROLE[]
  role_not_in?: prisma.ROLE[]
  AND?: UserScalarWhereInput[]
  OR?: UserScalarWhereInput[]
  NOT?: UserScalarWhereInput[]
}
export type UserScalarWhereInputInputObject =
  | Extract<keyof UserScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'token', alias?: string  } 
  | { name: 'token_not', alias?: string  } 
  | { name: 'token_in', alias?: string  } 
  | { name: 'token_not_in', alias?: string  } 
  | { name: 'token_lt', alias?: string  } 
  | { name: 'token_lte', alias?: string  } 
  | { name: 'token_gt', alias?: string  } 
  | { name: 'token_gte', alias?: string  } 
  | { name: 'token_contains', alias?: string  } 
  | { name: 'token_not_contains', alias?: string  } 
  | { name: 'token_starts_with', alias?: string  } 
  | { name: 'token_not_starts_with', alias?: string  } 
  | { name: 'token_ends_with', alias?: string  } 
  | { name: 'token_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'username_not', alias?: string  } 
  | { name: 'username_in', alias?: string  } 
  | { name: 'username_not_in', alias?: string  } 
  | { name: 'username_lt', alias?: string  } 
  | { name: 'username_lte', alias?: string  } 
  | { name: 'username_gt', alias?: string  } 
  | { name: 'username_gte', alias?: string  } 
  | { name: 'username_contains', alias?: string  } 
  | { name: 'username_not_contains', alias?: string  } 
  | { name: 'username_starts_with', alias?: string  } 
  | { name: 'username_not_starts_with', alias?: string  } 
  | { name: 'username_ends_with', alias?: string  } 
  | { name: 'username_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'major', alias?: string  } 
  | { name: 'major_not', alias?: string  } 
  | { name: 'major_in', alias?: string  } 
  | { name: 'major_not_in', alias?: string  } 
  | { name: 'major_lt', alias?: string  } 
  | { name: 'major_lte', alias?: string  } 
  | { name: 'major_gt', alias?: string  } 
  | { name: 'major_gte', alias?: string  } 
  | { name: 'major_contains', alias?: string  } 
  | { name: 'major_not_contains', alias?: string  } 
  | { name: 'major_starts_with', alias?: string  } 
  | { name: 'major_not_starts_with', alias?: string  } 
  | { name: 'major_ends_with', alias?: string  } 
  | { name: 'major_not_ends_with', alias?: string  } 
  | { name: 'townYouGrewUpIn', alias?: string  } 
  | { name: 'townYouGrewUpIn_not', alias?: string  } 
  | { name: 'townYouGrewUpIn_in', alias?: string  } 
  | { name: 'townYouGrewUpIn_not_in', alias?: string  } 
  | { name: 'townYouGrewUpIn_lt', alias?: string  } 
  | { name: 'townYouGrewUpIn_lte', alias?: string  } 
  | { name: 'townYouGrewUpIn_gt', alias?: string  } 
  | { name: 'townYouGrewUpIn_gte', alias?: string  } 
  | { name: 'townYouGrewUpIn_contains', alias?: string  } 
  | { name: 'townYouGrewUpIn_not_contains', alias?: string  } 
  | { name: 'townYouGrewUpIn_starts_with', alias?: string  } 
  | { name: 'townYouGrewUpIn_not_starts_with', alias?: string  } 
  | { name: 'townYouGrewUpIn_ends_with', alias?: string  } 
  | { name: 'townYouGrewUpIn_not_ends_with', alias?: string  } 
  | { name: 'favoriteHobby', alias?: string  } 
  | { name: 'favoriteHobby_not', alias?: string  } 
  | { name: 'favoriteHobby_in', alias?: string  } 
  | { name: 'favoriteHobby_not_in', alias?: string  } 
  | { name: 'favoriteHobby_lt', alias?: string  } 
  | { name: 'favoriteHobby_lte', alias?: string  } 
  | { name: 'favoriteHobby_gt', alias?: string  } 
  | { name: 'favoriteHobby_gte', alias?: string  } 
  | { name: 'favoriteHobby_contains', alias?: string  } 
  | { name: 'favoriteHobby_not_contains', alias?: string  } 
  | { name: 'favoriteHobby_starts_with', alias?: string  } 
  | { name: 'favoriteHobby_not_starts_with', alias?: string  } 
  | { name: 'favoriteHobby_ends_with', alias?: string  } 
  | { name: 'favoriteHobby_not_ends_with', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'photo_url_not', alias?: string  } 
  | { name: 'photo_url_in', alias?: string  } 
  | { name: 'photo_url_not_in', alias?: string  } 
  | { name: 'photo_url_lt', alias?: string  } 
  | { name: 'photo_url_lte', alias?: string  } 
  | { name: 'photo_url_gt', alias?: string  } 
  | { name: 'photo_url_gte', alias?: string  } 
  | { name: 'photo_url_contains', alias?: string  } 
  | { name: 'photo_url_not_contains', alias?: string  } 
  | { name: 'photo_url_starts_with', alias?: string  } 
  | { name: 'photo_url_not_starts_with', alias?: string  } 
  | { name: 'photo_url_ends_with', alias?: string  } 
  | { name: 'photo_url_not_ends_with', alias?: string  } 
  | { name: 'cover_photo_url', alias?: string  } 
  | { name: 'cover_photo_url_not', alias?: string  } 
  | { name: 'cover_photo_url_in', alias?: string  } 
  | { name: 'cover_photo_url_not_in', alias?: string  } 
  | { name: 'cover_photo_url_lt', alias?: string  } 
  | { name: 'cover_photo_url_lte', alias?: string  } 
  | { name: 'cover_photo_url_gt', alias?: string  } 
  | { name: 'cover_photo_url_gte', alias?: string  } 
  | { name: 'cover_photo_url_contains', alias?: string  } 
  | { name: 'cover_photo_url_not_contains', alias?: string  } 
  | { name: 'cover_photo_url_starts_with', alias?: string  } 
  | { name: 'cover_photo_url_not_starts_with', alias?: string  } 
  | { name: 'cover_photo_url_ends_with', alias?: string  } 
  | { name: 'cover_photo_url_not_ends_with', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'flagged_as_objectionable_not', alias?: string  } 
  | { name: 'view_objectionable_content', alias?: string  } 
  | { name: 'view_objectionable_content_not', alias?: string  } 
  | { name: 'school', alias?: string  } 
  | { name: 'school_not', alias?: string  } 
  | { name: 'school_in', alias?: string  } 
  | { name: 'school_not_in', alias?: string  } 
  | { name: 'school_lt', alias?: string  } 
  | { name: 'school_lte', alias?: string  } 
  | { name: 'school_gt', alias?: string  } 
  | { name: 'school_gte', alias?: string  } 
  | { name: 'school_contains', alias?: string  } 
  | { name: 'school_not_contains', alias?: string  } 
  | { name: 'school_starts_with', alias?: string  } 
  | { name: 'school_not_starts_with', alias?: string  } 
  | { name: 'school_ends_with', alias?: string  } 
  | { name: 'school_not_ends_with', alias?: string  } 
  | { name: 'about_me', alias?: string  } 
  | { name: 'about_me_not', alias?: string  } 
  | { name: 'about_me_in', alias?: string  } 
  | { name: 'about_me_not_in', alias?: string  } 
  | { name: 'about_me_lt', alias?: string  } 
  | { name: 'about_me_lte', alias?: string  } 
  | { name: 'about_me_gt', alias?: string  } 
  | { name: 'about_me_gte', alias?: string  } 
  | { name: 'about_me_contains', alias?: string  } 
  | { name: 'about_me_not_contains', alias?: string  } 
  | { name: 'about_me_starts_with', alias?: string  } 
  | { name: 'about_me_not_starts_with', alias?: string  } 
  | { name: 'about_me_ends_with', alias?: string  } 
  | { name: 'about_me_not_ends_with', alias?: string  } 
  | { name: 'receive_push_notifications', alias?: string  } 
  | { name: 'receive_push_notifications_not', alias?: string  } 
  | { name: 'oneSignalPlayerId', alias?: string  } 
  | { name: 'oneSignalPlayerId_not', alias?: string  } 
  | { name: 'oneSignalPlayerId_in', alias?: string  } 
  | { name: 'oneSignalPlayerId_not_in', alias?: string  } 
  | { name: 'oneSignalPlayerId_lt', alias?: string  } 
  | { name: 'oneSignalPlayerId_lte', alias?: string  } 
  | { name: 'oneSignalPlayerId_gt', alias?: string  } 
  | { name: 'oneSignalPlayerId_gte', alias?: string  } 
  | { name: 'oneSignalPlayerId_contains', alias?: string  } 
  | { name: 'oneSignalPlayerId_not_contains', alias?: string  } 
  | { name: 'oneSignalPlayerId_starts_with', alias?: string  } 
  | { name: 'oneSignalPlayerId_not_starts_with', alias?: string  } 
  | { name: 'oneSignalPlayerId_ends_with', alias?: string  } 
  | { name: 'oneSignalPlayerId_not_ends_with', alias?: string  } 
  | { name: 'fcm_token', alias?: string  } 
  | { name: 'fcm_token_not', alias?: string  } 
  | { name: 'fcm_token_in', alias?: string  } 
  | { name: 'fcm_token_not_in', alias?: string  } 
  | { name: 'fcm_token_lt', alias?: string  } 
  | { name: 'fcm_token_lte', alias?: string  } 
  | { name: 'fcm_token_gt', alias?: string  } 
  | { name: 'fcm_token_gte', alias?: string  } 
  | { name: 'fcm_token_contains', alias?: string  } 
  | { name: 'fcm_token_not_contains', alias?: string  } 
  | { name: 'fcm_token_starts_with', alias?: string  } 
  | { name: 'fcm_token_not_starts_with', alias?: string  } 
  | { name: 'fcm_token_ends_with', alias?: string  } 
  | { name: 'fcm_token_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'facebook_social_link', alias?: string  } 
  | { name: 'facebook_social_link_not', alias?: string  } 
  | { name: 'facebook_social_link_in', alias?: string  } 
  | { name: 'facebook_social_link_not_in', alias?: string  } 
  | { name: 'facebook_social_link_lt', alias?: string  } 
  | { name: 'facebook_social_link_lte', alias?: string  } 
  | { name: 'facebook_social_link_gt', alias?: string  } 
  | { name: 'facebook_social_link_gte', alias?: string  } 
  | { name: 'facebook_social_link_contains', alias?: string  } 
  | { name: 'facebook_social_link_not_contains', alias?: string  } 
  | { name: 'facebook_social_link_starts_with', alias?: string  } 
  | { name: 'facebook_social_link_not_starts_with', alias?: string  } 
  | { name: 'facebook_social_link_ends_with', alias?: string  } 
  | { name: 'facebook_social_link_not_ends_with', alias?: string  } 
  | { name: 'twitter_social_link', alias?: string  } 
  | { name: 'twitter_social_link_not', alias?: string  } 
  | { name: 'twitter_social_link_in', alias?: string  } 
  | { name: 'twitter_social_link_not_in', alias?: string  } 
  | { name: 'twitter_social_link_lt', alias?: string  } 
  | { name: 'twitter_social_link_lte', alias?: string  } 
  | { name: 'twitter_social_link_gt', alias?: string  } 
  | { name: 'twitter_social_link_gte', alias?: string  } 
  | { name: 'twitter_social_link_contains', alias?: string  } 
  | { name: 'twitter_social_link_not_contains', alias?: string  } 
  | { name: 'twitter_social_link_starts_with', alias?: string  } 
  | { name: 'twitter_social_link_not_starts_with', alias?: string  } 
  | { name: 'twitter_social_link_ends_with', alias?: string  } 
  | { name: 'twitter_social_link_not_ends_with', alias?: string  } 
  | { name: 'instagram_social_link', alias?: string  } 
  | { name: 'instagram_social_link_not', alias?: string  } 
  | { name: 'instagram_social_link_in', alias?: string  } 
  | { name: 'instagram_social_link_not_in', alias?: string  } 
  | { name: 'instagram_social_link_lt', alias?: string  } 
  | { name: 'instagram_social_link_lte', alias?: string  } 
  | { name: 'instagram_social_link_gt', alias?: string  } 
  | { name: 'instagram_social_link_gte', alias?: string  } 
  | { name: 'instagram_social_link_contains', alias?: string  } 
  | { name: 'instagram_social_link_not_contains', alias?: string  } 
  | { name: 'instagram_social_link_starts_with', alias?: string  } 
  | { name: 'instagram_social_link_not_starts_with', alias?: string  } 
  | { name: 'instagram_social_link_ends_with', alias?: string  } 
  | { name: 'instagram_social_link_not_ends_with', alias?: string  } 
  | { name: 'snapchat_social_link', alias?: string  } 
  | { name: 'snapchat_social_link_not', alias?: string  } 
  | { name: 'snapchat_social_link_in', alias?: string  } 
  | { name: 'snapchat_social_link_not_in', alias?: string  } 
  | { name: 'snapchat_social_link_lt', alias?: string  } 
  | { name: 'snapchat_social_link_lte', alias?: string  } 
  | { name: 'snapchat_social_link_gt', alias?: string  } 
  | { name: 'snapchat_social_link_gte', alias?: string  } 
  | { name: 'snapchat_social_link_contains', alias?: string  } 
  | { name: 'snapchat_social_link_not_contains', alias?: string  } 
  | { name: 'snapchat_social_link_starts_with', alias?: string  } 
  | { name: 'snapchat_social_link_not_starts_with', alias?: string  } 
  | { name: 'snapchat_social_link_ends_with', alias?: string  } 
  | { name: 'snapchat_social_link_not_ends_with', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'role_not', alias?: string  } 
  | { name: 'role_in', alias?: string  } 
  | { name: 'role_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserUpdateManyWithWhereNestedInput {
  where?: UserScalarWhereInput
  data?: UserUpdateManyDataInput
}
export type UserUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof UserUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateManyDataInput {
  email?: string | null
  token?: string | null
  name?: string | null
  username?: string | null
  description?: string | null
  major?: string | null
  townYouGrewUpIn?: string | null
  favoriteHobby?: string | null
  photo_url?: string | null
  cover_photo_url?: string | null
  flagged_as_objectionable?: boolean | null
  view_objectionable_content?: boolean | null
  school?: string | null
  about_me?: string | null
  receive_push_notifications?: boolean | null
  oneSignalPlayerId?: string | null
  fcm_token?: string | null
  facebook_social_link?: string | null
  twitter_social_link?: string | null
  instagram_social_link?: string | null
  snapchat_social_link?: string | null
  role?: prisma.ROLE | null
}
export type UserUpdateManyDataInputInputObject =
  | Extract<keyof UserUpdateManyDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'token', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'major', alias?: string  } 
  | { name: 'townYouGrewUpIn', alias?: string  } 
  | { name: 'favoriteHobby', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'cover_photo_url', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'view_objectionable_content', alias?: string  } 
  | { name: 'school', alias?: string  } 
  | { name: 'about_me', alias?: string  } 
  | { name: 'receive_push_notifications', alias?: string  } 
  | { name: 'oneSignalPlayerId', alias?: string  } 
  | { name: 'fcm_token', alias?: string  } 
  | { name: 'facebook_social_link', alias?: string  } 
  | { name: 'twitter_social_link', alias?: string  } 
  | { name: 'instagram_social_link', alias?: string  } 
  | { name: 'snapchat_social_link', alias?: string  } 
  | { name: 'role', alias?: string  } 
  
export interface TaskUpsertWithoutReviewsInput {
  update?: TaskUpdateWithoutReviewsDataInput
  create?: TaskCreateWithoutReviewsInput
}
export type TaskUpsertWithoutReviewsInputInputObject =
  | Extract<keyof TaskUpsertWithoutReviewsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ReviewUpsertWithWhereUniqueWithoutReviewerInput {
  where?: ReviewWhereUniqueInput
  update?: ReviewUpdateWithoutReviewerDataInput
  create?: ReviewCreateWithoutReviewerInput
}
export type ReviewUpsertWithWhereUniqueWithoutReviewerInputInputObject =
  | Extract<keyof ReviewUpsertWithWhereUniqueWithoutReviewerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpsertWithWhereUniqueWithoutConversationsInput {
  where?: UserWhereUniqueInput
  update?: UserUpdateWithoutConversationsDataInput
  create?: UserCreateWithoutConversationsInput
}
export type UserUpsertWithWhereUniqueWithoutConversationsInputInputObject =
  | Extract<keyof UserUpsertWithWhereUniqueWithoutConversationsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ConversationUpsertWithWhereUniqueWithoutTaskInput {
  where?: ConversationWhereUniqueInput
  update?: ConversationUpdateWithoutTaskDataInput
  create?: ConversationCreateWithoutTaskInput
}
export type ConversationUpsertWithWhereUniqueWithoutTaskInputInputObject =
  | Extract<keyof ConversationUpsertWithWhereUniqueWithoutTaskInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TaskUpsertWithWhereUniqueWithoutParticipantsInput {
  where?: TaskWhereUniqueInput
  update?: TaskUpdateWithoutParticipantsDataInput
  create?: TaskCreateWithoutParticipantsInput
}
export type TaskUpsertWithWhereUniqueWithoutParticipantsInputInputObject =
  | Extract<keyof TaskUpsertWithWhereUniqueWithoutParticipantsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpsertWithWhereUniqueNestedInput {
  where?: UserWhereUniqueInput
  update?: UserUpdateDataInput
  create?: UserCreateInput
}
export type UserUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof UserUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  email?: string | null
  token?: string | null
  name?: string | null
  username?: string | null
  description?: string | null
  major?: string | null
  townYouGrewUpIn?: string | null
  favoriteHobby?: string | null
  photo_url?: string | null
  cover_photo_url?: string | null
  flagged_as_objectionable?: boolean | null
  view_objectionable_content?: boolean | null
  school?: string | null
  about_me?: string | null
  receive_push_notifications?: boolean | null
  oneSignalPlayerId?: string | null
  fcm_token?: string | null
  facebook_social_link?: string | null
  twitter_social_link?: string | null
  instagram_social_link?: string | null
  snapchat_social_link?: string | null
  role?: prisma.ROLE | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'token', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'major', alias?: string  } 
  | { name: 'townYouGrewUpIn', alias?: string  } 
  | { name: 'favoriteHobby', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'cover_photo_url', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'view_objectionable_content', alias?: string  } 
  | { name: 'school', alias?: string  } 
  | { name: 'about_me', alias?: string  } 
  | { name: 'receive_push_notifications', alias?: string  } 
  | { name: 'oneSignalPlayerId', alias?: string  } 
  | { name: 'fcm_token', alias?: string  } 
  | { name: 'facebook_social_link', alias?: string  } 
  | { name: 'twitter_social_link', alias?: string  } 
  | { name: 'instagram_social_link', alias?: string  } 
  | { name: 'snapchat_social_link', alias?: string  } 
  | { name: 'role', alias?: string  } 
  
export interface TaskCreateInput {
  id?: string | null
  title?: string | null
  description?: string | null
  location?: string | null
  eventTime?: string | null
  featured?: boolean | null
  flagged_as_objectionable?: boolean | null
  created_by_joinmi?: boolean | null
  task_type?: prisma.TASK_TYPE | null
  active?: boolean | null
  expiration?: string | null
  creator?: UserCreateOneInput
  participants?: UserCreateManyWithoutTasksInput | null
  conversations?: ConversationCreateManyWithoutTaskInput | null
  reviews?: ReviewCreateManyWithoutTaskInput | null
  category?: CategoryCreateOneWithoutTasksInput
}
export type TaskCreateInputInputObject =
  | Extract<keyof TaskCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'eventTime', alias?: string  } 
  | { name: 'featured', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'created_by_joinmi', alias?: string  } 
  | { name: 'task_type', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  | { name: 'participants', alias?: string  } 
  | { name: 'conversations', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  | { name: 'category', alias?: string  } 
  
export interface TaskUpdateInput {
  title?: string | null
  description?: string | null
  location?: string | null
  eventTime?: string | null
  featured?: boolean | null
  flagged_as_objectionable?: boolean | null
  created_by_joinmi?: boolean | null
  task_type?: prisma.TASK_TYPE | null
  active?: boolean | null
  expiration?: string | null
  creator?: UserUpdateOneRequiredInput | null
  participants?: UserUpdateManyWithoutTasksInput | null
  conversations?: ConversationUpdateManyWithoutTaskInput | null
  reviews?: ReviewUpdateManyWithoutTaskInput | null
  category?: CategoryUpdateOneRequiredWithoutTasksInput | null
}
export type TaskUpdateInputInputObject =
  | Extract<keyof TaskUpdateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'eventTime', alias?: string  } 
  | { name: 'featured', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'created_by_joinmi', alias?: string  } 
  | { name: 'task_type', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  | { name: 'participants', alias?: string  } 
  | { name: 'conversations', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  | { name: 'category', alias?: string  } 
  
export interface TaskUpdateManyMutationInput {
  title?: string | null
  description?: string | null
  location?: string | null
  eventTime?: string | null
  featured?: boolean | null
  flagged_as_objectionable?: boolean | null
  created_by_joinmi?: boolean | null
  task_type?: prisma.TASK_TYPE | null
  active?: boolean | null
  expiration?: string | null
}
export type TaskUpdateManyMutationInputInputObject =
  | Extract<keyof TaskUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'location', alias?: string  } 
  | { name: 'eventTime', alias?: string  } 
  | { name: 'featured', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'created_by_joinmi', alias?: string  } 
  | { name: 'task_type', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  
export interface CategoryCreateInput {
  id?: string | null
  title?: string
  image_url?: string | null
  tasks?: TaskCreateManyWithoutCategoryInput | null
  userCategories?: UserCategoryCreateManyWithoutCategoryInput | null
}
export type CategoryCreateInputInputObject =
  | Extract<keyof CategoryCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'image_url', alias?: string  } 
  | { name: 'tasks', alias?: string  } 
  | { name: 'userCategories', alias?: string  } 
  
export interface CategoryUpdateInput {
  title?: string | null
  image_url?: string | null
  tasks?: TaskUpdateManyWithoutCategoryInput | null
  userCategories?: UserCategoryUpdateManyWithoutCategoryInput | null
}
export type CategoryUpdateInputInputObject =
  | Extract<keyof CategoryUpdateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'image_url', alias?: string  } 
  | { name: 'tasks', alias?: string  } 
  | { name: 'userCategories', alias?: string  } 
  
export interface CategoryUpdateManyMutationInput {
  title?: string | null
  image_url?: string | null
}
export type CategoryUpdateManyMutationInputInputObject =
  | Extract<keyof CategoryUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'image_url', alias?: string  } 
  
export interface UserCategoryCreateInput {
  id?: string | null
  category?: CategoryCreateOneWithoutUserCategoriesInput | null
  selected?: boolean | null
  user?: UserCreateOneWithoutCategoriesInput | null
}
export type UserCategoryCreateInputInputObject =
  | Extract<keyof UserCategoryCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'selected', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserCategoryUpdateInput {
  category?: CategoryUpdateOneWithoutUserCategoriesInput | null
  selected?: boolean | null
  user?: UserUpdateOneWithoutCategoriesInput | null
}
export type UserCategoryUpdateInputInputObject =
  | Extract<keyof UserCategoryUpdateInput, string>
  | { name: 'category', alias?: string  } 
  | { name: 'selected', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserCategoryUpdateManyMutationInput {
  selected?: boolean | null
}
export type UserCategoryUpdateManyMutationInputInputObject =
  | Extract<keyof UserCategoryUpdateManyMutationInput, string>
  | { name: 'selected', alias?: string  } 
  
export interface ConversationCreateInput {
  id?: string | null
  description?: string | null
  active?: boolean | null
  participants?: UserCreateManyWithoutConversationsInput | null
  task?: TaskCreateOneWithoutConversationsInput | null
}
export type ConversationCreateInputInputObject =
  | Extract<keyof ConversationCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'participants', alias?: string  } 
  | { name: 'task', alias?: string  } 
  
export interface ConversationUpdateInput {
  description?: string | null
  active?: boolean | null
  participants?: UserUpdateManyWithoutConversationsInput | null
  task?: TaskUpdateOneWithoutConversationsInput | null
}
export type ConversationUpdateInputInputObject =
  | Extract<keyof ConversationUpdateInput, string>
  | { name: 'description', alias?: string  } 
  | { name: 'active', alias?: string  } 
  | { name: 'participants', alias?: string  } 
  | { name: 'task', alias?: string  } 
  
export interface ConversationUpdateManyMutationInput {
  description?: string | null
  active?: boolean | null
}
export type ConversationUpdateManyMutationInputInputObject =
  | Extract<keyof ConversationUpdateManyMutationInput, string>
  | { name: 'description', alias?: string  } 
  | { name: 'active', alias?: string  } 
  
export interface NotificationCreateInput {
  id?: string | null
  title?: string | null
  description?: string | null
  image_url?: string | null
  data?: undefined | null
  expiration?: string
  read?: boolean | null
  user?: UserCreateOneWithoutNotificationsInput
}
export type NotificationCreateInputInputObject =
  | Extract<keyof NotificationCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'image_url', alias?: string  } 
  | { name: 'data', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'read', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserCreateOneWithoutNotificationsInput {
  create?: UserCreateWithoutNotificationsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutNotificationsInputInputObject =
  | Extract<keyof UserCreateOneWithoutNotificationsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutNotificationsInput {
  id?: string | null
  email?: string
  token?: string | null
  name?: string | null
  username?: string | null
  description?: string | null
  major?: string | null
  townYouGrewUpIn?: string | null
  favoriteHobby?: string | null
  photo_url?: string | null
  cover_photo_url?: string | null
  flagged_as_objectionable?: boolean | null
  view_objectionable_content?: boolean | null
  school?: string | null
  about_me?: string | null
  receive_push_notifications?: boolean | null
  oneSignalPlayerId?: string | null
  fcm_token?: string | null
  facebook_social_link?: string | null
  twitter_social_link?: string | null
  instagram_social_link?: string | null
  snapchat_social_link?: string | null
  role?: prisma.ROLE | null
  block_list?: UserCreateManyInput | null
  tasks?: TaskCreateManyWithoutParticipantsInput | null
  reviews?: ReviewCreateManyWithoutReviewerInput | null
  categories?: UserCategoryCreateManyWithoutUserInput | null
  conversations?: ConversationCreateManyWithoutParticipantsInput | null
}
export type UserCreateWithoutNotificationsInputInputObject =
  | Extract<keyof UserCreateWithoutNotificationsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'token', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'major', alias?: string  } 
  | { name: 'townYouGrewUpIn', alias?: string  } 
  | { name: 'favoriteHobby', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'cover_photo_url', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'view_objectionable_content', alias?: string  } 
  | { name: 'school', alias?: string  } 
  | { name: 'about_me', alias?: string  } 
  | { name: 'receive_push_notifications', alias?: string  } 
  | { name: 'oneSignalPlayerId', alias?: string  } 
  | { name: 'fcm_token', alias?: string  } 
  | { name: 'facebook_social_link', alias?: string  } 
  | { name: 'twitter_social_link', alias?: string  } 
  | { name: 'instagram_social_link', alias?: string  } 
  | { name: 'snapchat_social_link', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'block_list', alias?: string  } 
  | { name: 'tasks', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  | { name: 'conversations', alias?: string  } 
  
export interface NotificationUpdateInput {
  title?: string | null
  description?: string | null
  image_url?: string | null
  data?: undefined | null
  expiration?: string | null
  read?: boolean | null
  user?: UserUpdateOneRequiredWithoutNotificationsInput | null
}
export type NotificationUpdateInputInputObject =
  | Extract<keyof NotificationUpdateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'image_url', alias?: string  } 
  | { name: 'data', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'read', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutNotificationsInput {
  create?: UserCreateWithoutNotificationsInput | null
  update?: UserUpdateWithoutNotificationsDataInput | null
  upsert?: UserUpsertWithoutNotificationsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutNotificationsInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutNotificationsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutNotificationsDataInput {
  email?: string | null
  token?: string | null
  name?: string | null
  username?: string | null
  description?: string | null
  major?: string | null
  townYouGrewUpIn?: string | null
  favoriteHobby?: string | null
  photo_url?: string | null
  cover_photo_url?: string | null
  flagged_as_objectionable?: boolean | null
  view_objectionable_content?: boolean | null
  school?: string | null
  about_me?: string | null
  receive_push_notifications?: boolean | null
  oneSignalPlayerId?: string | null
  fcm_token?: string | null
  facebook_social_link?: string | null
  twitter_social_link?: string | null
  instagram_social_link?: string | null
  snapchat_social_link?: string | null
  role?: prisma.ROLE | null
  block_list?: UserUpdateManyInput | null
  tasks?: TaskUpdateManyWithoutParticipantsInput | null
  reviews?: ReviewUpdateManyWithoutReviewerInput | null
  categories?: UserCategoryUpdateManyWithoutUserInput | null
  conversations?: ConversationUpdateManyWithoutParticipantsInput | null
}
export type UserUpdateWithoutNotificationsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutNotificationsDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'token', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'major', alias?: string  } 
  | { name: 'townYouGrewUpIn', alias?: string  } 
  | { name: 'favoriteHobby', alias?: string  } 
  | { name: 'photo_url', alias?: string  } 
  | { name: 'cover_photo_url', alias?: string  } 
  | { name: 'flagged_as_objectionable', alias?: string  } 
  | { name: 'view_objectionable_content', alias?: string  } 
  | { name: 'school', alias?: string  } 
  | { name: 'about_me', alias?: string  } 
  | { name: 'receive_push_notifications', alias?: string  } 
  | { name: 'oneSignalPlayerId', alias?: string  } 
  | { name: 'fcm_token', alias?: string  } 
  | { name: 'facebook_social_link', alias?: string  } 
  | { name: 'twitter_social_link', alias?: string  } 
  | { name: 'instagram_social_link', alias?: string  } 
  | { name: 'snapchat_social_link', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'block_list', alias?: string  } 
  | { name: 'tasks', alias?: string  } 
  | { name: 'reviews', alias?: string  } 
  | { name: 'categories', alias?: string  } 
  | { name: 'conversations', alias?: string  } 
  
export interface UserUpsertWithoutNotificationsInput {
  update?: UserUpdateWithoutNotificationsDataInput
  create?: UserCreateWithoutNotificationsInput
}
export type UserUpsertWithoutNotificationsInputInputObject =
  | Extract<keyof UserUpsertWithoutNotificationsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface NotificationUpdateManyMutationInput {
  title?: string | null
  description?: string | null
  image_url?: string | null
  data?: undefined | null
  expiration?: string | null
  read?: boolean | null
}
export type NotificationUpdateManyMutationInputInputObject =
  | Extract<keyof NotificationUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'image_url', alias?: string  } 
  | { name: 'data', alias?: string  } 
  | { name: 'expiration', alias?: string  } 
  | { name: 'read', alias?: string  } 
  
export interface ReviewCreateInput {
  id?: string | null
  title?: string | null
  description?: string | null
  rating?: prisma.RATING | null
  reviewer?: UserCreateOneWithoutReviewsInput
  task?: TaskCreateOneWithoutReviewsInput | null
}
export type ReviewCreateInputInputObject =
  | Extract<keyof ReviewCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'reviewer', alias?: string  } 
  | { name: 'task', alias?: string  } 
  
export interface ReviewUpdateInput {
  title?: string | null
  description?: string | null
  rating?: prisma.RATING | null
  reviewer?: UserUpdateOneRequiredWithoutReviewsInput | null
  task?: TaskUpdateOneWithoutReviewsInput | null
}
export type ReviewUpdateInputInputObject =
  | Extract<keyof ReviewUpdateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'reviewer', alias?: string  } 
  | { name: 'task', alias?: string  } 
  
export interface ReviewUpdateManyMutationInput {
  title?: string | null
  description?: string | null
  rating?: prisma.RATING | null
}
export type ReviewUpdateManyMutationInputInputObject =
  | Extract<keyof ReviewUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  
export interface SchoolCreateInput {
  id?: string | null
  name?: string
  description?: string | null
  domain?: string
  active?: boolean | null
}
export type SchoolCreateInputInputObject =
  | Extract<keyof SchoolCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  | { name: 'active', alias?: string  } 
  
export interface SchoolUpdateInput {
  name?: string | null
  description?: string | null
  domain?: string | null
  active?: boolean | null
}
export type SchoolUpdateInputInputObject =
  | Extract<keyof SchoolUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  | { name: 'active', alias?: string  } 
  
export interface SchoolUpdateManyMutationInput {
  name?: string | null
  description?: string | null
  domain?: string | null
  active?: boolean | null
}
export type SchoolUpdateManyMutationInputInputObject =
  | Extract<keyof SchoolUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  | { name: 'active', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TaskSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TaskWhereInput | null
  AND?: TaskSubscriptionWhereInput[]
  OR?: TaskSubscriptionWhereInput[]
  NOT?: TaskSubscriptionWhereInput[]
}
export type TaskSubscriptionWhereInputInputObject =
  | Extract<keyof TaskSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CategorySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CategoryWhereInput | null
  AND?: CategorySubscriptionWhereInput[]
  OR?: CategorySubscriptionWhereInput[]
  NOT?: CategorySubscriptionWhereInput[]
}
export type CategorySubscriptionWhereInputInputObject =
  | Extract<keyof CategorySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserCategorySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserCategoryWhereInput | null
  AND?: UserCategorySubscriptionWhereInput[]
  OR?: UserCategorySubscriptionWhereInput[]
  NOT?: UserCategorySubscriptionWhereInput[]
}
export type UserCategorySubscriptionWhereInputInputObject =
  | Extract<keyof UserCategorySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ConversationSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ConversationWhereInput | null
  AND?: ConversationSubscriptionWhereInput[]
  OR?: ConversationSubscriptionWhereInput[]
  NOT?: ConversationSubscriptionWhereInput[]
}
export type ConversationSubscriptionWhereInputInputObject =
  | Extract<keyof ConversationSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface NotificationSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: NotificationWhereInput | null
  AND?: NotificationSubscriptionWhereInput[]
  OR?: NotificationSubscriptionWhereInput[]
  NOT?: NotificationSubscriptionWhereInput[]
}
export type NotificationSubscriptionWhereInputInputObject =
  | Extract<keyof NotificationSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ReviewSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ReviewWhereInput | null
  AND?: ReviewSubscriptionWhereInput[]
  OR?: ReviewSubscriptionWhereInput[]
  NOT?: ReviewSubscriptionWhereInput[]
}
export type ReviewSubscriptionWhereInputInputObject =
  | Extract<keyof ReviewSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SchoolSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: SchoolWhereInput | null
  AND?: SchoolSubscriptionWhereInput[]
  OR?: SchoolSubscriptionWhereInput[]
  NOT?: SchoolSubscriptionWhereInput[]
}
export type SchoolSubscriptionWhereInputInputObject =
  | Extract<keyof SchoolSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type ROLEValues =
  | 'SUPER_USER'
  | 'USER'
  
export type TASK_TYPEValues =
  | 'GROUP'
  | 'ONE_TO_ONE'
  
export type RATINGValues =
  | 'POSITIVE'
  | 'NEGATIVE'
  | 'NOT_RATED'
  
export type NotificationOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'image_url_ASC'
  | 'image_url_DESC'
  | 'data_ASC'
  | 'data_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'expiration_ASC'
  | 'expiration_DESC'
  | 'read_ASC'
  | 'read_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'token_ASC'
  | 'token_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'username_ASC'
  | 'username_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'major_ASC'
  | 'major_DESC'
  | 'townYouGrewUpIn_ASC'
  | 'townYouGrewUpIn_DESC'
  | 'favoriteHobby_ASC'
  | 'favoriteHobby_DESC'
  | 'photo_url_ASC'
  | 'photo_url_DESC'
  | 'cover_photo_url_ASC'
  | 'cover_photo_url_DESC'
  | 'flagged_as_objectionable_ASC'
  | 'flagged_as_objectionable_DESC'
  | 'view_objectionable_content_ASC'
  | 'view_objectionable_content_DESC'
  | 'school_ASC'
  | 'school_DESC'
  | 'about_me_ASC'
  | 'about_me_DESC'
  | 'receive_push_notifications_ASC'
  | 'receive_push_notifications_DESC'
  | 'oneSignalPlayerId_ASC'
  | 'oneSignalPlayerId_DESC'
  | 'fcm_token_ASC'
  | 'fcm_token_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'facebook_social_link_ASC'
  | 'facebook_social_link_DESC'
  | 'twitter_social_link_ASC'
  | 'twitter_social_link_DESC'
  | 'instagram_social_link_ASC'
  | 'instagram_social_link_DESC'
  | 'snapchat_social_link_ASC'
  | 'snapchat_social_link_DESC'
  | 'role_ASC'
  | 'role_DESC'
  
export type TaskOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'location_ASC'
  | 'location_DESC'
  | 'eventTime_ASC'
  | 'eventTime_DESC'
  | 'featured_ASC'
  | 'featured_DESC'
  | 'flagged_as_objectionable_ASC'
  | 'flagged_as_objectionable_DESC'
  | 'created_by_joinmi_ASC'
  | 'created_by_joinmi_DESC'
  | 'task_type_ASC'
  | 'task_type_DESC'
  | 'active_ASC'
  | 'active_DESC'
  | 'expiration_ASC'
  | 'expiration_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ConversationOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'active_ASC'
  | 'active_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ReviewOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'rating_ASC'
  | 'rating_DESC'
  
export type UserCategoryOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'selected_ASC'
  | 'selected_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CategoryOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'image_url_ASC'
  | 'image_url_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type SchoolOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'domain_ASC'
  | 'domain_DESC'
  | 'active_ASC'
  | 'active_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  