### This file was autogenerated by Nexus 0.11.7
### Do not make changes to this file directly


type AggregateCategory {
  count: Int!
}

type AggregateConversation {
  count: Int!
}

type AggregateNotification {
  count: Int!
}

type AggregateReview {
  count: Int!
}

type AggregateSchool {
  count: Int!
}

type AggregateTask {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserCategory {
  count: Int!
}

type BatchPayload {
  count: Long!
}

"""A segment of tasks grouped by category"""
type Category {
  createdAt: DateTime!
  id: ID!
  image_url: String
  tasks(after: String, before: String, first: Int, last: Int, orderBy: TaskOrderByInput, skip: Int, where: TaskWhereInput): [Task!]
  title: String!
  updatedAt: DateTime!
  userCategories(after: String, before: String, first: Int, last: Int, orderBy: UserCategoryOrderByInput, skip: Int, where: UserCategoryWhereInput): [UserCategory!]
}

type CategoryConnection {
  aggregate: AggregateCategory!
  edges: [CategoryEdge!]!
  pageInfo: PageInfo!
}

input CategoryCreateInput {
  id: ID
  image_url: String
  tasks: TaskCreateManyWithoutCategoryInput
  title: String!
  userCategories: UserCategoryCreateManyWithoutCategoryInput
}

input CategoryCreateOneWithoutTasksInput {
  connect: CategoryWhereUniqueInput
  create: CategoryCreateWithoutTasksInput
}

input CategoryCreateOneWithoutUserCategoriesInput {
  connect: CategoryWhereUniqueInput
  create: CategoryCreateWithoutUserCategoriesInput
}

input CategoryCreateWithoutTasksInput {
  id: ID
  image_url: String
  title: String!
  userCategories: UserCategoryCreateManyWithoutCategoryInput
}

input CategoryCreateWithoutUserCategoriesInput {
  id: ID
  image_url: String
  tasks: TaskCreateManyWithoutCategoryInput
  title: String!
}

type CategoryEdge {
  cursor: String!
  node: Category!
}

enum CategoryOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  image_url_ASC
  image_url_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CategoryUpdateInput {
  image_url: String
  tasks: TaskUpdateManyWithoutCategoryInput
  title: String
  userCategories: UserCategoryUpdateManyWithoutCategoryInput
}

input CategoryUpdateManyMutationInput {
  image_url: String
  title: String
}

input CategoryUpdateOneRequiredWithoutTasksInput {
  connect: CategoryWhereUniqueInput
  create: CategoryCreateWithoutTasksInput
  update: CategoryUpdateWithoutTasksDataInput
  upsert: CategoryUpsertWithoutTasksInput
}

input CategoryUpdateOneWithoutUserCategoriesInput {
  connect: CategoryWhereUniqueInput
  create: CategoryCreateWithoutUserCategoriesInput
  delete: Boolean
  disconnect: Boolean
  update: CategoryUpdateWithoutUserCategoriesDataInput
  upsert: CategoryUpsertWithoutUserCategoriesInput
}

input CategoryUpdateWithoutTasksDataInput {
  image_url: String
  title: String
  userCategories: UserCategoryUpdateManyWithoutCategoryInput
}

input CategoryUpdateWithoutUserCategoriesDataInput {
  image_url: String
  tasks: TaskUpdateManyWithoutCategoryInput
  title: String
}

input CategoryUpsertWithoutTasksInput {
  create: CategoryCreateWithoutTasksInput!
  update: CategoryUpdateWithoutTasksDataInput!
}

input CategoryUpsertWithoutUserCategoriesInput {
  create: CategoryCreateWithoutUserCategoriesInput!
  update: CategoryUpdateWithoutUserCategoriesDataInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  image_url: String
  image_url_contains: String
  image_url_ends_with: String
  image_url_gt: String
  image_url_gte: String
  image_url_in: [String!]
  image_url_lt: String
  image_url_lte: String
  image_url_not: String
  image_url_not_contains: String
  image_url_not_ends_with: String
  image_url_not_in: [String!]
  image_url_not_starts_with: String
  image_url_starts_with: String
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  tasks_every: TaskWhereInput
  tasks_none: TaskWhereInput
  tasks_some: TaskWhereInput
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  userCategories_every: UserCategoryWhereInput
  userCategories_none: UserCategoryWhereInput
  userCategories_some: UserCategoryWhereInput
}

input CategoryWhereUniqueInput {
  id: ID
  title: String
}

"""A chat conversation between 2 or more people"""
type Conversation {
  active: Boolean!
  createdAt: DateTime!
  description: String
  id: ID!

  """The last message sent in the conversation"""
  lastMessage: Message

  """Messages from a conversation"""
  messages: [Message!]

  """The user who is not the creator of the associated task"""
  otherUser(
    """
    The id of the user who created the related task; not required if you are passing a token in the header authorization key
    """
    creator_id: String
  ): User
  participants(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
  task: Task
  updatedAt: DateTime!
}

type ConversationConnection {
  aggregate: AggregateConversation!
  edges: [ConversationEdge!]!
  pageInfo: PageInfo!
}

input ConversationCreateInput {
  active: Boolean
  description: String
  id: ID
  participants: UserCreateManyWithoutConversationsInput
  task: TaskCreateOneWithoutConversationsInput
}

input ConversationCreateManyWithoutParticipantsInput {
  connect: [ConversationWhereUniqueInput!]
  create: [ConversationCreateWithoutParticipantsInput!]
}

input ConversationCreateManyWithoutTaskInput {
  connect: [ConversationWhereUniqueInput!]
  create: [ConversationCreateWithoutTaskInput!]
}

input ConversationCreateWithoutParticipantsInput {
  active: Boolean
  description: String
  id: ID
  task: TaskCreateOneWithoutConversationsInput
}

input ConversationCreateWithoutTaskInput {
  active: Boolean
  description: String
  id: ID
  participants: UserCreateManyWithoutConversationsInput
}

type ConversationEdge {
  cursor: String!
  node: Conversation!
}

enum ConversationOrderByInput {
  active_ASC
  active_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ConversationScalarWhereInput {
  active: Boolean
  active_not: Boolean
  AND: [ConversationScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [ConversationScalarWhereInput!]
  OR: [ConversationScalarWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input ConversationUpdateInput {
  active: Boolean
  description: String
  participants: UserUpdateManyWithoutConversationsInput
  task: TaskUpdateOneWithoutConversationsInput
}

input ConversationUpdateManyDataInput {
  active: Boolean
  description: String
}

input ConversationUpdateManyMutationInput {
  active: Boolean
  description: String
}

input ConversationUpdateManyWithoutParticipantsInput {
  connect: [ConversationWhereUniqueInput!]
  create: [ConversationCreateWithoutParticipantsInput!]
  delete: [ConversationWhereUniqueInput!]
  deleteMany: [ConversationScalarWhereInput!]
  disconnect: [ConversationWhereUniqueInput!]
  set: [ConversationWhereUniqueInput!]
  update: [ConversationUpdateWithWhereUniqueWithoutParticipantsInput!]
  updateMany: [ConversationUpdateManyWithWhereNestedInput!]
  upsert: [ConversationUpsertWithWhereUniqueWithoutParticipantsInput!]
}

input ConversationUpdateManyWithoutTaskInput {
  connect: [ConversationWhereUniqueInput!]
  create: [ConversationCreateWithoutTaskInput!]
  delete: [ConversationWhereUniqueInput!]
  deleteMany: [ConversationScalarWhereInput!]
  disconnect: [ConversationWhereUniqueInput!]
  set: [ConversationWhereUniqueInput!]
  update: [ConversationUpdateWithWhereUniqueWithoutTaskInput!]
  updateMany: [ConversationUpdateManyWithWhereNestedInput!]
  upsert: [ConversationUpsertWithWhereUniqueWithoutTaskInput!]
}

input ConversationUpdateManyWithWhereNestedInput {
  data: ConversationUpdateManyDataInput!
  where: ConversationScalarWhereInput!
}

input ConversationUpdateWithoutParticipantsDataInput {
  active: Boolean
  description: String
  task: TaskUpdateOneWithoutConversationsInput
}

input ConversationUpdateWithoutTaskDataInput {
  active: Boolean
  description: String
  participants: UserUpdateManyWithoutConversationsInput
}

input ConversationUpdateWithWhereUniqueWithoutParticipantsInput {
  data: ConversationUpdateWithoutParticipantsDataInput!
  where: ConversationWhereUniqueInput!
}

input ConversationUpdateWithWhereUniqueWithoutTaskInput {
  data: ConversationUpdateWithoutTaskDataInput!
  where: ConversationWhereUniqueInput!
}

input ConversationUpsertWithWhereUniqueWithoutParticipantsInput {
  create: ConversationCreateWithoutParticipantsInput!
  update: ConversationUpdateWithoutParticipantsDataInput!
  where: ConversationWhereUniqueInput!
}

input ConversationUpsertWithWhereUniqueWithoutTaskInput {
  create: ConversationCreateWithoutTaskInput!
  update: ConversationUpdateWithoutTaskDataInput!
  where: ConversationWhereUniqueInput!
}

input ConversationWhereInput {
  active: Boolean
  active_not: Boolean
  AND: [ConversationWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [ConversationWhereInput!]
  OR: [ConversationWhereInput!]
  participants_every: UserWhereInput
  participants_none: UserWhereInput
  participants_some: UserWhereInput
  task: TaskWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input ConversationWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Json

scalar Long

"""
Messages for the chat application. These are stored in firebase real time database
"""
type Message {
  """Determines if the message is still active or visible."""
  active: Boolean

  """The Datetime of the message"""
  dateSent: String

  """unique identifier for message"""
  id: ID

  """Determines if the message has been read"""
  read: Boolean

  """User who sent the message"""
  sender: User

  """id of the sender"""
  sender_id: String

  """The text of the message"""
  text: String
}

type Mutation {
  """Block a user by id"""
  blockUser(
    """id of the user being blocked"""
    blocked_user_id: String!
  ): User

  """Change whether the user wants to view objectionable content"""
  changeObjectionableContentViewPreference(
    """Value of view objectionable content preference"""
    preference: Boolean!
  ): User
  createCategory(data: CategoryCreateInput!): Category!
  createConversation(data: ConversationCreateInput!): Conversation!

  """Create a new message in a conversation"""
  createMessage(
    """id of conversation"""
    id: String!

    """id of the sender"""
    sender_id: String!

    """actual content of the message"""
    text: String!
  ): Message
  createNotification(data: NotificationCreateInput!): Notification!
  createReview(data: ReviewCreateInput!): Review!
  createSchool(data: SchoolCreateInput!): School!
  createTask(data: TaskCreateInput!): Task!

  """An abstraction around the create task feature"""
  createTaskAbstraction(
    """
    Category of the task. Must be a valid category; Default value is Random
    """
    category_title: String = "Random"

    """Description of the task"""
    description: String = ""

    """Date/Time of the event. Optional"""
    eventTime: String

    """id of the user"""
    id: String!

    """location of task"""
    location: String

    """The title of the task"""
    title: String = ""
  ): Task
  createUser(data: UserCreateInput!): User!
  createUserCategory(data: UserCategoryCreateInput!): UserCategory!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteConversation(where: ConversationWhereUniqueInput!): Conversation
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  deleteManyConversations(where: ConversationWhereInput): BatchPayload!
  deleteManyNotifications(where: NotificationWhereInput): BatchPayload!
  deleteManyReviews(where: ReviewWhereInput): BatchPayload!
  deleteManySchools(where: SchoolWhereInput): BatchPayload!
  deleteManyTasks(where: TaskWhereInput): BatchPayload!
  deleteManyUserCategories(where: UserCategoryWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteSchool(where: SchoolWhereUniqueInput!): School
  deleteTask(where: TaskWhereUniqueInput!): Task
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUserCategory(where: UserCategoryWhereUniqueInput!): UserCategory

  """Flag task as objectionable"""
  flagTaskAsObjectionable(
    """id of the task being flagged"""
    flagged_task_id: String!
  ): Task

  """Flag a user as objectionable"""
  flagUserAsObjectionable(
    """id of the user being flagged"""
    flagged_user_id: String!
  ): User

  """
  This job flips tasks to inactive if they are past expiration or event time
  """
  flipExpirationJob: String

  """
  Receive a conversation object or create one if one does not already exist; returns a conversation object
  """
  getOrCreateConversation(
    """id of the task that the conversation is tied to."""
    task_id: String!

    """id of the logged in user"""
    user_id: String!
  ): Conversation

  """Login mutation: Send your email and firebase uid and get back a token"""
  login(
    """Email of user"""
    email: String!

    """uid received from Firebase"""
    uid: String!
  ): User

  """
  Call this mutation to sign a new user up to JoinMi. It will return a user payload
  """
  register(
    """email of the user"""
    email: String!

    """first and last name of the user"""
    name: String

    """
    The firebase uid that you receive after authenticating through firebase auth.
    """
    uid: String!

    """The username that will show up on said user's profile"""
    username: String
  ): User
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateConversation(data: ConversationUpdateInput!, where: ConversationWhereUniqueInput!): Conversation
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  updateManyConversations(data: ConversationUpdateManyMutationInput!, where: ConversationWhereInput): BatchPayload!
  updateManyNotifications(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): BatchPayload!
  updateManyReviews(data: ReviewUpdateManyMutationInput!, where: ReviewWhereInput): BatchPayload!
  updateManySchools(data: SchoolUpdateManyMutationInput!, where: SchoolWhereInput): BatchPayload!
  updateManyTasks(data: TaskUpdateManyMutationInput!, where: TaskWhereInput): BatchPayload!
  updateManyUserCategories(data: UserCategoryUpdateManyMutationInput!, where: UserCategoryWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateSchool(data: SchoolUpdateInput!, where: SchoolWhereUniqueInput!): School
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateUserCategory(data: UserCategoryUpdateInput!, where: UserCategoryWhereUniqueInput!): UserCategory
  upsertCategory(create: CategoryCreateInput!, update: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category!
  upsertConversation(create: ConversationCreateInput!, update: ConversationUpdateInput!, where: ConversationWhereUniqueInput!): Conversation!
  upsertNotification(create: NotificationCreateInput!, update: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification!
  upsertReview(create: ReviewCreateInput!, update: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review!
  upsertSchool(create: SchoolCreateInput!, update: SchoolUpdateInput!, where: SchoolWhereUniqueInput!): School!
  upsertTask(create: TaskCreateInput!, update: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertUserCategory(create: UserCategoryCreateInput!, update: UserCategoryUpdateInput!, where: UserCategoryWhereUniqueInput!): UserCategory!
}

"""A separare entity to control notifications for users"""
type Notification {
  createdAt: DateTime!
  data: Json
  description: String
  expiration: DateTime!
  id: ID!
  image_url: String
  read: Boolean
  title: String
  updatedAt: DateTime!
  user: User!
}

type NotificationConnection {
  aggregate: AggregateNotification!
  edges: [NotificationEdge!]!
  pageInfo: PageInfo!
}

input NotificationCreateInput {
  data: Json
  description: String
  expiration: DateTime!
  id: ID
  image_url: String
  read: Boolean
  title: String
  user: UserCreateOneWithoutNotificationsInput!
}

input NotificationCreateManyWithoutUserInput {
  connect: [NotificationWhereUniqueInput!]
  create: [NotificationCreateWithoutUserInput!]
}

input NotificationCreateWithoutUserInput {
  data: Json
  description: String
  expiration: DateTime!
  id: ID
  image_url: String
  read: Boolean
  title: String
}

type NotificationEdge {
  cursor: String!
  node: Notification!
}

enum NotificationOrderByInput {
  createdAt_ASC
  createdAt_DESC
  data_ASC
  data_DESC
  description_ASC
  description_DESC
  expiration_ASC
  expiration_DESC
  id_ASC
  id_DESC
  image_url_ASC
  image_url_DESC
  read_ASC
  read_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input NotificationScalarWhereInput {
  AND: [NotificationScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  expiration: DateTime
  expiration_gt: DateTime
  expiration_gte: DateTime
  expiration_in: [DateTime!]
  expiration_lt: DateTime
  expiration_lte: DateTime
  expiration_not: DateTime
  expiration_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  image_url: String
  image_url_contains: String
  image_url_ends_with: String
  image_url_gt: String
  image_url_gte: String
  image_url_in: [String!]
  image_url_lt: String
  image_url_lte: String
  image_url_not: String
  image_url_not_contains: String
  image_url_not_ends_with: String
  image_url_not_in: [String!]
  image_url_not_starts_with: String
  image_url_starts_with: String
  NOT: [NotificationScalarWhereInput!]
  OR: [NotificationScalarWhereInput!]
  read: Boolean
  read_not: Boolean
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input NotificationUpdateInput {
  data: Json
  description: String
  expiration: DateTime
  image_url: String
  read: Boolean
  title: String
  user: UserUpdateOneRequiredWithoutNotificationsInput
}

input NotificationUpdateManyDataInput {
  data: Json
  description: String
  expiration: DateTime
  image_url: String
  read: Boolean
  title: String
}

input NotificationUpdateManyMutationInput {
  data: Json
  description: String
  expiration: DateTime
  image_url: String
  read: Boolean
  title: String
}

input NotificationUpdateManyWithoutUserInput {
  connect: [NotificationWhereUniqueInput!]
  create: [NotificationCreateWithoutUserInput!]
  delete: [NotificationWhereUniqueInput!]
  deleteMany: [NotificationScalarWhereInput!]
  disconnect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [NotificationUpdateManyWithWhereNestedInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutUserInput!]
}

input NotificationUpdateManyWithWhereNestedInput {
  data: NotificationUpdateManyDataInput!
  where: NotificationScalarWhereInput!
}

input NotificationUpdateWithoutUserDataInput {
  data: Json
  description: String
  expiration: DateTime
  image_url: String
  read: Boolean
  title: String
}

input NotificationUpdateWithWhereUniqueWithoutUserInput {
  data: NotificationUpdateWithoutUserDataInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpsertWithWhereUniqueWithoutUserInput {
  create: NotificationCreateWithoutUserInput!
  update: NotificationUpdateWithoutUserDataInput!
  where: NotificationWhereUniqueInput!
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  expiration: DateTime
  expiration_gt: DateTime
  expiration_gte: DateTime
  expiration_in: [DateTime!]
  expiration_lt: DateTime
  expiration_lte: DateTime
  expiration_not: DateTime
  expiration_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  image_url: String
  image_url_contains: String
  image_url_ends_with: String
  image_url_gt: String
  image_url_gte: String
  image_url_in: [String!]
  image_url_lt: String
  image_url_lte: String
  image_url_not: String
  image_url_not_contains: String
  image_url_not_ends_with: String
  image_url_not_in: [String!]
  image_url_not_starts_with: String
  image_url_starts_with: String
  NOT: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  read: Boolean
  read_not: Boolean
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  user: UserWhereInput
}

input NotificationWhereUniqueInput {
  id: ID
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  categories(after: String, before: String, first: Int, last: Int, orderBy: CategoryOrderByInput, skip: Int, where: CategoryWhereInput): [Category!]!
  categoriesConnection(after: String, before: String, first: Int, last: Int, orderBy: CategoryOrderByInput, skip: Int, where: CategoryWhereInput): CategoryConnection!
  category(where: CategoryWhereUniqueInput!): Category
  conversation(where: ConversationWhereUniqueInput!): Conversation
  conversations(after: String, before: String, first: Int, last: Int, orderBy: ConversationOrderByInput, skip: Int, where: ConversationWhereInput): [Conversation!]!
  conversationsConnection(after: String, before: String, first: Int, last: Int, orderBy: ConversationOrderByInput, skip: Int, where: ConversationWhereInput): ConversationConnection!

  """A list of tasks that are expiring soon"""
  expiringSoon(
    """id of user"""
    id: String!

    """Optional search string for tasks expiring soon"""
    searchString: String = ""
  ): [Task!]

  """A list of featured tasks"""
  featuredTasks(
    """id of user"""
    id: String!

    """Optional search string for featured tasks"""
    searchString: String = ""
  ): [Task!]

  """Get a list of notifications for a particular user"""
  getAlertsAbstraction(
    """This is not required if you are passing a token in the header"""
    user_id: String
  ): [Notification!]

  """Get messages for conversation"""
  getMessages(
    """id of conversation"""
    id: String!
  ): [Message!]

  """A list of tasks by category"""
  getTasksByCategory(
    after: String
    before: String
    first: Int

    """id of user"""
    id: String!
    last: Int
    orderBy: TaskOrderByInput

    """Optional search string"""
    searchString: String = ""
    skip: Int

    """A valid category title"""
    title: String!
    where: TaskWhereInput
  ): [Task!]

  """A list of tasks happening soon"""
  happeningSoon(
    """id of user"""
    id: String!

    """Optional search string for tasks happening soon"""
    searchString: String = ""
  ): [Task!]

  """Returns the most recent tasks for a particular user"""
  mostRecentTasks(
    """id of user"""
    id: String!

    """Optional search string for most recent tasks"""
    searchString: String = ""
  ): [Task!]
  notification(where: NotificationWhereUniqueInput!): Notification
  notifications(after: String, before: String, first: Int, last: Int, orderBy: NotificationOrderByInput, skip: Int, where: NotificationWhereInput): [Notification!]!
  notificationsConnection(after: String, before: String, first: Int, last: Int, orderBy: NotificationOrderByInput, skip: Int, where: NotificationWhereInput): NotificationConnection!
  review(where: ReviewWhereUniqueInput!): Review
  reviews(after: String, before: String, first: Int, last: Int, orderBy: ReviewOrderByInput, skip: Int, where: ReviewWhereInput): [Review!]!
  reviewsConnection(after: String, before: String, first: Int, last: Int, orderBy: ReviewOrderByInput, skip: Int, where: ReviewWhereInput): ReviewConnection!
  school(where: SchoolWhereUniqueInput!): School
  schools(after: String, before: String, first: Int, last: Int, orderBy: SchoolOrderByInput, skip: Int, where: SchoolWhereInput): [School!]!
  schoolsConnection(after: String, before: String, first: Int, last: Int, orderBy: SchoolOrderByInput, skip: Int, where: SchoolWhereInput): SchoolConnection!

  """Randomly grabs a set of tasks for a user"""
  surpriseMe(
    """User id of the requested user"""
    id: String!
  ): [Task!]
  task(where: TaskWhereUniqueInput!): Task
  tasks(after: String, before: String, first: Int, last: Int, orderBy: TaskOrderByInput, skip: Int, where: TaskWhereInput): [Task!]!
  tasksConnection(after: String, before: String, first: Int, last: Int, orderBy: TaskOrderByInput, skip: Int, where: TaskWhereInput): TaskConnection!
  user(where: UserWhereUniqueInput!): User
  userCategories(after: String, before: String, first: Int, last: Int, orderBy: UserCategoryOrderByInput, skip: Int, where: UserCategoryWhereInput): [UserCategory!]!
  userCategoriesConnection(after: String, before: String, first: Int, last: Int, orderBy: UserCategoryOrderByInput, skip: Int, where: UserCategoryWhereInput): UserCategoryConnection!
  userCategory(where: UserCategoryWhereUniqueInput!): UserCategory

  """Returns tasks with relevant messages; Ideal for the messages screen"""
  userMessages: [Task!]
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  usersConnection(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): UserConnection!
}

enum RATING {
  NEGATIVE
  NOT_RATED
  POSITIVE
}

"""A separare entity to control ratings on tasks"""
type Review {
  createdAt: DateTime!
  description: String
  id: ID!
  rating: RATING
  reviewer: User!
  task: Task
  title: String
  updatedAt: DateTime!
}

type ReviewConnection {
  aggregate: AggregateReview!
  edges: [ReviewEdge!]!
  pageInfo: PageInfo!
}

input ReviewCreateInput {
  description: String
  id: ID
  rating: RATING
  reviewer: UserCreateOneWithoutReviewsInput!
  task: TaskCreateOneWithoutReviewsInput
  title: String
}

input ReviewCreateManyWithoutReviewerInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutReviewerInput!]
}

input ReviewCreateManyWithoutTaskInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutTaskInput!]
}

input ReviewCreateWithoutReviewerInput {
  description: String
  id: ID
  rating: RATING
  task: TaskCreateOneWithoutReviewsInput
  title: String
}

input ReviewCreateWithoutTaskInput {
  description: String
  id: ID
  rating: RATING
  reviewer: UserCreateOneWithoutReviewsInput!
  title: String
}

type ReviewEdge {
  cursor: String!
  node: Review!
}

enum ReviewOrderByInput {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  rating_ASC
  rating_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ReviewScalarWhereInput {
  AND: [ReviewScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [ReviewScalarWhereInput!]
  OR: [ReviewScalarWhereInput!]
  rating: RATING
  rating_in: [RATING!]
  rating_not: RATING
  rating_not_in: [RATING!]
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input ReviewUpdateInput {
  description: String
  rating: RATING
  reviewer: UserUpdateOneRequiredWithoutReviewsInput
  task: TaskUpdateOneWithoutReviewsInput
  title: String
}

input ReviewUpdateManyDataInput {
  description: String
  rating: RATING
  title: String
}

input ReviewUpdateManyMutationInput {
  description: String
  rating: RATING
  title: String
}

input ReviewUpdateManyWithoutReviewerInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutReviewerInput!]
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutReviewerInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutReviewerInput!]
}

input ReviewUpdateManyWithoutTaskInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutTaskInput!]
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutTaskInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutTaskInput!]
}

input ReviewUpdateManyWithWhereNestedInput {
  data: ReviewUpdateManyDataInput!
  where: ReviewScalarWhereInput!
}

input ReviewUpdateWithoutReviewerDataInput {
  description: String
  rating: RATING
  task: TaskUpdateOneWithoutReviewsInput
  title: String
}

input ReviewUpdateWithoutTaskDataInput {
  description: String
  rating: RATING
  reviewer: UserUpdateOneRequiredWithoutReviewsInput
  title: String
}

input ReviewUpdateWithWhereUniqueWithoutReviewerInput {
  data: ReviewUpdateWithoutReviewerDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpdateWithWhereUniqueWithoutTaskInput {
  data: ReviewUpdateWithoutTaskDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithWhereUniqueWithoutReviewerInput {
  create: ReviewCreateWithoutReviewerInput!
  update: ReviewUpdateWithoutReviewerDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithWhereUniqueWithoutTaskInput {
  create: ReviewCreateWithoutTaskInput!
  update: ReviewUpdateWithoutTaskDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  rating: RATING
  rating_in: [RATING!]
  rating_not: RATING
  rating_not_in: [RATING!]
  reviewer: UserWhereInput
  task: TaskWhereInput
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input ReviewWhereUniqueInput {
  id: ID
}

enum ROLE {
  SUPER_USER
  USER
}

type School {
  active: Boolean
  description: String
  domain: String!
  id: ID!
  name: String!
}

type SchoolConnection {
  aggregate: AggregateSchool!
  edges: [SchoolEdge!]!
  pageInfo: PageInfo!
}

input SchoolCreateInput {
  active: Boolean
  description: String
  domain: String!
  id: ID
  name: String!
}

type SchoolEdge {
  cursor: String!
  node: School!
}

enum SchoolOrderByInput {
  active_ASC
  active_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  domain_ASC
  domain_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input SchoolUpdateInput {
  active: Boolean
  description: String
  domain: String
  name: String
}

input SchoolUpdateManyMutationInput {
  active: Boolean
  description: String
  domain: String
  name: String
}

input SchoolWhereInput {
  active: Boolean
  active_not: Boolean
  AND: [SchoolWhereInput!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  domain: String
  domain_contains: String
  domain_ends_with: String
  domain_gt: String
  domain_gte: String
  domain_in: [String!]
  domain_lt: String
  domain_lte: String
  domain_not: String
  domain_not_contains: String
  domain_not_ends_with: String
  domain_not_in: [String!]
  domain_not_starts_with: String
  domain_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [SchoolWhereInput!]
  OR: [SchoolWhereInput!]
}

input SchoolWhereUniqueInput {
  id: ID
}

"""Activities that users can join in on"""
type Task {
  active: Boolean
  category: Category!
  conversations(after: String, before: String, first: Int, last: Int, orderBy: ConversationOrderByInput, skip: Int, where: ConversationWhereInput): [Conversation!]
  created_by_joinmi: Boolean
  createdAt: DateTime!
  creator: User!
  description: String
  eventTime: DateTime
  expiration: DateTime
  featured: Boolean
  flagged_as_objectionable: Boolean
  id: ID!
  location: String
  participants(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]

  """Conversations that are only relevant to the user"""
  releventConversations(
    """
    The id of the user who you want to find convesations relevant to; If not specified, will use id in token
    """
    user_id: String
  ): [Conversation!]
  reviews(after: String, before: String, first: Int, last: Int, orderBy: ReviewOrderByInput, skip: Int, where: ReviewWhereInput): [Review!]
  task_type: TASK_TYPE
  title: String
  updatedAt: DateTime!
}

enum TASK_TYPE {
  GROUP
  ONE_TO_ONE
}

type TaskConnection {
  aggregate: AggregateTask!
  edges: [TaskEdge!]!
  pageInfo: PageInfo!
}

input TaskCreateInput {
  active: Boolean
  category: CategoryCreateOneWithoutTasksInput!
  conversations: ConversationCreateManyWithoutTaskInput
  created_by_joinmi: Boolean
  creator: UserCreateOneInput!
  description: String
  eventTime: DateTime
  expiration: DateTime
  featured: Boolean
  flagged_as_objectionable: Boolean
  id: ID
  location: String
  participants: UserCreateManyWithoutTasksInput
  reviews: ReviewCreateManyWithoutTaskInput
  task_type: TASK_TYPE
  title: String
}

input TaskCreateManyWithoutCategoryInput {
  connect: [TaskWhereUniqueInput!]
  create: [TaskCreateWithoutCategoryInput!]
}

input TaskCreateManyWithoutParticipantsInput {
  connect: [TaskWhereUniqueInput!]
  create: [TaskCreateWithoutParticipantsInput!]
}

input TaskCreateOneWithoutConversationsInput {
  connect: TaskWhereUniqueInput
  create: TaskCreateWithoutConversationsInput
}

input TaskCreateOneWithoutReviewsInput {
  connect: TaskWhereUniqueInput
  create: TaskCreateWithoutReviewsInput
}

input TaskCreateWithoutCategoryInput {
  active: Boolean
  conversations: ConversationCreateManyWithoutTaskInput
  created_by_joinmi: Boolean
  creator: UserCreateOneInput!
  description: String
  eventTime: DateTime
  expiration: DateTime
  featured: Boolean
  flagged_as_objectionable: Boolean
  id: ID
  location: String
  participants: UserCreateManyWithoutTasksInput
  reviews: ReviewCreateManyWithoutTaskInput
  task_type: TASK_TYPE
  title: String
}

input TaskCreateWithoutConversationsInput {
  active: Boolean
  category: CategoryCreateOneWithoutTasksInput!
  created_by_joinmi: Boolean
  creator: UserCreateOneInput!
  description: String
  eventTime: DateTime
  expiration: DateTime
  featured: Boolean
  flagged_as_objectionable: Boolean
  id: ID
  location: String
  participants: UserCreateManyWithoutTasksInput
  reviews: ReviewCreateManyWithoutTaskInput
  task_type: TASK_TYPE
  title: String
}

input TaskCreateWithoutParticipantsInput {
  active: Boolean
  category: CategoryCreateOneWithoutTasksInput!
  conversations: ConversationCreateManyWithoutTaskInput
  created_by_joinmi: Boolean
  creator: UserCreateOneInput!
  description: String
  eventTime: DateTime
  expiration: DateTime
  featured: Boolean
  flagged_as_objectionable: Boolean
  id: ID
  location: String
  reviews: ReviewCreateManyWithoutTaskInput
  task_type: TASK_TYPE
  title: String
}

input TaskCreateWithoutReviewsInput {
  active: Boolean
  category: CategoryCreateOneWithoutTasksInput!
  conversations: ConversationCreateManyWithoutTaskInput
  created_by_joinmi: Boolean
  creator: UserCreateOneInput!
  description: String
  eventTime: DateTime
  expiration: DateTime
  featured: Boolean
  flagged_as_objectionable: Boolean
  id: ID
  location: String
  participants: UserCreateManyWithoutTasksInput
  task_type: TASK_TYPE
  title: String
}

type TaskEdge {
  cursor: String!
  node: Task!
}

enum TaskOrderByInput {
  active_ASC
  active_DESC
  created_by_joinmi_ASC
  created_by_joinmi_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  eventTime_ASC
  eventTime_DESC
  expiration_ASC
  expiration_DESC
  featured_ASC
  featured_DESC
  flagged_as_objectionable_ASC
  flagged_as_objectionable_DESC
  id_ASC
  id_DESC
  location_ASC
  location_DESC
  task_type_ASC
  task_type_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input TaskScalarWhereInput {
  active: Boolean
  active_not: Boolean
  AND: [TaskScalarWhereInput!]
  created_by_joinmi: Boolean
  created_by_joinmi_not: Boolean
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  eventTime: DateTime
  eventTime_gt: DateTime
  eventTime_gte: DateTime
  eventTime_in: [DateTime!]
  eventTime_lt: DateTime
  eventTime_lte: DateTime
  eventTime_not: DateTime
  eventTime_not_in: [DateTime!]
  expiration: DateTime
  expiration_gt: DateTime
  expiration_gte: DateTime
  expiration_in: [DateTime!]
  expiration_lt: DateTime
  expiration_lte: DateTime
  expiration_not: DateTime
  expiration_not_in: [DateTime!]
  featured: Boolean
  featured_not: Boolean
  flagged_as_objectionable: Boolean
  flagged_as_objectionable_not: Boolean
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  location: String
  location_contains: String
  location_ends_with: String
  location_gt: String
  location_gte: String
  location_in: [String!]
  location_lt: String
  location_lte: String
  location_not: String
  location_not_contains: String
  location_not_ends_with: String
  location_not_in: [String!]
  location_not_starts_with: String
  location_starts_with: String
  NOT: [TaskScalarWhereInput!]
  OR: [TaskScalarWhereInput!]
  task_type: TASK_TYPE
  task_type_in: [TASK_TYPE!]
  task_type_not: TASK_TYPE
  task_type_not_in: [TASK_TYPE!]
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input TaskUpdateInput {
  active: Boolean
  category: CategoryUpdateOneRequiredWithoutTasksInput
  conversations: ConversationUpdateManyWithoutTaskInput
  created_by_joinmi: Boolean
  creator: UserUpdateOneRequiredInput
  description: String
  eventTime: DateTime
  expiration: DateTime
  featured: Boolean
  flagged_as_objectionable: Boolean
  location: String
  participants: UserUpdateManyWithoutTasksInput
  reviews: ReviewUpdateManyWithoutTaskInput
  task_type: TASK_TYPE
  title: String
}

input TaskUpdateManyDataInput {
  active: Boolean
  created_by_joinmi: Boolean
  description: String
  eventTime: DateTime
  expiration: DateTime
  featured: Boolean
  flagged_as_objectionable: Boolean
  location: String
  task_type: TASK_TYPE
  title: String
}

input TaskUpdateManyMutationInput {
  active: Boolean
  created_by_joinmi: Boolean
  description: String
  eventTime: DateTime
  expiration: DateTime
  featured: Boolean
  flagged_as_objectionable: Boolean
  location: String
  task_type: TASK_TYPE
  title: String
}

input TaskUpdateManyWithoutCategoryInput {
  connect: [TaskWhereUniqueInput!]
  create: [TaskCreateWithoutCategoryInput!]
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [TaskUpdateManyWithWhereNestedInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutCategoryInput!]
}

input TaskUpdateManyWithoutParticipantsInput {
  connect: [TaskWhereUniqueInput!]
  create: [TaskCreateWithoutParticipantsInput!]
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutParticipantsInput!]
  updateMany: [TaskUpdateManyWithWhereNestedInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutParticipantsInput!]
}

input TaskUpdateManyWithWhereNestedInput {
  data: TaskUpdateManyDataInput!
  where: TaskScalarWhereInput!
}

input TaskUpdateOneWithoutConversationsInput {
  connect: TaskWhereUniqueInput
  create: TaskCreateWithoutConversationsInput
  delete: Boolean
  disconnect: Boolean
  update: TaskUpdateWithoutConversationsDataInput
  upsert: TaskUpsertWithoutConversationsInput
}

input TaskUpdateOneWithoutReviewsInput {
  connect: TaskWhereUniqueInput
  create: TaskCreateWithoutReviewsInput
  delete: Boolean
  disconnect: Boolean
  update: TaskUpdateWithoutReviewsDataInput
  upsert: TaskUpsertWithoutReviewsInput
}

input TaskUpdateWithoutCategoryDataInput {
  active: Boolean
  conversations: ConversationUpdateManyWithoutTaskInput
  created_by_joinmi: Boolean
  creator: UserUpdateOneRequiredInput
  description: String
  eventTime: DateTime
  expiration: DateTime
  featured: Boolean
  flagged_as_objectionable: Boolean
  location: String
  participants: UserUpdateManyWithoutTasksInput
  reviews: ReviewUpdateManyWithoutTaskInput
  task_type: TASK_TYPE
  title: String
}

input TaskUpdateWithoutConversationsDataInput {
  active: Boolean
  category: CategoryUpdateOneRequiredWithoutTasksInput
  created_by_joinmi: Boolean
  creator: UserUpdateOneRequiredInput
  description: String
  eventTime: DateTime
  expiration: DateTime
  featured: Boolean
  flagged_as_objectionable: Boolean
  location: String
  participants: UserUpdateManyWithoutTasksInput
  reviews: ReviewUpdateManyWithoutTaskInput
  task_type: TASK_TYPE
  title: String
}

input TaskUpdateWithoutParticipantsDataInput {
  active: Boolean
  category: CategoryUpdateOneRequiredWithoutTasksInput
  conversations: ConversationUpdateManyWithoutTaskInput
  created_by_joinmi: Boolean
  creator: UserUpdateOneRequiredInput
  description: String
  eventTime: DateTime
  expiration: DateTime
  featured: Boolean
  flagged_as_objectionable: Boolean
  location: String
  reviews: ReviewUpdateManyWithoutTaskInput
  task_type: TASK_TYPE
  title: String
}

input TaskUpdateWithoutReviewsDataInput {
  active: Boolean
  category: CategoryUpdateOneRequiredWithoutTasksInput
  conversations: ConversationUpdateManyWithoutTaskInput
  created_by_joinmi: Boolean
  creator: UserUpdateOneRequiredInput
  description: String
  eventTime: DateTime
  expiration: DateTime
  featured: Boolean
  flagged_as_objectionable: Boolean
  location: String
  participants: UserUpdateManyWithoutTasksInput
  task_type: TASK_TYPE
  title: String
}

input TaskUpdateWithWhereUniqueWithoutCategoryInput {
  data: TaskUpdateWithoutCategoryDataInput!
  where: TaskWhereUniqueInput!
}

input TaskUpdateWithWhereUniqueWithoutParticipantsInput {
  data: TaskUpdateWithoutParticipantsDataInput!
  where: TaskWhereUniqueInput!
}

input TaskUpsertWithoutConversationsInput {
  create: TaskCreateWithoutConversationsInput!
  update: TaskUpdateWithoutConversationsDataInput!
}

input TaskUpsertWithoutReviewsInput {
  create: TaskCreateWithoutReviewsInput!
  update: TaskUpdateWithoutReviewsDataInput!
}

input TaskUpsertWithWhereUniqueWithoutCategoryInput {
  create: TaskCreateWithoutCategoryInput!
  update: TaskUpdateWithoutCategoryDataInput!
  where: TaskWhereUniqueInput!
}

input TaskUpsertWithWhereUniqueWithoutParticipantsInput {
  create: TaskCreateWithoutParticipantsInput!
  update: TaskUpdateWithoutParticipantsDataInput!
  where: TaskWhereUniqueInput!
}

input TaskWhereInput {
  active: Boolean
  active_not: Boolean
  AND: [TaskWhereInput!]
  category: CategoryWhereInput
  conversations_every: ConversationWhereInput
  conversations_none: ConversationWhereInput
  conversations_some: ConversationWhereInput
  created_by_joinmi: Boolean
  created_by_joinmi_not: Boolean
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  creator: UserWhereInput
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  eventTime: DateTime
  eventTime_gt: DateTime
  eventTime_gte: DateTime
  eventTime_in: [DateTime!]
  eventTime_lt: DateTime
  eventTime_lte: DateTime
  eventTime_not: DateTime
  eventTime_not_in: [DateTime!]
  expiration: DateTime
  expiration_gt: DateTime
  expiration_gte: DateTime
  expiration_in: [DateTime!]
  expiration_lt: DateTime
  expiration_lte: DateTime
  expiration_not: DateTime
  expiration_not_in: [DateTime!]
  featured: Boolean
  featured_not: Boolean
  flagged_as_objectionable: Boolean
  flagged_as_objectionable_not: Boolean
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  location: String
  location_contains: String
  location_ends_with: String
  location_gt: String
  location_gte: String
  location_in: [String!]
  location_lt: String
  location_lte: String
  location_not: String
  location_not_contains: String
  location_not_ends_with: String
  location_not_in: [String!]
  location_not_starts_with: String
  location_starts_with: String
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  participants_every: UserWhereInput
  participants_none: UserWhereInput
  participants_some: UserWhereInput
  reviews_every: ReviewWhereInput
  reviews_none: ReviewWhereInput
  reviews_some: ReviewWhereInput
  task_type: TASK_TYPE
  task_type_in: [TASK_TYPE!]
  task_type_not: TASK_TYPE
  task_type_not_in: [TASK_TYPE!]
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input TaskWhereUniqueInput {
  id: ID
}

"""A user of the application"""
type User {
  about_me: String

  """
  List of tasks that the user is associated with that are still active. Task are
  active if they have not passed the expiration date or event date.
  """
  active_tasks: [Task!]
  block_list(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
  categories(after: String, before: String, first: Int, last: Int, orderBy: UserCategoryOrderByInput, skip: Int, where: UserCategoryWhereInput): [UserCategory!]
  conversations(after: String, before: String, first: Int, last: Int, orderBy: ConversationOrderByInput, skip: Int, where: ConversationWhereInput): [Conversation!]
  cover_photo_url: String
  createdAt: DateTime!
  description: String
  email: String!
  facebook_social_link: String
  favoriteHobby: String
  fcm_token: String
  flagged_as_objectionable: Boolean
  id: ID!

  """
  List of tasks that the user is associated with that are no longer active. Task
  are active if they have not passed the expiration date or event date.
  """
  inactive_tasks: [Task!]
  instagram_social_link: String
  major: String
  name: String
  notifications(after: String, before: String, first: Int, last: Int, orderBy: NotificationOrderByInput, skip: Int, where: NotificationWhereInput): [Notification!]

  """The number of tasks the user is associated with"""
  num_tasks: Int
  oneSignalPlayerId: String
  photo_url: String
  receive_push_notifications: Boolean
  reviews(after: String, before: String, first: Int, last: Int, orderBy: ReviewOrderByInput, skip: Int, where: ReviewWhereInput): [Review!]
  role: ROLE
  school: String
  snapchat_social_link: String
  tasks(after: String, before: String, first: Int, last: Int, orderBy: TaskOrderByInput, skip: Int, where: TaskWhereInput): [Task!]
  token: String
  townYouGrewUpIn: String
  twitter_social_link: String
  updatedAt: DateTime!
  username: String
  view_objectionable_content: Boolean
}

"""
An abstracted view of categories from a user's perspective. This allows users to turn on/off categories as they please.
"""
type UserCategory {
  category: Category
  createdAt: DateTime!
  id: ID!
  selected: Boolean
  updatedAt: DateTime!
  user: User
}

type UserCategoryConnection {
  aggregate: AggregateUserCategory!
  edges: [UserCategoryEdge!]!
  pageInfo: PageInfo!
}

input UserCategoryCreateInput {
  category: CategoryCreateOneWithoutUserCategoriesInput
  id: ID
  selected: Boolean
  user: UserCreateOneWithoutCategoriesInput
}

input UserCategoryCreateManyWithoutCategoryInput {
  connect: [UserCategoryWhereUniqueInput!]
  create: [UserCategoryCreateWithoutCategoryInput!]
}

input UserCategoryCreateManyWithoutUserInput {
  connect: [UserCategoryWhereUniqueInput!]
  create: [UserCategoryCreateWithoutUserInput!]
}

input UserCategoryCreateWithoutCategoryInput {
  id: ID
  selected: Boolean
  user: UserCreateOneWithoutCategoriesInput
}

input UserCategoryCreateWithoutUserInput {
  category: CategoryCreateOneWithoutUserCategoriesInput
  id: ID
  selected: Boolean
}

type UserCategoryEdge {
  cursor: String!
  node: UserCategory!
}

enum UserCategoryOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  selected_ASC
  selected_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserCategoryScalarWhereInput {
  AND: [UserCategoryScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [UserCategoryScalarWhereInput!]
  OR: [UserCategoryScalarWhereInput!]
  selected: Boolean
  selected_not: Boolean
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input UserCategoryUpdateInput {
  category: CategoryUpdateOneWithoutUserCategoriesInput
  selected: Boolean
  user: UserUpdateOneWithoutCategoriesInput
}

input UserCategoryUpdateManyDataInput {
  selected: Boolean
}

input UserCategoryUpdateManyMutationInput {
  selected: Boolean
}

input UserCategoryUpdateManyWithoutCategoryInput {
  connect: [UserCategoryWhereUniqueInput!]
  create: [UserCategoryCreateWithoutCategoryInput!]
  delete: [UserCategoryWhereUniqueInput!]
  deleteMany: [UserCategoryScalarWhereInput!]
  disconnect: [UserCategoryWhereUniqueInput!]
  set: [UserCategoryWhereUniqueInput!]
  update: [UserCategoryUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [UserCategoryUpdateManyWithWhereNestedInput!]
  upsert: [UserCategoryUpsertWithWhereUniqueWithoutCategoryInput!]
}

input UserCategoryUpdateManyWithoutUserInput {
  connect: [UserCategoryWhereUniqueInput!]
  create: [UserCategoryCreateWithoutUserInput!]
  delete: [UserCategoryWhereUniqueInput!]
  deleteMany: [UserCategoryScalarWhereInput!]
  disconnect: [UserCategoryWhereUniqueInput!]
  set: [UserCategoryWhereUniqueInput!]
  update: [UserCategoryUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserCategoryUpdateManyWithWhereNestedInput!]
  upsert: [UserCategoryUpsertWithWhereUniqueWithoutUserInput!]
}

input UserCategoryUpdateManyWithWhereNestedInput {
  data: UserCategoryUpdateManyDataInput!
  where: UserCategoryScalarWhereInput!
}

input UserCategoryUpdateWithoutCategoryDataInput {
  selected: Boolean
  user: UserUpdateOneWithoutCategoriesInput
}

input UserCategoryUpdateWithoutUserDataInput {
  category: CategoryUpdateOneWithoutUserCategoriesInput
  selected: Boolean
}

input UserCategoryUpdateWithWhereUniqueWithoutCategoryInput {
  data: UserCategoryUpdateWithoutCategoryDataInput!
  where: UserCategoryWhereUniqueInput!
}

input UserCategoryUpdateWithWhereUniqueWithoutUserInput {
  data: UserCategoryUpdateWithoutUserDataInput!
  where: UserCategoryWhereUniqueInput!
}

input UserCategoryUpsertWithWhereUniqueWithoutCategoryInput {
  create: UserCategoryCreateWithoutCategoryInput!
  update: UserCategoryUpdateWithoutCategoryDataInput!
  where: UserCategoryWhereUniqueInput!
}

input UserCategoryUpsertWithWhereUniqueWithoutUserInput {
  create: UserCategoryCreateWithoutUserInput!
  update: UserCategoryUpdateWithoutUserDataInput!
  where: UserCategoryWhereUniqueInput!
}

input UserCategoryWhereInput {
  AND: [UserCategoryWhereInput!]
  category: CategoryWhereInput
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [UserCategoryWhereInput!]
  OR: [UserCategoryWhereInput!]
  selected: Boolean
  selected_not: Boolean
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  user: UserWhereInput
}

input UserCategoryWhereUniqueInput {
  id: ID
}

type UserConnection {
  aggregate: AggregateUser!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

input UserCreateInput {
  about_me: String
  block_list: UserCreateManyInput
  categories: UserCategoryCreateManyWithoutUserInput
  conversations: ConversationCreateManyWithoutParticipantsInput
  cover_photo_url: String
  description: String
  email: String!
  facebook_social_link: String
  favoriteHobby: String
  fcm_token: String
  flagged_as_objectionable: Boolean
  id: ID
  instagram_social_link: String
  major: String
  name: String
  notifications: NotificationCreateManyWithoutUserInput
  oneSignalPlayerId: String
  photo_url: String
  receive_push_notifications: Boolean
  reviews: ReviewCreateManyWithoutReviewerInput
  role: ROLE
  school: String
  snapchat_social_link: String
  tasks: TaskCreateManyWithoutParticipantsInput
  token: String
  townYouGrewUpIn: String
  twitter_social_link: String
  username: String
  view_objectionable_content: Boolean
}

input UserCreateManyInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
}

input UserCreateManyWithoutConversationsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutConversationsInput!]
}

input UserCreateManyWithoutTasksInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutTasksInput!]
}

input UserCreateOneInput {
  connect: UserWhereUniqueInput
  create: UserCreateInput
}

input UserCreateOneWithoutCategoriesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCategoriesInput
}

input UserCreateOneWithoutNotificationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutNotificationsInput
}

input UserCreateOneWithoutReviewsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutReviewsInput
}

input UserCreateWithoutCategoriesInput {
  about_me: String
  block_list: UserCreateManyInput
  conversations: ConversationCreateManyWithoutParticipantsInput
  cover_photo_url: String
  description: String
  email: String!
  facebook_social_link: String
  favoriteHobby: String
  fcm_token: String
  flagged_as_objectionable: Boolean
  id: ID
  instagram_social_link: String
  major: String
  name: String
  notifications: NotificationCreateManyWithoutUserInput
  oneSignalPlayerId: String
  photo_url: String
  receive_push_notifications: Boolean
  reviews: ReviewCreateManyWithoutReviewerInput
  role: ROLE
  school: String
  snapchat_social_link: String
  tasks: TaskCreateManyWithoutParticipantsInput
  token: String
  townYouGrewUpIn: String
  twitter_social_link: String
  username: String
  view_objectionable_content: Boolean
}

input UserCreateWithoutConversationsInput {
  about_me: String
  block_list: UserCreateManyInput
  categories: UserCategoryCreateManyWithoutUserInput
  cover_photo_url: String
  description: String
  email: String!
  facebook_social_link: String
  favoriteHobby: String
  fcm_token: String
  flagged_as_objectionable: Boolean
  id: ID
  instagram_social_link: String
  major: String
  name: String
  notifications: NotificationCreateManyWithoutUserInput
  oneSignalPlayerId: String
  photo_url: String
  receive_push_notifications: Boolean
  reviews: ReviewCreateManyWithoutReviewerInput
  role: ROLE
  school: String
  snapchat_social_link: String
  tasks: TaskCreateManyWithoutParticipantsInput
  token: String
  townYouGrewUpIn: String
  twitter_social_link: String
  username: String
  view_objectionable_content: Boolean
}

input UserCreateWithoutNotificationsInput {
  about_me: String
  block_list: UserCreateManyInput
  categories: UserCategoryCreateManyWithoutUserInput
  conversations: ConversationCreateManyWithoutParticipantsInput
  cover_photo_url: String
  description: String
  email: String!
  facebook_social_link: String
  favoriteHobby: String
  fcm_token: String
  flagged_as_objectionable: Boolean
  id: ID
  instagram_social_link: String
  major: String
  name: String
  oneSignalPlayerId: String
  photo_url: String
  receive_push_notifications: Boolean
  reviews: ReviewCreateManyWithoutReviewerInput
  role: ROLE
  school: String
  snapchat_social_link: String
  tasks: TaskCreateManyWithoutParticipantsInput
  token: String
  townYouGrewUpIn: String
  twitter_social_link: String
  username: String
  view_objectionable_content: Boolean
}

input UserCreateWithoutReviewsInput {
  about_me: String
  block_list: UserCreateManyInput
  categories: UserCategoryCreateManyWithoutUserInput
  conversations: ConversationCreateManyWithoutParticipantsInput
  cover_photo_url: String
  description: String
  email: String!
  facebook_social_link: String
  favoriteHobby: String
  fcm_token: String
  flagged_as_objectionable: Boolean
  id: ID
  instagram_social_link: String
  major: String
  name: String
  notifications: NotificationCreateManyWithoutUserInput
  oneSignalPlayerId: String
  photo_url: String
  receive_push_notifications: Boolean
  role: ROLE
  school: String
  snapchat_social_link: String
  tasks: TaskCreateManyWithoutParticipantsInput
  token: String
  townYouGrewUpIn: String
  twitter_social_link: String
  username: String
  view_objectionable_content: Boolean
}

input UserCreateWithoutTasksInput {
  about_me: String
  block_list: UserCreateManyInput
  categories: UserCategoryCreateManyWithoutUserInput
  conversations: ConversationCreateManyWithoutParticipantsInput
  cover_photo_url: String
  description: String
  email: String!
  facebook_social_link: String
  favoriteHobby: String
  fcm_token: String
  flagged_as_objectionable: Boolean
  id: ID
  instagram_social_link: String
  major: String
  name: String
  notifications: NotificationCreateManyWithoutUserInput
  oneSignalPlayerId: String
  photo_url: String
  receive_push_notifications: Boolean
  reviews: ReviewCreateManyWithoutReviewerInput
  role: ROLE
  school: String
  snapchat_social_link: String
  token: String
  townYouGrewUpIn: String
  twitter_social_link: String
  username: String
  view_objectionable_content: Boolean
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserOrderByInput {
  about_me_ASC
  about_me_DESC
  cover_photo_url_ASC
  cover_photo_url_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  email_ASC
  email_DESC
  facebook_social_link_ASC
  facebook_social_link_DESC
  favoriteHobby_ASC
  favoriteHobby_DESC
  fcm_token_ASC
  fcm_token_DESC
  flagged_as_objectionable_ASC
  flagged_as_objectionable_DESC
  id_ASC
  id_DESC
  instagram_social_link_ASC
  instagram_social_link_DESC
  major_ASC
  major_DESC
  name_ASC
  name_DESC
  oneSignalPlayerId_ASC
  oneSignalPlayerId_DESC
  photo_url_ASC
  photo_url_DESC
  receive_push_notifications_ASC
  receive_push_notifications_DESC
  role_ASC
  role_DESC
  school_ASC
  school_DESC
  snapchat_social_link_ASC
  snapchat_social_link_DESC
  token_ASC
  token_DESC
  townYouGrewUpIn_ASC
  townYouGrewUpIn_DESC
  twitter_social_link_ASC
  twitter_social_link_DESC
  updatedAt_ASC
  updatedAt_DESC
  username_ASC
  username_DESC
  view_objectionable_content_ASC
  view_objectionable_content_DESC
}

input UserScalarWhereInput {
  about_me: String
  about_me_contains: String
  about_me_ends_with: String
  about_me_gt: String
  about_me_gte: String
  about_me_in: [String!]
  about_me_lt: String
  about_me_lte: String
  about_me_not: String
  about_me_not_contains: String
  about_me_not_ends_with: String
  about_me_not_in: [String!]
  about_me_not_starts_with: String
  about_me_starts_with: String
  AND: [UserScalarWhereInput!]
  cover_photo_url: String
  cover_photo_url_contains: String
  cover_photo_url_ends_with: String
  cover_photo_url_gt: String
  cover_photo_url_gte: String
  cover_photo_url_in: [String!]
  cover_photo_url_lt: String
  cover_photo_url_lte: String
  cover_photo_url_not: String
  cover_photo_url_not_contains: String
  cover_photo_url_not_ends_with: String
  cover_photo_url_not_in: [String!]
  cover_photo_url_not_starts_with: String
  cover_photo_url_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  facebook_social_link: String
  facebook_social_link_contains: String
  facebook_social_link_ends_with: String
  facebook_social_link_gt: String
  facebook_social_link_gte: String
  facebook_social_link_in: [String!]
  facebook_social_link_lt: String
  facebook_social_link_lte: String
  facebook_social_link_not: String
  facebook_social_link_not_contains: String
  facebook_social_link_not_ends_with: String
  facebook_social_link_not_in: [String!]
  facebook_social_link_not_starts_with: String
  facebook_social_link_starts_with: String
  favoriteHobby: String
  favoriteHobby_contains: String
  favoriteHobby_ends_with: String
  favoriteHobby_gt: String
  favoriteHobby_gte: String
  favoriteHobby_in: [String!]
  favoriteHobby_lt: String
  favoriteHobby_lte: String
  favoriteHobby_not: String
  favoriteHobby_not_contains: String
  favoriteHobby_not_ends_with: String
  favoriteHobby_not_in: [String!]
  favoriteHobby_not_starts_with: String
  favoriteHobby_starts_with: String
  fcm_token: String
  fcm_token_contains: String
  fcm_token_ends_with: String
  fcm_token_gt: String
  fcm_token_gte: String
  fcm_token_in: [String!]
  fcm_token_lt: String
  fcm_token_lte: String
  fcm_token_not: String
  fcm_token_not_contains: String
  fcm_token_not_ends_with: String
  fcm_token_not_in: [String!]
  fcm_token_not_starts_with: String
  fcm_token_starts_with: String
  flagged_as_objectionable: Boolean
  flagged_as_objectionable_not: Boolean
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  instagram_social_link: String
  instagram_social_link_contains: String
  instagram_social_link_ends_with: String
  instagram_social_link_gt: String
  instagram_social_link_gte: String
  instagram_social_link_in: [String!]
  instagram_social_link_lt: String
  instagram_social_link_lte: String
  instagram_social_link_not: String
  instagram_social_link_not_contains: String
  instagram_social_link_not_ends_with: String
  instagram_social_link_not_in: [String!]
  instagram_social_link_not_starts_with: String
  instagram_social_link_starts_with: String
  major: String
  major_contains: String
  major_ends_with: String
  major_gt: String
  major_gte: String
  major_in: [String!]
  major_lt: String
  major_lte: String
  major_not: String
  major_not_contains: String
  major_not_ends_with: String
  major_not_in: [String!]
  major_not_starts_with: String
  major_starts_with: String
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserScalarWhereInput!]
  oneSignalPlayerId: String
  oneSignalPlayerId_contains: String
  oneSignalPlayerId_ends_with: String
  oneSignalPlayerId_gt: String
  oneSignalPlayerId_gte: String
  oneSignalPlayerId_in: [String!]
  oneSignalPlayerId_lt: String
  oneSignalPlayerId_lte: String
  oneSignalPlayerId_not: String
  oneSignalPlayerId_not_contains: String
  oneSignalPlayerId_not_ends_with: String
  oneSignalPlayerId_not_in: [String!]
  oneSignalPlayerId_not_starts_with: String
  oneSignalPlayerId_starts_with: String
  OR: [UserScalarWhereInput!]
  photo_url: String
  photo_url_contains: String
  photo_url_ends_with: String
  photo_url_gt: String
  photo_url_gte: String
  photo_url_in: [String!]
  photo_url_lt: String
  photo_url_lte: String
  photo_url_not: String
  photo_url_not_contains: String
  photo_url_not_ends_with: String
  photo_url_not_in: [String!]
  photo_url_not_starts_with: String
  photo_url_starts_with: String
  receive_push_notifications: Boolean
  receive_push_notifications_not: Boolean
  role: ROLE
  role_in: [ROLE!]
  role_not: ROLE
  role_not_in: [ROLE!]
  school: String
  school_contains: String
  school_ends_with: String
  school_gt: String
  school_gte: String
  school_in: [String!]
  school_lt: String
  school_lte: String
  school_not: String
  school_not_contains: String
  school_not_ends_with: String
  school_not_in: [String!]
  school_not_starts_with: String
  school_starts_with: String
  snapchat_social_link: String
  snapchat_social_link_contains: String
  snapchat_social_link_ends_with: String
  snapchat_social_link_gt: String
  snapchat_social_link_gte: String
  snapchat_social_link_in: [String!]
  snapchat_social_link_lt: String
  snapchat_social_link_lte: String
  snapchat_social_link_not: String
  snapchat_social_link_not_contains: String
  snapchat_social_link_not_ends_with: String
  snapchat_social_link_not_in: [String!]
  snapchat_social_link_not_starts_with: String
  snapchat_social_link_starts_with: String
  token: String
  token_contains: String
  token_ends_with: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_ends_with: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_starts_with: String
  townYouGrewUpIn: String
  townYouGrewUpIn_contains: String
  townYouGrewUpIn_ends_with: String
  townYouGrewUpIn_gt: String
  townYouGrewUpIn_gte: String
  townYouGrewUpIn_in: [String!]
  townYouGrewUpIn_lt: String
  townYouGrewUpIn_lte: String
  townYouGrewUpIn_not: String
  townYouGrewUpIn_not_contains: String
  townYouGrewUpIn_not_ends_with: String
  townYouGrewUpIn_not_in: [String!]
  townYouGrewUpIn_not_starts_with: String
  townYouGrewUpIn_starts_with: String
  twitter_social_link: String
  twitter_social_link_contains: String
  twitter_social_link_ends_with: String
  twitter_social_link_gt: String
  twitter_social_link_gte: String
  twitter_social_link_in: [String!]
  twitter_social_link_lt: String
  twitter_social_link_lte: String
  twitter_social_link_not: String
  twitter_social_link_not_contains: String
  twitter_social_link_not_ends_with: String
  twitter_social_link_not_in: [String!]
  twitter_social_link_not_starts_with: String
  twitter_social_link_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  username: String
  username_contains: String
  username_ends_with: String
  username_gt: String
  username_gte: String
  username_in: [String!]
  username_lt: String
  username_lte: String
  username_not: String
  username_not_contains: String
  username_not_ends_with: String
  username_not_in: [String!]
  username_not_starts_with: String
  username_starts_with: String
  view_objectionable_content: Boolean
  view_objectionable_content_not: Boolean
}

input UserUpdateDataInput {
  about_me: String
  block_list: UserUpdateManyInput
  categories: UserCategoryUpdateManyWithoutUserInput
  conversations: ConversationUpdateManyWithoutParticipantsInput
  cover_photo_url: String
  description: String
  email: String
  facebook_social_link: String
  favoriteHobby: String
  fcm_token: String
  flagged_as_objectionable: Boolean
  instagram_social_link: String
  major: String
  name: String
  notifications: NotificationUpdateManyWithoutUserInput
  oneSignalPlayerId: String
  photo_url: String
  receive_push_notifications: Boolean
  reviews: ReviewUpdateManyWithoutReviewerInput
  role: ROLE
  school: String
  snapchat_social_link: String
  tasks: TaskUpdateManyWithoutParticipantsInput
  token: String
  townYouGrewUpIn: String
  twitter_social_link: String
  username: String
  view_objectionable_content: Boolean
}

input UserUpdateInput {
  about_me: String
  block_list: UserUpdateManyInput
  categories: UserCategoryUpdateManyWithoutUserInput
  conversations: ConversationUpdateManyWithoutParticipantsInput
  cover_photo_url: String
  description: String
  email: String
  facebook_social_link: String
  favoriteHobby: String
  fcm_token: String
  flagged_as_objectionable: Boolean
  instagram_social_link: String
  major: String
  name: String
  notifications: NotificationUpdateManyWithoutUserInput
  oneSignalPlayerId: String
  photo_url: String
  receive_push_notifications: Boolean
  reviews: ReviewUpdateManyWithoutReviewerInput
  role: ROLE
  school: String
  snapchat_social_link: String
  tasks: TaskUpdateManyWithoutParticipantsInput
  token: String
  townYouGrewUpIn: String
  twitter_social_link: String
  username: String
  view_objectionable_content: Boolean
}

input UserUpdateManyDataInput {
  about_me: String
  cover_photo_url: String
  description: String
  email: String
  facebook_social_link: String
  favoriteHobby: String
  fcm_token: String
  flagged_as_objectionable: Boolean
  instagram_social_link: String
  major: String
  name: String
  oneSignalPlayerId: String
  photo_url: String
  receive_push_notifications: Boolean
  role: ROLE
  school: String
  snapchat_social_link: String
  token: String
  townYouGrewUpIn: String
  twitter_social_link: String
  username: String
  view_objectionable_content: Boolean
}

input UserUpdateManyInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateManyMutationInput {
  about_me: String
  cover_photo_url: String
  description: String
  email: String
  facebook_social_link: String
  favoriteHobby: String
  fcm_token: String
  flagged_as_objectionable: Boolean
  instagram_social_link: String
  major: String
  name: String
  oneSignalPlayerId: String
  photo_url: String
  receive_push_notifications: Boolean
  role: ROLE
  school: String
  snapchat_social_link: String
  token: String
  townYouGrewUpIn: String
  twitter_social_link: String
  username: String
  view_objectionable_content: Boolean
}

input UserUpdateManyWithoutConversationsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutConversationsInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutConversationsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutConversationsInput!]
}

input UserUpdateManyWithoutTasksInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutTasksInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTasksInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTasksInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredInput {
  connect: UserWhereUniqueInput
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutNotificationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutNotificationsInput
  update: UserUpdateWithoutNotificationsDataInput
  upsert: UserUpsertWithoutNotificationsInput
}

input UserUpdateOneRequiredWithoutReviewsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutReviewsInput
  update: UserUpdateWithoutReviewsDataInput
  upsert: UserUpsertWithoutReviewsInput
}

input UserUpdateOneWithoutCategoriesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCategoriesInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutCategoriesDataInput
  upsert: UserUpsertWithoutCategoriesInput
}

input UserUpdateWithoutCategoriesDataInput {
  about_me: String
  block_list: UserUpdateManyInput
  conversations: ConversationUpdateManyWithoutParticipantsInput
  cover_photo_url: String
  description: String
  email: String
  facebook_social_link: String
  favoriteHobby: String
  fcm_token: String
  flagged_as_objectionable: Boolean
  instagram_social_link: String
  major: String
  name: String
  notifications: NotificationUpdateManyWithoutUserInput
  oneSignalPlayerId: String
  photo_url: String
  receive_push_notifications: Boolean
  reviews: ReviewUpdateManyWithoutReviewerInput
  role: ROLE
  school: String
  snapchat_social_link: String
  tasks: TaskUpdateManyWithoutParticipantsInput
  token: String
  townYouGrewUpIn: String
  twitter_social_link: String
  username: String
  view_objectionable_content: Boolean
}

input UserUpdateWithoutConversationsDataInput {
  about_me: String
  block_list: UserUpdateManyInput
  categories: UserCategoryUpdateManyWithoutUserInput
  cover_photo_url: String
  description: String
  email: String
  facebook_social_link: String
  favoriteHobby: String
  fcm_token: String
  flagged_as_objectionable: Boolean
  instagram_social_link: String
  major: String
  name: String
  notifications: NotificationUpdateManyWithoutUserInput
  oneSignalPlayerId: String
  photo_url: String
  receive_push_notifications: Boolean
  reviews: ReviewUpdateManyWithoutReviewerInput
  role: ROLE
  school: String
  snapchat_social_link: String
  tasks: TaskUpdateManyWithoutParticipantsInput
  token: String
  townYouGrewUpIn: String
  twitter_social_link: String
  username: String
  view_objectionable_content: Boolean
}

input UserUpdateWithoutNotificationsDataInput {
  about_me: String
  block_list: UserUpdateManyInput
  categories: UserCategoryUpdateManyWithoutUserInput
  conversations: ConversationUpdateManyWithoutParticipantsInput
  cover_photo_url: String
  description: String
  email: String
  facebook_social_link: String
  favoriteHobby: String
  fcm_token: String
  flagged_as_objectionable: Boolean
  instagram_social_link: String
  major: String
  name: String
  oneSignalPlayerId: String
  photo_url: String
  receive_push_notifications: Boolean
  reviews: ReviewUpdateManyWithoutReviewerInput
  role: ROLE
  school: String
  snapchat_social_link: String
  tasks: TaskUpdateManyWithoutParticipantsInput
  token: String
  townYouGrewUpIn: String
  twitter_social_link: String
  username: String
  view_objectionable_content: Boolean
}

input UserUpdateWithoutReviewsDataInput {
  about_me: String
  block_list: UserUpdateManyInput
  categories: UserCategoryUpdateManyWithoutUserInput
  conversations: ConversationUpdateManyWithoutParticipantsInput
  cover_photo_url: String
  description: String
  email: String
  facebook_social_link: String
  favoriteHobby: String
  fcm_token: String
  flagged_as_objectionable: Boolean
  instagram_social_link: String
  major: String
  name: String
  notifications: NotificationUpdateManyWithoutUserInput
  oneSignalPlayerId: String
  photo_url: String
  receive_push_notifications: Boolean
  role: ROLE
  school: String
  snapchat_social_link: String
  tasks: TaskUpdateManyWithoutParticipantsInput
  token: String
  townYouGrewUpIn: String
  twitter_social_link: String
  username: String
  view_objectionable_content: Boolean
}

input UserUpdateWithoutTasksDataInput {
  about_me: String
  block_list: UserUpdateManyInput
  categories: UserCategoryUpdateManyWithoutUserInput
  conversations: ConversationUpdateManyWithoutParticipantsInput
  cover_photo_url: String
  description: String
  email: String
  facebook_social_link: String
  favoriteHobby: String
  fcm_token: String
  flagged_as_objectionable: Boolean
  instagram_social_link: String
  major: String
  name: String
  notifications: NotificationUpdateManyWithoutUserInput
  oneSignalPlayerId: String
  photo_url: String
  receive_push_notifications: Boolean
  reviews: ReviewUpdateManyWithoutReviewerInput
  role: ROLE
  school: String
  snapchat_social_link: String
  token: String
  townYouGrewUpIn: String
  twitter_social_link: String
  username: String
  view_objectionable_content: Boolean
}

input UserUpdateWithWhereUniqueNestedInput {
  data: UserUpdateDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutConversationsInput {
  data: UserUpdateWithoutConversationsDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutTasksInput {
  data: UserUpdateWithoutTasksDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertNestedInput {
  create: UserCreateInput!
  update: UserUpdateDataInput!
}

input UserUpsertWithoutCategoriesInput {
  create: UserCreateWithoutCategoriesInput!
  update: UserUpdateWithoutCategoriesDataInput!
}

input UserUpsertWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput!
  update: UserUpdateWithoutNotificationsDataInput!
}

input UserUpsertWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput!
  update: UserUpdateWithoutReviewsDataInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  create: UserCreateInput!
  update: UserUpdateDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutConversationsInput {
  create: UserCreateWithoutConversationsInput!
  update: UserUpdateWithoutConversationsDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutTasksInput {
  create: UserCreateWithoutTasksInput!
  update: UserUpdateWithoutTasksDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  about_me: String
  about_me_contains: String
  about_me_ends_with: String
  about_me_gt: String
  about_me_gte: String
  about_me_in: [String!]
  about_me_lt: String
  about_me_lte: String
  about_me_not: String
  about_me_not_contains: String
  about_me_not_ends_with: String
  about_me_not_in: [String!]
  about_me_not_starts_with: String
  about_me_starts_with: String
  AND: [UserWhereInput!]
  block_list_every: UserWhereInput
  block_list_none: UserWhereInput
  block_list_some: UserWhereInput
  categories_every: UserCategoryWhereInput
  categories_none: UserCategoryWhereInput
  categories_some: UserCategoryWhereInput
  conversations_every: ConversationWhereInput
  conversations_none: ConversationWhereInput
  conversations_some: ConversationWhereInput
  cover_photo_url: String
  cover_photo_url_contains: String
  cover_photo_url_ends_with: String
  cover_photo_url_gt: String
  cover_photo_url_gte: String
  cover_photo_url_in: [String!]
  cover_photo_url_lt: String
  cover_photo_url_lte: String
  cover_photo_url_not: String
  cover_photo_url_not_contains: String
  cover_photo_url_not_ends_with: String
  cover_photo_url_not_in: [String!]
  cover_photo_url_not_starts_with: String
  cover_photo_url_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  facebook_social_link: String
  facebook_social_link_contains: String
  facebook_social_link_ends_with: String
  facebook_social_link_gt: String
  facebook_social_link_gte: String
  facebook_social_link_in: [String!]
  facebook_social_link_lt: String
  facebook_social_link_lte: String
  facebook_social_link_not: String
  facebook_social_link_not_contains: String
  facebook_social_link_not_ends_with: String
  facebook_social_link_not_in: [String!]
  facebook_social_link_not_starts_with: String
  facebook_social_link_starts_with: String
  favoriteHobby: String
  favoriteHobby_contains: String
  favoriteHobby_ends_with: String
  favoriteHobby_gt: String
  favoriteHobby_gte: String
  favoriteHobby_in: [String!]
  favoriteHobby_lt: String
  favoriteHobby_lte: String
  favoriteHobby_not: String
  favoriteHobby_not_contains: String
  favoriteHobby_not_ends_with: String
  favoriteHobby_not_in: [String!]
  favoriteHobby_not_starts_with: String
  favoriteHobby_starts_with: String
  fcm_token: String
  fcm_token_contains: String
  fcm_token_ends_with: String
  fcm_token_gt: String
  fcm_token_gte: String
  fcm_token_in: [String!]
  fcm_token_lt: String
  fcm_token_lte: String
  fcm_token_not: String
  fcm_token_not_contains: String
  fcm_token_not_ends_with: String
  fcm_token_not_in: [String!]
  fcm_token_not_starts_with: String
  fcm_token_starts_with: String
  flagged_as_objectionable: Boolean
  flagged_as_objectionable_not: Boolean
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  instagram_social_link: String
  instagram_social_link_contains: String
  instagram_social_link_ends_with: String
  instagram_social_link_gt: String
  instagram_social_link_gte: String
  instagram_social_link_in: [String!]
  instagram_social_link_lt: String
  instagram_social_link_lte: String
  instagram_social_link_not: String
  instagram_social_link_not_contains: String
  instagram_social_link_not_ends_with: String
  instagram_social_link_not_in: [String!]
  instagram_social_link_not_starts_with: String
  instagram_social_link_starts_with: String
  major: String
  major_contains: String
  major_ends_with: String
  major_gt: String
  major_gte: String
  major_in: [String!]
  major_lt: String
  major_lte: String
  major_not: String
  major_not_contains: String
  major_not_ends_with: String
  major_not_in: [String!]
  major_not_starts_with: String
  major_starts_with: String
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  notifications_every: NotificationWhereInput
  notifications_none: NotificationWhereInput
  notifications_some: NotificationWhereInput
  oneSignalPlayerId: String
  oneSignalPlayerId_contains: String
  oneSignalPlayerId_ends_with: String
  oneSignalPlayerId_gt: String
  oneSignalPlayerId_gte: String
  oneSignalPlayerId_in: [String!]
  oneSignalPlayerId_lt: String
  oneSignalPlayerId_lte: String
  oneSignalPlayerId_not: String
  oneSignalPlayerId_not_contains: String
  oneSignalPlayerId_not_ends_with: String
  oneSignalPlayerId_not_in: [String!]
  oneSignalPlayerId_not_starts_with: String
  oneSignalPlayerId_starts_with: String
  OR: [UserWhereInput!]
  photo_url: String
  photo_url_contains: String
  photo_url_ends_with: String
  photo_url_gt: String
  photo_url_gte: String
  photo_url_in: [String!]
  photo_url_lt: String
  photo_url_lte: String
  photo_url_not: String
  photo_url_not_contains: String
  photo_url_not_ends_with: String
  photo_url_not_in: [String!]
  photo_url_not_starts_with: String
  photo_url_starts_with: String
  receive_push_notifications: Boolean
  receive_push_notifications_not: Boolean
  reviews_every: ReviewWhereInput
  reviews_none: ReviewWhereInput
  reviews_some: ReviewWhereInput
  role: ROLE
  role_in: [ROLE!]
  role_not: ROLE
  role_not_in: [ROLE!]
  school: String
  school_contains: String
  school_ends_with: String
  school_gt: String
  school_gte: String
  school_in: [String!]
  school_lt: String
  school_lte: String
  school_not: String
  school_not_contains: String
  school_not_ends_with: String
  school_not_in: [String!]
  school_not_starts_with: String
  school_starts_with: String
  snapchat_social_link: String
  snapchat_social_link_contains: String
  snapchat_social_link_ends_with: String
  snapchat_social_link_gt: String
  snapchat_social_link_gte: String
  snapchat_social_link_in: [String!]
  snapchat_social_link_lt: String
  snapchat_social_link_lte: String
  snapchat_social_link_not: String
  snapchat_social_link_not_contains: String
  snapchat_social_link_not_ends_with: String
  snapchat_social_link_not_in: [String!]
  snapchat_social_link_not_starts_with: String
  snapchat_social_link_starts_with: String
  tasks_every: TaskWhereInput
  tasks_none: TaskWhereInput
  tasks_some: TaskWhereInput
  token: String
  token_contains: String
  token_ends_with: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_ends_with: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_starts_with: String
  townYouGrewUpIn: String
  townYouGrewUpIn_contains: String
  townYouGrewUpIn_ends_with: String
  townYouGrewUpIn_gt: String
  townYouGrewUpIn_gte: String
  townYouGrewUpIn_in: [String!]
  townYouGrewUpIn_lt: String
  townYouGrewUpIn_lte: String
  townYouGrewUpIn_not: String
  townYouGrewUpIn_not_contains: String
  townYouGrewUpIn_not_ends_with: String
  townYouGrewUpIn_not_in: [String!]
  townYouGrewUpIn_not_starts_with: String
  townYouGrewUpIn_starts_with: String
  twitter_social_link: String
  twitter_social_link_contains: String
  twitter_social_link_ends_with: String
  twitter_social_link_gt: String
  twitter_social_link_gte: String
  twitter_social_link_in: [String!]
  twitter_social_link_lt: String
  twitter_social_link_lte: String
  twitter_social_link_not: String
  twitter_social_link_not_contains: String
  twitter_social_link_not_ends_with: String
  twitter_social_link_not_in: [String!]
  twitter_social_link_not_starts_with: String
  twitter_social_link_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  username: String
  username_contains: String
  username_ends_with: String
  username_gt: String
  username_gte: String
  username_in: [String!]
  username_lt: String
  username_lte: String
  username_not: String
  username_not_contains: String
  username_not_ends_with: String
  username_not_in: [String!]
  username_not_starts_with: String
  username_starts_with: String
  view_objectionable_content: Boolean
  view_objectionable_content_not: Boolean
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
